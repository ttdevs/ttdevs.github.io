<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ttdevs</title>
  <subtitle>你之所以觉得时间一年比一年过得快，是因为时间对你一年比一年重要</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ttdevs.github.io/"/>
  <updated>2017-07-27T07:19:01.000Z</updated>
  <id>https://ttdevs.github.io/</id>
  
  <author>
    <name>ttdevs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Android]从通过view.post()获取View宽高谈Android消息机制</title>
    <link href="https://ttdevs.github.io/2017/07/26/Android-%E4%BB%8E%E9%80%9A%E8%BF%87view-post-%E8%8E%B7%E5%8F%96View%E5%AE%BD%E9%AB%98%E8%B0%88Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    <id>https://ttdevs.github.io/2017/07/26/Android-从通过view-post-获取View宽高谈Android消息机制/</id>
    <published>2017-07-26T05:23:19.000Z</published>
    <updated>2017-07-27T07:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-通过view-post-获取View宽高"><a href="/2017/07/26/Android-从通过view-post-获取View宽高谈Android消息机制/#0x00-通过view-post-获取View宽高" class="headerlink" title="0x00 通过view.post()获取View宽高"></a>0x00 通过view.post()获取View宽高</h2><p>有时候我们希望在界面初始话的时候根据View的尺寸来做一些相关的操作（调整），那如何获取View的尺寸呢？</p>
<ul>
<li><p>在Activity的 <code>onCreate()</code> 方法中 delay 几百毫秒<br><br>  由于我们知道在 <code>onCreate()</code> 中直接获取View的尺寸得到的宽高都是0，这个不经思考的答案相信很多人在用。</p>
</li>
<li><p>如果你Google过答案，一般会有下面这几种方法：</p>
<ul>
<li><p>onWindowFocusChanged</p>
<p>  重写Activity的 <code>onWindowFocusChanged()</code> 方法，当Activity的焦点状态发生变化时会回调这个方法，参数 <code>hasFocus</code> 为 <code>true</code> 时表示已经获取到焦点，这个时候View的绘制已经完成，也就可以获取到View的尺寸了。</p>
<pre><code>@Override
public void onWindowFocusChanged(boolean hasFocus) {
  super.onWindowFocusChanged(hasFocus);
  if (hasFocus) {
      System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;onWindowFocusChanged&quot; + tvLog.getWidth());
      System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;onWindowFocusChanged&quot; + tvLog.getHeight());
  }
}
</code></pre></li>
<li><p>ViewTreeObserver.addOnPreDrawListener or .addOnGlobalLayoutListener</p>
<p>  这个方法的缺点是会多次调用。</p>
<pre><code>private void getViewSize(){
    tvLog.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
        @Override
        public boolean onPreDraw() {
            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;addOnPreDrawListener&quot; + tvLog.getWidth());
            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;addOnPreDrawListener&quot; + tvLog.getHeight());
            return true;
        }
    });
    tvLog.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
        @Override
        public void onGlobalLayout() {
            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;addOnGlobalLayoutListener&quot; + tvLog.getWidth());
            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;addOnGlobalLayoutListener&quot; + tvLog.getHeight());
        }
    });
}
</code></pre></li>
<li><p>view.post()</p>
<p>  这中方法是我个人推荐的方法，接下来的内容会着重分析。</p>
<pre><code>private void getViewSize() {
    tvLog.post(new Runnable() {
        @Override
        public void run() {
            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;post&quot; + tvLog.getWidth());
            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;post&quot; + tvLog.getHeight());
        }
    });
}
</code></pre></li>
<li><p>当然，还会有一些其他方法，比如手动measure，在View内部获取等等</p>
</li>
</ul>
</li>
</ul>
<p><a href="https://stackoverflow.com/questions/3591784/getwidth-and-getheight-of-view-returns-0" target="_blank" rel="external">可以参考这里</a></p>
<p>以上的几种方法都可以，下面针对View.post做一个分析。</p>
<h2 id="0x01-Android系统的消息机制"><a href="/2017/07/26/Android-从通过view-post-获取View宽高谈Android消息机制/#0x01-Android系统的消息机制" class="headerlink" title="0x01 Android系统的消息机制"></a>0x01 Android系统的消息机制</h2><p>Android系统的消息机制，是每个初学者都必须掌握的基础知识。以前学习的时候有看过，初面试的时候也去突击过，但是都深入的去理解去掌握，惭愧呢。</p>
<p>对于一个消息系统，大家可以类比下生活中的快递系统：有发件人，有收件人，有快递公司，当然还有最重要的信件。通过这个系统我们可以将不同的信件投送到不同的地方，比如从个人投送到政府部门，从国内投送到国外等。下面的表格看起来会更直观一些：</p>
<table>
<thead>
<tr>
<th style="text-align:center">快递系统</th>
<th style="text-align:center">Android消息系统</th>
<th style="text-align:center">职责</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">发件人</td>
<td style="text-align:center">Handler</td>
<td style="text-align:center">发送消息</td>
</tr>
<tr>
<td style="text-align:center">收件人</td>
<td style="text-align:center">Handler</td>
<td style="text-align:center">接收处理消息</td>
</tr>
<tr>
<td style="text-align:center">快件</td>
<td style="text-align:center">Message</td>
<td style="text-align:center">发送的内容</td>
</tr>
<tr>
<td style="text-align:center">快递公司</td>
<td style="text-align:center">Looper / MessageQueue</td>
<td style="text-align:center">接收消息、传递消息、分发消息</td>
</tr>
</tbody>
</table>
<p>相信这个简单的对比对理解消息机制会有很大帮助。接下来我们再来看看这个系统是如何运行的。</p>
<p>先看一下消息系统的简单使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line"></div><div class="line">            printMsg(<span class="string">"handleMessage:"</span> + msg.obj);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.btSendMsg:</div><div class="line">                defaultSendMsg();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">defaultSendMsg</span><span class="params">()</span> </span>&#123;</div><div class="line">        Message msg = <span class="keyword">new</span> Message();</div><div class="line">        msg.obj = <span class="string">"这是最简单的使用方法，但无实际意义"</span>;</div><div class="line">        mHandler.sendMessage(msg);</div><div class="line">        printMsg(<span class="string">"Is MainLooper: "</span> + (mHandler.getLooper() == getMainLooper()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I/System.out: &gt;&gt;&gt;&gt;&gt;Is MainLooper: true</div><div class="line">I/System.out: &gt;&gt;&gt;&gt;&gt;handleMessage:这是最简单的使用方法，但无实际意义</div></pre></td></tr></table></figure>
<p>从这里可以看到，我们需要先创建一个Handler对象，然后通过这个Handler发送消息，然后在Handler中处理接收到的消息。另外我们还看到我们的Looper对象是主线程的Looper，这是因为我们是在Activity跑的这段代码。下面我们来跟一下代码。</p>
<p>从Handler的构造方法开始：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">   ...</div><div class="line"></div><div class="line">   mLooper = Looper.myLooper();</div><div class="line">   <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">           <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">   &#125;</div><div class="line">   mQueue = mLooper.mQueue;</div><div class="line">   mCallback = callback; <span class="comment">// 这个对象我们在后面的dispatchMessage时会用到</span></div><div class="line">   mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们看到，通过 <code>Looper.myLooper()</code> 获取到一个Looper对象，然后再从这个Looper对象中拿到一个MessageQueue对象（mQueue），这样我们很容易得到结论——消息队列是位于Looper中的。那MessageQueue是什么时候创建的，又是怎样处理消息的？带着这些疑问我们接下来看 <code>Handler.sendMessage(msg)</code> (<code>sendMessage()</code> 最终会调到 <code>sendMessageAtTime()</code>)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">   MessageQueue queue = mQueue;</div><div class="line">   <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">       RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">               <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">       Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">   msg.target = <span class="keyword">this</span>;</div><div class="line">   <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">       msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>sendMessageAtTime()</code> 会传入两个参数：<code>Message</code> 和 <code>uptimeMillis</code>，<code>uptimeMillis</code> 的意思是消息将会在这个时刻执行（不是非常精确），这种情况比如常见的 <code>postDelay</code>。在 <code>enqueueMessage()</code> 方法中，会根据这个值将消息加入消息队列，我们还可以看到，在放入队列之前Message的 <code>target</code> 被设置为当前的Handler对象——透露下这个是保证之后消息投递的时候仍分发给当前Handler，这个很重要！</p>
<p>再来看下上面提到的 Looper 和 MessageQueue：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Looper</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// sThreadLocal.get() will return null unless you've called prepare().</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">       &#125;</div><div class="line">       sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Initialize the current thread as a looper, marking it as an</div><div class="line">    * application's main looper. The main looper for your application</div><div class="line">    * is created by the Android environment, so you should never need</div><div class="line">    * to call this function yourself.  See also: &#123;<span class="doctag">@link</span> #prepare()&#125;</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">       prepare(<span class="keyword">false</span>);</div><div class="line">       <span class="keyword">synchronized</span> (Looper.class) &#123;</div><div class="line">           <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</div><div class="line">           &#125;</div><div class="line">           sMainLooper = myLooper();</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Returns the application's main looper, which lives in the main thread of the application.</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">getMainLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">synchronized</span> (Looper.class) &#123;</div><div class="line">           <span class="keyword">return</span> sMainLooper;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Run the message queue in this thread. Be sure to call</div><div class="line">    * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">       <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line">       ...</div><div class="line">       <span class="keyword">for</span> (;;) &#123;</div><div class="line">           Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">           <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           &#125;</div><div class="line">    </div><div class="line">           ...</div><div class="line">    </div><div class="line">           msg.target.dispatchMessage(msg);</div><div class="line">    </div><div class="line">           <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">               logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">           &#125;</div><div class="line">    </div><div class="line">           ...</div><div class="line">    </div><div class="line">           msg.recycleUnchecked();</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">        mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">        mThread = Thread.currentThread();</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Return the Looper object associated with the current thread.  Returns</div><div class="line">    * null if the calling thread is not associated with a Looper.</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> sThreadLocal.get();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Return the &#123;<span class="doctag">@link</span> MessageQueue&#125; object associated with the current</div><div class="line">    * thread.  This must be called from a thread running a Looper, or a</div><div class="line">    * NullPointerException will be thrown.</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@NonNull</span> <span class="function">MessageQueue <span class="title">myQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> myLooper().mQueue;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">       mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">       mThread = Thread.currentThread();</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Looper的构造方法中只是创建了一个 MessageQueue 对象，同时这个方法是私有的，因此这个类无法在外部通过new来创建，。我们看到唯一创建的地方就是 <code>Looper.prepare()</code> 方法中，创建好之后直接被加入到ThreadLocal中。再来看我们刚才用到的 <code>Looper.myLooper()</code> 方法，这其中只有一行很尴尬的代码，<code>sThreadLocal.get()</code> ，它就是从ThreadLocal中获取 <code>属于当前线程的 Looper 对象</code>。关于 ThreadLocal，这个在我的<a href="http://blog.csdn.net/ttdevs/article/details/71375416" target="_blank" rel="external">另一篇文章中有介绍</a>——我们在线程中创建的变量，任何一个线程都可以访问并对其修改，但是我们通过LocalThread创建的变量，就只有当前线程可以访问了。</p>
<p>之前我们知道通过 Handler.sendMessage(msg) 将 Message 存入 MessageQueue 中，在上面的代码中我们可以看到，Looper.loop()中开了一个死循环，将消息从 MessageQueue 中取出然后进行分发。看到 MessageQueue 后我第一个想到就是阻塞队列，结果看了源码之后并不是这么简单。如果想看这个类的分析，可以参考<a href="http://blog.csdn.net/luoshengyang/article/details/6817933/" target="_blank" rel="external">这里</a>，这是最核心的部分，涉及到操作系统的知识，我就不卖弄了。但是这不影响我们将 MessageQueue 按照一个阻塞队列来理解。</p>
<p>再看下Looper是如何使用的。我们在Looper的类注释中可以看到这段信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Class used to run a message loop for a thread.  Threads by default do</div><div class="line">  * not have a message loop associated with them; to create one, call</div><div class="line">  * &#123;<span class="doctag">@link</span> #prepare&#125; in the thread that is to run the loop, and then</div><div class="line">  * &#123;<span class="doctag">@link</span> #loop&#125; to have it process messages until the loop is stopped.</div><div class="line">  *</div><div class="line">  * &lt;p&gt;Most interaction with a message loop is through the</div><div class="line">  * &#123;<span class="doctag">@link</span> Handler&#125; class.</div><div class="line">  *</div><div class="line">  * &lt;p&gt;This is a typical example of the implementation of a Looper thread,</div><div class="line">  * using the separation of &#123;<span class="doctag">@link</span> #prepare&#125; and &#123;<span class="doctag">@link</span> #loop&#125; to create an</div><div class="line">  * initial Handler to communicate with the Looper.</div><div class="line">  *</div><div class="line">  * &lt;pre&gt;</div><div class="line">  *  class LooperThread extends Thread &#123;</div><div class="line">  *      public Handler mHandler;</div><div class="line">  *</div><div class="line">  *      public void run() &#123;</div><div class="line">  *          Looper.prepare();</div><div class="line">  *</div><div class="line">  *          mHandler = new Handler() &#123;</div><div class="line">  *              public void handleMessage(Message msg) &#123;</div><div class="line">  *                  // process incoming messages here</div><div class="line">  *              &#125;</div><div class="line">  *          &#125;;</div><div class="line">  *</div><div class="line">  *          Looper.loop();</div><div class="line">  *      &#125;</div><div class="line">  *  &#125;&lt;/pre&gt;</div><div class="line">  */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Looper</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<p>如果我们需要在自己的线程中实现消息机制，我们需要先执行 <code>Looper.prepare();</code>； 然后创建 Handler对象；最后再执行 <code>Looper.loop()</code>；这个顺序不能颠倒！最后我们再来将这个流程梳理一下：</p>
<ol>
<li><p>Looper.prepare()；</p>
<p> 初始化属于当前线程的 Looper 对象，然后放入 ThreadLocal 中。</p>
</li>
<li><p>new Handler()；</p>
<p> 为什么一定要在 <code>Looper.prepare()</code> 之后 <code>Looper.loop()</code> 之前创建Handler对象呢？ </p>
<p> 答：在 <code>Looper.prepare()</code> 之后是因为 Handler 的构造函数中需要提供当前线程的 Looper 对 象，这个 Looper 对象只能通过 <code>Looper.prepare()</code> 来创建。在 <code>Looper.loop()</code> 之前是因为Looper.loop()是个死循环，写在其后代码是执行不到的（看看最后留的那个问题～）。</p>
</li>
<li><p>Looper.loop();</p>
<p> 这个操作就是开始执行消息循环，处理消息。</p>
</li>
</ol>
<p>小结：</p>
<p>消息机制是Android系统中线程通信非常重要的一种方法。如果向另一个线程传递数据，我们可以在目标线程中启动消息机制，拿到这个线程Looper对象创建一个Handler，通过这个Handler就可以向目标线程发送消息了，反之亦然。</p>
<h2 id="0x03-HandlerThread、AsyncTask-和-UI-Thread"><a href="/2017/07/26/Android-从通过view-post-获取View宽高谈Android消息机制/#0x03-HandlerThread、AsyncTask-和-UI-Thread" class="headerlink" title="0x03 HandlerThread、AsyncTask 和 UI Thread"></a>0x03 HandlerThread、AsyncTask 和 UI Thread</h2><ul>
<li><p>HandlerThread</p>
<p>  从源码可以看到，这个类是对我们Android消息机制的一个封装。当我们需要自己去写一个在子线程工作然后将结果传到主线程的功能时可以考虑用这个类。下面提供一个简单的Demo：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThreadActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line"></div><div class="line">            String threadName = Thread.currentThread().getName();</div><div class="line">            tvLog.setText(String.format(<span class="string">"当前线程：%s Msg：%s"</span>, threadName, msg.obj));</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView tvLog;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_handler_thread);</div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        tvLog = (TextView)findViewById(R.id.tvLog);</div><div class="line"></div><div class="line">        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                sendMessage();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        initData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mWorker;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        HandlerThread worker = <span class="keyword">new</span> HandlerThread(<span class="string">"worker"</span>);</div><div class="line">        worker.start();</div><div class="line">        mWorker = <span class="keyword">new</span> Handler(worker.getLooper());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        mWorker.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                print(<span class="string">"我工作在线程："</span> + Thread.currentThread().getName());</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">6</span> * <span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                sendMsgToUI();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMsgToUI</span><span class="params">()</span></span>&#123;</div><div class="line">                Message msg = <span class="keyword">new</span> Message();</div><div class="line">                msg.obj = Thread.currentThread().getName() + <span class="string">"工作完成，这是结果"</span>;</div><div class="line">                    mHandler.sendMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>思路如下：</p>
<ol>
<li>创建HandlerThread对象，这个对象是一个线程</li>
<li>启动第一步创建的线程</li>
<li>创建一个Handler，并使用第一步创建的线程中的Looper</li>
<li>然后在主线程通过这个Handler向工作线程发任务</li>
<li>任务执行完毕后，使用在Activity（主线程）中的Handler发送消息，将结果从工作线程传回主线程</li>
</ol>
<ul>
<li><p>AsyncTask</p>
<p>  这是个非常强大的工具类，用到的知识点也非常多，曾经统治过网络库的编写。这里只讲跟我们消息系统相关的知识，先看一段源码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</div><div class="line">...</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InternalHandler sHandler; </div><div class="line">...</div><div class="line">    <span class="comment">// 获取到Handler</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">synchronized</span> (AsyncTask.class) &#123;</div><div class="line">            <span class="keyword">if</span> (sHandler == <span class="keyword">null</span>) &#123;</div><div class="line">                sHandler = <span class="keyword">new</span> InternalHandler();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> sHandler;</div><div class="line">        &#125;</div><div class="line">...</div><div class="line">    <span class="comment">// 在工作线程发送结果到主线程，这里获取到Message.target都是sHandler对象</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</div><div class="line">        message.sendToTarget();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">...</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * &lt;p&gt;Runs on the UI thread after &#123;<span class="doctag">@link</span> #doInBackground&#125;. The</div><div class="line">     * specified result is the value returned by &#123;<span class="doctag">@link</span> #doInBackground&#125;.&lt;/p&gt;</div><div class="line">     * </div><div class="line">     * &lt;p&gt;This method won't be invoked if the task was cancelled.&lt;/p&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> result The result of the operation computed by &#123;<span class="doctag">@link</span> #doInBackground&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> #onPreExecute</div><div class="line">     * <span class="doctag">@see</span> #doInBackground</div><div class="line">     * <span class="doctag">@see</span> #onCancelled(Object) </div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"UnusedDeclaration"</span>&#125;)</div><div class="line">    <span class="meta">@MainThread</span> <span class="comment">// 这个方法里的代码都是在主线程执行了</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Runs on the UI thread after &#123;<span class="doctag">@link</span> #publishProgress&#125; is invoked.</div><div class="line">     * The specified values are the values passed to &#123;<span class="doctag">@link</span> #publishProgress&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> values The values indicating progress.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> #publishProgress</div><div class="line">     * <span class="doctag">@see</span> #doInBackground</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"UnusedDeclaration"</span>&#125;)</div><div class="line">    <span class="meta">@MainThread</span> <span class="comment">// 这个方法里的代码都是在主线程执行了</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... values)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This method can be invoked from &#123;<span class="doctag">@link</span> #doInBackground&#125; to</div><div class="line">     * publish updates on the UI thread while the background computation is</div><div class="line">     * still running. Each call to this method will trigger the execution of</div><div class="line">     * &#123;<span class="doctag">@link</span> #onProgressUpdate&#125; on the UI thread.</div><div class="line">     *</div><div class="line">     * &#123;<span class="doctag">@link</span> #onProgressUpdate&#125; will not be called if the task has been</div><div class="line">     * canceled.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> values The progress values to update the UI with.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> #onProgressUpdate</div><div class="line">     * <span class="doctag">@see</span> #doInBackground</div><div class="line">     */</div><div class="line">    <span class="meta">@WorkerThread</span> <span class="comment">// 从工作线程发消息到主线程</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isCancelled()) &#123;</div><div class="line">            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</div><div class="line">                    <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isCancelled()) &#123;</div><div class="line">            onCancelled(result);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            onPostExecute(result);</div><div class="line">        &#125;</div><div class="line">        mStatus = Status.FINISHED;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(Looper.getMainLooper()); <span class="comment">// 创建一个Handler对象，使用的Looper是主线程的Looper，那么它处理的消息都将在主线程，这个很关键</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">                    <span class="comment">// There is only one result</span></div><div class="line">                    result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">                    result.mTask.onProgressUpdate(result.mData);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看了上面的源码再回想下AsyncTask用法我们可以得到如下结论：</p>
<ol>
<li>主线程无需动态向工作线程发消息，只是初始化的时候传递一些参数</li>
<li>工作线程完成后，通过获取主线程的Looper，构建Handler将结果发送给主线程</li>
</ol>
<ul>
<li><p>UI Thread</p>
<p>  看了上面的两个案例，我们在来看看为什么我们使用的主线程可以直接使用消息系统而没有执行<code>Looper.prepare()</code>，<code>Looper.loop()</code> 之类的初始化工作呢。</p>
<p>  其实结论很简单，不可能不初始化，只是系统提前已经帮我们初始化好了，这部分的源码位于 <code>sdk/sources/android-xx/android/app/ActivityThread.java</code> 中：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityThread</span> </span>&#123;</div><div class="line">...</div><div class="line">    <span class="keyword">final</span> H mH = <span class="keyword">new</span> H();</div><div class="line">...</div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">H</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAUNCH_ACTIVITY         = <span class="number">100</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAUSE_ACTIVITY          = <span class="number">101</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAUSE_ACTIVITY_FINISHING= <span class="number">102</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP_ACTIVITY_SHOW      = <span class="number">103</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP_ACTIVITY_HIDE      = <span class="number">104</span>;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">      ...</div><div class="line">      <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">          <span class="keyword">case</span> LAUNCH_ACTIVITY: &#123;</div><div class="line">              Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</div><div class="line">              <span class="keyword">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</div><div class="line">              r.packageInfo = getPackageInfoNoCheck(</div><div class="line">                      r.activityInfo.applicationInfo, r.compatInfo);</div><div class="line">              handleLaunchActivity(r, <span class="keyword">null</span>, <span class="string">"LAUNCH_ACTIVITY"</span>);</div><div class="line">              Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">          &#125; <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> RELAUNCH_ACTIVITY: &#123;</div><div class="line">              Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityRestart"</span>);</div><div class="line">              ActivityClientRecord r = (ActivityClientRecord)msg.obj;</div><div class="line">              handleRelaunchActivity(r);</div><div class="line">              Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">          &#125; <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> PAUSE_ACTIVITY: &#123;</div><div class="line">              Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityPause"</span>);</div><div class="line">              SomeArgs args = (SomeArgs) msg.obj;</div><div class="line">              handlePauseActivity((IBinder) args.arg1, <span class="keyword">false</span>,</div><div class="line">                      (args.argi1 &amp; USER_LEAVING) != <span class="number">0</span>, args.argi2,</div><div class="line">                      (args.argi1 &amp; DONT_REPORT) != <span class="number">0</span>, args.argi3);</div><div class="line">              maybeSnapshot();</div><div class="line">              Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">          &#125; <span class="keyword">break</span>;</div><div class="line">          ...</div><div class="line">       &#125;</div><div class="line">       ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"ActivityThreadMain"</span>);</div><div class="line">        SamplingProfilerIntegration.start();</div><div class="line"></div><div class="line">        <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class="line">        <span class="comment">// disable it here, but selectively enable it later (via</span></div><div class="line">        <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class="line">        CloseGuard.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        Environment.initForCurrentUser();</div><div class="line"></div><div class="line">        <span class="comment">// Set the reporter for event logging in libcore</span></div><div class="line">        EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</div><div class="line"></div><div class="line">        <span class="comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class="line">        <span class="keyword">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class="line">        TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class="line"></div><div class="line">        Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</div><div class="line"></div><div class="line">        Looper.prepareMainLooper(); <span class="comment">// 准备MainLooper</span></div><div class="line"></div><div class="line">        ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">        thread.attach(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">            sMainThreadHandler = thread.getHandler();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">            Looper.myLooper().setMessageLogging(<span class="keyword">new</span></div><div class="line">                    LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// End of event ActivityThreadMain.</span></div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">        Looper.loop(); <span class="comment">// 启动这个消息循环</span></div><div class="line"></div><div class="line">        <span class="comment">// 当上面的Looper执行quit()的时候执行到这里，当然，这个时候app就要退出了</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再回到我们文章开始的时候提到的问题：为什么通过 <code>view.post()</code> 可以获取到View的尺寸呢？</p>
<p>答：首先大家需要知道，我们Activity的启动，也是通过系统消息的方式触发的。从上面的代码中可以看到，当 <code>Looper.loop()</code> 执行之后，即可接收系统消息了，比如启动Activity之类的消息。当系统发出了一个启动Activity的消息，然后执行这个消息才会去启动Actvity，启动Activiy会调用它的生命周期方法，比如 <code>onCreate()</code> 等，在 <code>Activity.onCreate()</code> 中用view.post发一个任务到主线程的消息队列，那这个消息肯定要等之前的消息任务执行完，也就是当前创建Activity的消息执行完成之后才能执行。所以，我们就可以获取到View的尺寸了。</p>
<p>那么我们来验证一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPostActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TextView tvInfo;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_view_post);</div><div class="line"></div><div class="line">        printMsg(<span class="string">"onCreate"</span>);</div><div class="line"></div><div class="line">        tvInfo = (TextView) findViewById(R.id.tvInfo);</div><div class="line">        tvInfo.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                printMsg(<span class="string">"Width:"</span> + tvInfo.getWidth());</div><div class="line">                printMsg(<span class="string">"Height:"</span> + tvInfo.getHeight());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStart();</div><div class="line"></div><div class="line">        printMsg(<span class="string">"onStart"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line"></div><div class="line">        printMsg(<span class="string">"onResume"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出的Log：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">07</span>-<span class="number">27</span> <span class="number">13</span>:<span class="number">06</span>:<span class="number">36.373</span> <span class="number">17506</span>-<span class="number">17506</span>/com.ttdevs.message I/System.out: &gt;&gt;&gt;&gt;&gt;onCreate</div><div class="line"><span class="number">07</span>-<span class="number">27</span> <span class="number">13</span>:<span class="number">06</span>:<span class="number">36.378</span> <span class="number">17506</span>-<span class="number">17506</span>/com.ttdevs.message I/System.out: &gt;&gt;&gt;&gt;&gt;onStart</div><div class="line"><span class="number">07</span>-<span class="number">27</span> <span class="number">13</span>:<span class="number">06</span>:<span class="number">36.378</span> <span class="number">17506</span>-<span class="number">17506</span>/com.ttdevs.message I/System.out: &gt;&gt;&gt;&gt;&gt;onResume</div><div class="line"><span class="number">07</span>-<span class="number">27</span> <span class="number">13</span>:<span class="number">06</span>:<span class="number">36.433</span> <span class="number">17506</span>-<span class="number">17506</span>/com.ttdevs.message I/System.out: &gt;&gt;&gt;&gt;&gt;Width:<span class="number">248</span></div><div class="line"><span class="number">07</span>-<span class="number">27</span> <span class="number">13</span>:<span class="number">06</span>:<span class="number">36.433</span> <span class="number">17506</span>-<span class="number">17506</span>/com.ttdevs.message I/System.out: &gt;&gt;&gt;&gt;&gt;Height:<span class="number">76</span></div></pre></td></tr></table></figure>
<p>和推测的一致，Coooool～～</p>
<p>最后，留个好玩的问题，执行 <code>getMainLooper().quit()</code> 会怎样呢？</p>
<p><a href="https://github.com/ttdevs/android/tree/master/apps/message" target="_blank" rel="external">源码参考这里</a></p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-通过view-post-获取View宽高&quot;&gt;&lt;a href=&quot;/2017/07/26/Android-从通过view-post-获取View宽高谈Android消息机制/#0x00-通过view-post-获取View宽高&quot; class=&quot;headerl
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://ttdevs.github.io/2017/06/20/2017-06-20/"/>
    <id>https://ttdevs.github.io/2017/06/20/2017-06-20/</id>
    <published>2017-06-20T13:30:43.000Z</published>
    <updated>2017-06-20T13:37:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="西安游-——-大唐盛世"><a href="/2017/06/20/2017-06-20/#西安游-——-大唐盛世" class="headerlink" title="# 西安游 —— 大唐盛世"></a># 西安游 —— 大唐盛世</h1><p><img src="http://upload-images.jianshu.io/upload_images/1801981-ec7c4ff20dfd2d9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安"></p>
<p>经历了漫长的犹豫纠结之后决定裸辞。一场说走就走的旅程就这么开始了。</p>
<p>离职时无意中跟一个小伙伴聊天，得知她也是离职状态，遂结伴一起去往西安。虽然是一个松散组合，但也不用一直一个人了～（其实单身狗有时候也需要找别人帮拍旅游照）</p>
<p>出发之前并没有做详细的攻略，只有一个目的地西安。想到哪里去哪里，比如著名的秦始皇陵兵马俑，华山，古城墙，大雁塔，西安小吃等等，当然还有些之前不知道的景点。最后看来，除了华山和大雁塔没有去有点小遗憾之外，大部分期待的都去了，而且多数都是超过之前的期待～</p>
<h2 id="第一天-从出发到回民街"><a href="/2017/06/20/2017-06-20/#第一天-从出发到回民街" class="headerlink" title="第一天 从出发到回民街"></a>第一天 从出发到回民街</h2><p>提前两天买的机票，南航<code>CZ6616</code>上午<code>11:25</code> 上海飞西安。离机场很近，所以不用早起赶灰机，准点起飞，预示一个美好的旅程即将开始～</p>
<p>出发之前小伙伴在网上报了一个<a href="http://www.mafengwo.cn/sales/2201895.html" target="_blank" rel="external">一天的旅行团</a>，包含接机的服务，旅游巴士，从机场送到住地。所以整个到达过程还是相当顺利滴。</p>
<p>同行小伙伴要住青旅，说可以玩狼人杀等游戏。由于没有住过青旅，想体验下，所以也订了一个床铺，四人间，45元／晚。到了青旅办了入住，看了房间，瞬间不想住了（里面已住两人，有点乱，带了个可以登机的行李箱房间的柜子竟然放不下，也没其他地方可放），遂退房（后来想了下，可能已经过了住青旅的年龄了吧），去找了家<a href="/2017/06/20/2017-06-20/七天西安钟楼店，西一路49号">快捷酒店</a>，离回民街很近，大床房每晚不到100，之后几天一直住这里（哈哈，淘宝买了几张20的优惠券，还是能省一点是一点）。</p>
<p>安定好之后开始逛回民街、钟楼和鼓楼。下面开始上图～</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-d7cdca0b55cfc589.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="回民街"><br>人超多有没有～～</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-39ac7b3a83e11b1a.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="色彩丰富的美食"><br>色彩超级丰富啊</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-c917909cde1b791d.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="柿子饼"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-fe79d6fdc93ed9f9.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="biangbiang面"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-b8d04e14cb572d26.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="馕"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-115ef2973ed7e09d.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手艺人"><br><img src="http://upload-images.jianshu.io/upload_images/1801981-b9d4cb4a8d81705a.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手艺人"><br><img src="http://upload-images.jianshu.io/upload_images/1801981-468a2b6e70670696.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手艺人"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-0c3d51681a1fc6db.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="钟楼"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-4724bd384967678f.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="鼓楼"></p>
<h2 id="第二天-秦始皇陵兵马俑"><a href="/2017/06/20/2017-06-20/#第二天-秦始皇陵兵马俑" class="headerlink" title="第二天 秦始皇陵兵马俑"></a>第二天 秦始皇陵兵马俑</h2><h3 id="西安一日游"><a href="/2017/06/20/2017-06-20/#西安一日游" class="headerlink" title="西安一日游"></a>西安一日游</h3><p>前面提到报了一个旅游团：<a href="http://www.mafengwo.cn/sales/2201895.html" target="_blank" rel="external">兵马俑+华清宫+骊山索道一日游（赠接机/高铁/双耳麦/赠自助餐）价格390，不坐索道330</a>，马蜂窝上有售。美女导游，大巴接送，无购物，自助餐等等，去之前还担心被带到假兵马俑等各种坑，最后总结下来很满意的一次跟团。具体的行程大家可以看介绍。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-35507f861e6f142b.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-e31046ae3c969d4c.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-3cf285c2026feb2d.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-9e11adcfccd4ad48.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-d7a0bd055a32f819.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-5db4d6a737f9a5a7.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-1b87890b254e2e6b.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-25e411403ffbb5fe.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-a06df8b4385d3154.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="华清宫"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-a9fda7b212bc48fd.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="华清宫"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-2c63547ceca7f151.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="华清宫"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-d472ea14ec698863.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="骊山俯瞰"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-18d999e9295d0d43.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="美女导游"><br>我们的美女导游～</p>
<h3 id="西安古城墙"><a href="/2017/06/20/2017-06-20/#西安古城墙" class="headerlink" title="西安古城墙"></a>西安古城墙</h3><p>旅游团结束之后送回钟楼，路上导游推荐了几家，但是都没记住。不过还是要去找吃的，凉皮肉夹馍自然是首选（回民街卖的肉夹馍都是牛羊肉的，我还是喜欢猪肉的，所以这个肉夹馍不是回民街买的～）。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-122a846d19df3695.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="肉夹馍"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-d9cd4f0c12c4c33f.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="凉皮"></p>
<p>吃饭吃完时间还早，遂决定去古城墙。就这样一个人骑着小黄车屁颠屁颠的赶到城墙，买票进入，门票54。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-a35904c1bcf2a45e.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="古城墙"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-12bfc6a16b7633ea.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="古城墙"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-e6d33f5bfbd1bb88.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="古城墙"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-d74154a343104713.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="古城墙"></p>
<p>由于去的时候天已经快晚上8点了，所以还是有点晚的。加之天气不好阴的很重，中间还有小雨，又不想骑自行车一个人走了四分之一就撤了（从南门走到西门）。可能需要注意的是，晚上不是每个门都开的，想出来也得走到某个大一点的门。</p>
<h2 id="第三天-大唐芙蓉园"><a href="/2017/06/20/2017-06-20/#第三天-大唐芙蓉园" class="headerlink" title="第三天 大唐芙蓉园"></a>第三天 大唐芙蓉园</h2><p>前一天逛的太晚，比较累，所以睡了个懒觉，起床已经下午。时间不够芙蓉园和大雁塔不能同时去了（大雁塔音乐喷泉也没去成），大雁塔不是特别期待，最后选择了芙蓉园。去之前简单了解了下：新建的景点，不是历史古迹，所以也不抱太大希望。买了带演出的198块的门票，其中带了<code>大唐盛世</code>的演出。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-4a7a70f01f30a447.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<h3 id="大唐盛世"><a href="/2017/06/20/2017-06-20/#大唐盛世" class="headerlink" title="大唐盛世"></a>大唐盛世</h3><p>这是一个商业演出，如果不喜欢可以买120的票，就没有这一项了。悄悄的告诉你们，我是第一次看演出，第一排，这个位置有点低，往后两排应该会更好，但是也有一个好处是离演员很近，可以看美女～～</p>
<p>四点半就可以入场了，本以为看的人会很少，但是最后发现几乎座无虚席，超乎我的想象。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-54f46e83857f8c96.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"><br>（不好意思，原谅我偷拍照了）</p>
<p>对我来说白天这个园子可看的不是很多。有一些雕塑，看不懂的我，真是蜜汁尴尬，比如下面这座：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-da441ed3975e44e6.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p>唯一有好一点印象的是紫云楼中会有定时的表演，感兴趣可以看看。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-ce756ea59f975995.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<h3 id="灯光表演"><a href="/2017/06/20/2017-06-20/#灯光表演" class="headerlink" title="灯光表演"></a>灯光表演</h3><p>从两个标题可以看出，对于这里的建筑真是期待不大，好在有晚上的灯光水幕等表演，哈哈～～</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-22c5068ab3f6928e.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-536510e747a4b55a.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-aa4b70b446946d05.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-ae20add28b0258b7.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-c729164e0b1f6862.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-35737d9af2e773ac.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p>一个人在一个偏僻的角落看完整个表演（其实就是为了拍照～～）晚上的灯光还是很漂亮的。听说是全国最大的水幕电影。</p>
<h2 id="第四天-陕西历史博物馆"><a href="/2017/06/20/2017-06-20/#第四天-陕西历史博物馆" class="headerlink" title="第四天 陕西历史博物馆"></a>第四天 陕西历史博物馆</h2><p>吃货们可能已经发现一个问题——基本上没有介绍吃。看我的尴尬脸😅</p>
<p>因为从来第二天就开始拉肚子，恶心想吐，啥也不想吃。朋友说肠胃感冒，吃点药就好。但是今天感觉快要死了（接下来还有一周多的行程，钱已交），遂去了医院。一大早赶到西安交通大学第一附属医院看了个消化内科，医生不分青红皂白的给开了一堆药（还有进口的酵母菌，取药时才发现，我们之前也卖过，坑啊），输液两瓶，药费480+，简直是抢劫啊，有没有。最后都不知道是吃了这些药好的还是我自己去药店买的藿香正气水吃好的。。。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-5a1ace90943c66c3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输液"></p>
<p>输完液，赶到西安历史博物馆，已经下午两点多。在对面喝了点粥，吃了点东西——烤馍——一块钱一个——超级好吃，那个状态我竟然吃了俩～</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-0681f0ba38c8ce14.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="烤馍"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-b55ab1477dfda13b.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="烤馍"></p>
<p>说正题，为什么想来这里呢？难道我很爱历史嘛～ 其实不是，就是想多了解一下历史而已。之前去过南京博物院，一个人逛了半天，还是挺震撼的。所以对于西安这座古城，对他的博物馆还是挺期待的。</p>
<p>简单提醒一下，这里的票免费，可以官网预约，预约好了那天啥时候去都可以，否则的话就到现场排队。人多的时候队伍可能会比较长。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-08fe18bce59d0359.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="陕西历史博物馆"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-aea8bc3f1721d33e.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="陕西历史博物馆"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-331cfb93c26d5e98.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="陕西历史博物馆"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-15b8b10151f199bc.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="陕西历史博物馆"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-7556f2292ba025ce.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="陕西历史博物馆"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-36e2cd79a7dfed95.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="陕西历史博物馆"></p>
<p>由于实在难受，也没逛多久就早早的回去休息了。</p>
<h2 id="第五天-从西安到西宁"><a href="/2017/06/20/2017-06-20/#第五天-从西安到西宁" class="headerlink" title="第五天 从西安到西宁"></a>第五天 从西安到西宁</h2><p>最后一天的行程，西安到西宁。本打算做机场大巴，但是有个行李箱比较重，同行的小伙伴决定一起打车。叫了专车，从西安市区送到咸阳机场。优惠了50，每个人50快，还是挺划算的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-b7d9245cd8aed746.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安到西宁"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-428f915f9fe1af9c.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安到西宁"></p>
<p>感觉一路上灰机经过了陕甘不同的地貌环境，偷偷用手机拍了几站，超级后悔灰机上没有把相机拿出来。给大家分享几张，西安行程结束～</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-93732e0aae772f4c.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安到西宁"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-3940547d7d552c56.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安到西宁"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-895f96537f902aa3.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安到西宁"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-90b4c485dec7470d.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安到西宁"></p>
<p>西安之行就这么结束了。如果有人一起的话，可能会去爬华山，不过留着以后有机会去也好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;西安游-——-大唐盛世&quot;&gt;&lt;a href=&quot;/2017/06/20/2017-06-20/#西安游-——-大唐盛世&quot; class=&quot;headerlink&quot; title=&quot;# 西安游 —— 大唐盛世&quot;&gt;&lt;/a&gt;# 西安游 —— 大唐盛世&lt;/h1&gt;&lt;p&gt;&lt;img sr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://ttdevs.github.io/2017/06/02/2017-06-02/"/>
    <id>https://ttdevs.github.io/2017/06/02/2017-06-02/</id>
    <published>2017-06-02T05:55:45.000Z</published>
    <updated>2017-06-02T05:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<p># </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;# &lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[Android]升级Support Library</title>
    <link href="https://ttdevs.github.io/2017/05/26/Android-%E5%8D%87%E7%BA%A7SupportLibrary/"/>
    <id>https://ttdevs.github.io/2017/05/26/Android-升级SupportLibrary/</id>
    <published>2017-05-26T06:14:07.000Z</published>
    <updated>2017-05-26T06:14:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-Support-Library"><a href="/2017/05/26/Android-升级SupportLibrary/#0x00-Support-Library" class="headerlink" title="0x00 Support Library"></a>0x00 Support Library</h2><h2 id="0x01-注意事项"><a href="/2017/05/26/Android-升级SupportLibrary/#0x01-注意事项" class="headerlink" title="0x01 注意事项"></a>0x01 注意事项</h2><ul>
<li><p><code>compileSdkVersion</code>与<code>buildToolsVersion</code>版本不一致</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    /Users/ttdevs/Android/app/build/intermediates/res/merged/debug/values-v24/values-v24.xml</div><div class="line">Error:(<span class="number">3</span>) Error retrieving parent <span class="keyword">for</span> item: No resource found that matches the given name <span class="string">'android:TextAppearance.Material.Widget.Button.Borderless.Colored'</span>.</div><div class="line">Error:(<span class="number">4</span>) Error retrieving parent <span class="keyword">for</span> item: No resource found that matches the given name <span class="string">'android:TextAppearance.Material.Widget.Button.Colored'</span>.</div><div class="line">Error:(<span class="number">3</span>) Error retrieving parent <span class="keyword">for</span> item: No resource found that matches the given name <span class="string">'android:TextAppearance.Material.Widget.Button.Borderless.Colored'</span>.</div><div class="line">Error:(<span class="number">4</span>) Error retrieving parent <span class="keyword">for</span> item: No resource found that matches the given name <span class="string">'android:TextAppearance.Material.Widget.Button.Colored'</span>.</div><div class="line">Error:Execution failed <span class="keyword">for</span> task <span class="string">':app:processDebugResources'</span>.</div><div class="line">&gt; com.android.ide.common.process.ProcessException: Failed to execute aapt</div><div class="line">Information:BUILD FAILED</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="0xFF-参考"><a href="/2017/05/26/Android-升级SupportLibrary/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ul>
<li><a href="https://developer.android.com/topic/libraries/support-library/index.html" target="_blank" rel="external">https://developer.android.com/topic/libraries/support-library/index.html</a></li>
<li><a href="https://developer.android.com/topic/libraries/support-library/revisions.html" target="_blank" rel="external">https://developer.android.com/topic/libraries/support-library/revisions.html</a></li>
<li><a href="https://stackoverflow.com/questions/41365401/how-to-fix-eror-app-build-intermediates-res-merged-debug-values-v24-values-v24-x" target="_blank" rel="external">https://stackoverflow.com/questions/41365401/how-to-fix-eror-app-build-intermediates-res-merged-debug-values-v24-values-v24-x</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-Support-Library&quot;&gt;&lt;a href=&quot;/2017/05/26/Android-升级SupportLibrary/#0x00-Support-Library&quot; class=&quot;headerlink&quot; title=&quot;0x00 Support Li
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android-Bluetooth」0x02操作</title>
    <link href="https://ttdevs.github.io/2017/05/19/%5BAndroid-Bluetooth%5D0x02%E6%93%8D%E4%BD%9C/"/>
    <id>https://ttdevs.github.io/2017/05/19/[Android-Bluetooth]0x02操作/</id>
    <published>2017-05-18T16:00:00.000Z</published>
    <updated>2017-05-19T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-低功耗蓝牙（BLE）"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0x00-低功耗蓝牙（BLE）" class="headerlink" title="0x00 低功耗蓝牙（BLE）"></a>0x00 低功耗蓝牙（BLE）</h2><p>上一篇简单介绍了传统蓝牙设备的使用，当你沿着上一篇的思路去连接某些蓝牙设备的时候，你会发现总是不成功。没错，我们还有另外一种蓝牙没有讲：低功耗蓝牙(BLE: Bluetooth Low Energy)。</p>
<p>这并不是一种新的东西，它只是蓝牙协议中的一个新的版本。之前提到的多是蓝牙2.0/2.1，这里的低功耗蓝牙（BLE）主要是指蓝牙4.0/4.1/4.2。在我们的日常生活中这种蓝牙越来越常见，比如各种手环、体脂秤、智能设备、便携蓝牙设备等等。</p>
<p>更多关于蓝牙的介绍可以参考<a href="https://zh.wikipedia.org/wiki/蓝牙" target="_blank" rel="external">这里</a></p>
<h2 id="0x01-蓝牙协议栈"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0x01-蓝牙协议栈" class="headerlink" title="0x01 蓝牙协议栈"></a>0x01 蓝牙协议栈</h2><p>和学习 TCP/IP 一样，如果了解BLE的议栈对我们掌握蓝牙会有很大的帮助。</p>
<p><img src="https://www.bluetooth.com/~/media/images/page-content/bluetooth%20stack.ashx?h=501&amp;w=388&amp;la=zh-cn&amp;hash=9756388D40595EB444E4B110F3587A323604714A" alt="蓝牙协议栈"></p>
<ul>
<li><p>物理 (PHY) 层</p>
<p>  通过蓝牙通信信道控制 2.4Ghz 射频的传输/接收。BR/EDR 提供的信道较多但带宽较窄，而 LE 使用的信道较少但带宽较宽。</p>
</li>
<li><p>链路层</p>
<p>  定义数据包结构/信道、发现/连接程序以及发送/接收数据。</p>
</li>
<li><p>直接测试模式</p>
<p>  允许测试人员向 PHY 层发出指令以传输或接收给定数据包序列，通过 HCI 或 2 线 UART 接口提交命令。</p>
</li>
<li><p>主机控制器接口 (HCI)</p>
<p>  蓝牙控制器子系统（底部三层）和蓝牙主机之间的可选标准接口。</p>
</li>
<li><p>逻辑链路控制和适配协议 (L2CAP) 层</p>
<p>  基于数据包的协议，可将数据包传输至 HCI 或直接传输到无主机系统中的链路管理器。支持更高级别的协议多路复用、数据包分割和重组，以及将服务质量信息传输到更高层。</p>
</li>
<li><p>属性协议 (ATT)</p>
<p>  在建立连接之后定义数据交换客户端/服务器协议。使用通用属性配置文件 (GATT) 将属性分类为有意义的服务。ATT 主要用于 LE 部署，偶尔也会用于 BR/EDR 部署。</p>
</li>
<li><p>安全管理器</p>
<p>  定义管理蓝牙设备之间配对完整性、身份验证以及加密的协议和操作，提供安全功能工具箱，其他组件可利用该工具箱支持不同应用所需的各种安全级别。</p>
</li>
<li><p>通用属性配置文件 (GATT)</p>
<p>  使用属性协议，GATT 对封装设备组件性能的服务进行分组，并描述基于 GATT 功能的用例、角色和一般性能。其服务框架定义服务规程和格式及其特性，其中包括发现、读取、写入、通知以及指示特性以及配置特性广播。GATT 仅用于蓝牙 LE 部署。 详细了解 <a href="https://www.bluetooth.com/zh-cn/specifications/generic-attributes-overview" target="_blank" rel="external">GATT</a> 信息。 </p>
</li>
<li><p>通用访问配置文件(GAP)</p>
</li>
</ul>
<p>可与蓝牙 LE 部署中的 GATT 配合使用，以定义与发现蓝牙设备和共享信息相关的规程和角色，以及连接蓝牙设备的链路管理内容。 </p>
<p><a href="https://www.bluetooth.com/zh-cn/specifications/bluetooth-core-specification" target="_blank" rel="external">以上信息来自这里</a></p>
<h2 id="0x02-Android系统中的BLE"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0x02-Android系统中的BLE" class="headerlink" title="0x02 Android系统中的BLE"></a>0x02 Android系统中的BLE</h2><p>Android系统中对于低功耗蓝牙我们需要关心以下几点：</p>
<ul>
<li>Android 4.3（18）开始支持BLE</li>
<li>Android 5.0（21）之前手机只可以作为中心设备（Central mode）使用，5.0之后可以作为外设（Peripheral mode）使用</li>
</ul>
<p>除了以上信息，我们在对协议中的几个概念做个介绍，这涉及到之后的开发：</p>
<ul>
<li><p>Attribute Protocol (ATT)</p>
<p>  属性协议，对应 <code>BluetoothGattService</code></p>
</li>
<li><p>Generic Attribute Profile (GATT)</p>
<p>  通用属性配置文件，对应Android中的 <code>BluetoothGatt</code></p>
</li>
<li><p>Characteristic</p>
<p>  <code>BluetoothGattCharacteristic</code></p>
</li>
<li><p>Descriptor</p>
<p>  <code>BluetoothGattDescriptor</code></p>
</li>
<li><p>Service</p>
<p>  <code>BluetoothGattService</code></p>
</li>
</ul>
<p><img src="https://www.bluetooth.com/~/media/images/page-content/gatt%20profile%20hierarchy.ashx?la=zh-cn&amp;hash=9323C669A731EA445651072296730FB343BA6BB5" alt=""></p>
<h2 id="0x03-Android系统中的BLE操作流程"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0x03-Android系统中的BLE操作流程" class="headerlink" title="0x03 Android系统中的BLE操作流程"></a>0x03 Android系统中的BLE操作流程</h2><p>和之前的普通蓝牙相同，我们需要先检测设备的蓝牙是否可用，然后扫描周围的蓝牙设备，然后连接。这里可以看到，BLE的操作并不需要配对。如需要在设备必须支持低功耗蓝牙，则还需要加上这句：</p>
<p><code>&lt;uses-feature android:name=&quot;android.hardware.bluetooth_le&quot; android:required=&quot;true&quot;/&gt;</code></p>
<ul>
<li><p>蓝牙扫描</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mScanning;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scanLeDevice</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> enable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (enable) &#123;</div><div class="line">        mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mScanning = <span class="keyword">false</span>;</div><div class="line">                mBluetoothAdapter.stopLeScan(mLeScanCallback);</div><div class="line">            &#125;</div><div class="line">        &#125;, SCAN_PERIOD);</div><div class="line"></div><div class="line">        mScanning = <span class="keyword">true</span>;</div><div class="line">        mBluetoothAdapter.startLeScan(mLeScanCallback);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mScanning = <span class="keyword">false</span>;</div><div class="line">        mBluetoothAdapter.stopLeScan(mLeScanCallback);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Device scan callback.</span></div><div class="line"><span class="keyword">private</span> BluetoothAdapter.LeScanCallback mLeScanCallback = <span class="keyword">new</span> BluetoothAdapter.LeScanCallback() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLeScan</span><span class="params">(<span class="keyword">final</span> BluetoothDevice device, <span class="keyword">int</span> rssi, <span class="keyword">byte</span>[] scanRecord)</span> </span>&#123;</div><div class="line">        String format = <span class="string">"Name:%s, Mac:%s, Type:%s"</span>;</div><div class="line">        String msg = String.format(format, device.getName(), device.getAddress(), device.getType());</div><div class="line">        print(msg);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>扫描完成之后，我们会拿到蓝牙的设备信息，然后就可以进行连接了。 
</code></pre><ul>
<li><p>连接蓝牙</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != intent) &#123;</div><div class="line">        mMAC = intent.getStringExtra(KEY_MAC);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(mMAC)) &#123;</div><div class="line">        mMAC = MAC_BIKE;</div><div class="line">    &#125;</div><div class="line">    mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);</div><div class="line">    mBluetoothAdapter = mBluetoothManager.getAdapter();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == mBluetoothAdapter) &#123;</div><div class="line">        stopSelf();</div><div class="line">        <span class="keyword">return</span> START_NOT_STICKY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(mMAC);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == device) &#123;</div><div class="line">        stopSelf();</div><div class="line">        <span class="keyword">return</span> START_NOT_STICKY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    closeConnect();</div><div class="line"></div><div class="line">    mBluetoothGatt = device.connectGatt(<span class="keyword">this</span>, <span class="keyword">false</span>, mCallBack);</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123; <span class="comment">//5.0设置的传输最大空间</span></div><div class="line">        mBluetoothGatt.requestConnectionPriority(BluetoothGatt.CONNECTION_PRIORITY_HIGH);</div><div class="line">        mBluetoothGatt.requestMtu(<span class="number">84</span>);</div><div class="line">    &#125;</div><div class="line">    print(<span class="string">"Gatt connect"</span>);</div><div class="line">    <span class="keyword">return</span> START_STICKY;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>连接蓝牙</p>
<p>  在连接的CallBack中如果我们检测到连接成功，才可以请求蓝牙提供的服务，这里先检测连接的状态：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BluetoothGattCallback mCallBack = <span class="keyword">new</span> BluetoothGattCallback() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnectionStateChange</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> status, <span class="keyword">int</span> newState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onConnectionStateChange(gatt, status, newState);</div><div class="line"></div><div class="line">        print(String.format(<span class="string">"status:%d, newState:%d"</span>, status, newState));</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (status != BluetoothGatt.GATT_SUCCESS) &#123;</div><div class="line">            closeConnect();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (newState) &#123;</div><div class="line">            <span class="keyword">case</span> BluetoothProfile.STATE_CONNECTED:</div><div class="line">                print(<span class="string">"连接GATT服务成功，开始发现服务..."</span>);</div><div class="line">                gatt.discoverServices();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BluetoothProfile.STATE_DISCONNECTED:</div><div class="line">                print(<span class="string">"断开GATT服务，Bye"</span>);</div><div class="line">                closeConnect();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>发现服务</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> BluetoothGattCallback mCallBack = <span class="keyword">new</span> BluetoothGattCallback() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServicesDiscovered</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> status)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onServicesDiscovered(gatt, status);</div><div class="line"></div><div class="line">        print(<span class="string">"发现服务："</span> + status);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (BluetoothGatt.GATT_SUCCESS == status) &#123;</div><div class="line">            List&lt;BluetoothGattService&gt; gattServices = gatt.getServices();</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == gattServices || gattServices.size() == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (BluetoothGattService gattService : gattServices) &#123;</div><div class="line">                String serviceUUID = gattService.getUuid().toString();</div><div class="line">                print(<span class="string">"UUID GATT:"</span> + serviceUUID);</div><div class="line">                List&lt;BluetoothGattCharacteristic&gt; characteristics = gattService.getCharacteristics();</div><div class="line">                <span class="keyword">for</span> (BluetoothGattCharacteristic characteristic : characteristics) &#123;</div><div class="line">                    String uuid = characteristic.getUuid().toString();</div><div class="line">                    print(<span class="string">"UUID     Cha:"</span> + uuid);</div><div class="line">                    print(<span class="string">"UUID     Status:"</span> + getProperties(characteristic));</div><div class="line">                    <span class="keyword">if</span> (UUID_RECEIVE.toString().equalsIgnoreCase(uuid)) &#123;</div><div class="line">                        mBluetoothGatt.setCharacteristicNotification(characteristic, <span class="keyword">true</span>);</div><div class="line">                        print(<span class="string">"开始监听："</span> + uuid);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>使用服务</p>
<p>  …</p>
</li>
</ul>
<h2 id="0x04-还需要了解的一些细节"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0x04-还需要了解的一些细节" class="headerlink" title="0x04 还需要了解的一些细节"></a>0x04 还需要了解的一些细节</h2><ul>
<li>UUID</li>
</ul>
<ul>
<li>判断服务的属性</li>
</ul>
<h2 id="0x05-可能会遇到的坑"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0x05-可能会遇到的坑" class="headerlink" title="0x05 可能会遇到的坑"></a>0x05 可能会遇到的坑</h2><p>手上的两台魅族设备，连接一个客户提供的蓝牙模块，死活连不上，其他手机连接正常。这两部设备连接淘宝上买的一个蓝牙模块正常。</p>
<h2 id="0xFF-参考"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ul>
<li><a href="https://developer.android.com/guide/topics/connectivity/bluetooth-le.html" target="_blank" rel="external">https://developer.android.com/guide/topics/connectivity/bluetooth-le.html</a></li>
<li><a href="https://www.bluetooth.com/zh-cn/specifications/bluetooth-core-specification" target="_blank" rel="external">https://www.bluetooth.com/zh-cn/specifications/bluetooth-core-specification</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%97%8D%E7%89%99#.E8.97.8D.E7.89.994.0" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E8%97%8D%E7%89%99#.E8.97.8D.E7.89.994.0</a></li>
<li><a href="https://race604.com/android-ble-in-action/" target="_blank" rel="external">https://race604.com/android-ble-in-action/</a></li>
<li><a href="http://blog.csdn.net/qinxiandiqi/article/details/40741269" target="_blank" rel="external">http://blog.csdn.net/qinxiandiqi/article/details/40741269</a></li>
<li><a href="http://www.jianshu.com/p/8690dbafe849" target="_blank" rel="external">http://www.jianshu.com/p/8690dbafe849</a></li>
<li><a href="https://www.bluetooth.com/zh-cn/specifications/adopted-specifications" target="_blank" rel="external">https://www.bluetooth.com/zh-cn/specifications/adopted-specifications</a></li>
<li><a href="https://www.bluetooth.org/DocMan/handlers/DownloadDoc.ashx?doc_id=286439" target="_blank" rel="external">https://www.bluetooth.org/DocMan/handlers/DownloadDoc.ashx?doc_id=286439</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-低功耗蓝牙（BLE）&quot;&gt;&lt;a href=&quot;/2017/05/19/[Android-Bluetooth]0x02操作/#0x00-低功耗蓝牙（BLE）&quot; class=&quot;headerlink&quot; title=&quot;0x00 低功耗蓝牙（BLE）&quot;&gt;&lt;/a&gt;0x0
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
      <category term="Bluetooth" scheme="https://ttdevs.github.io/tags/Bluetooth/"/>
    
  </entry>
  
  <entry>
    <title>「Android-Bluetooth」0x01操作</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid-Bluetooth%5D0x01%E6%93%8D%E4%BD%9C/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android-Bluetooth]0x01操作/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-蓝牙（Bluetooth）"><a href="/1970/01/01/[Android-Bluetooth]0x01操作/#0x00-蓝牙（Bluetooth）" class="headerlink" title="0x00 蓝牙（Bluetooth）"></a>0x00 蓝牙（Bluetooth）</h2><p>这个小硬件已经是Android机器的标配了，由于平时不怎么用，因此到现在都没有去研究过。现在有一个简单的小需求：通过蓝牙连接一个串口设备读取其上面的数据，即从已配对的设备列表中选择我们的串口蓝牙设备（从），连接，然后读取数据。遂写此文。</p>
<h2 id="0x01-简单使用"><a href="/1970/01/01/[Android-Bluetooth]0x01操作/#0x01-简单使用" class="headerlink" title="0x01 简单使用"></a>0x01 简单使用</h2><p>蓝牙设备的详细使用，可以参考<a href="https://developer.android.google.cn/guide/topics/connectivity/bluetooth.html" target="_blank" rel="external">Android关于蓝牙的官方文档</a>。如果你和我一样，之前没有研究过蓝牙，估计看看完后也会有一堆问题存在：什么主设备、从设备、UUID是干嘛的，如何免密钥配对等等。不着急，我们慢慢来。</p>
<p>上面已经说到，我们的设备已经提前配对完成（怎么配对：网络设置中中找到蓝牙，然后搜索，找到你的设备，然后配对。这个时候可能会提示输入密码，默认密码比0000，1234等）。我们只需要连接即可。下面简述操作步骤：</p>
<ol>
<li><p>添加蓝牙权限</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH_ADMIN"</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>判断是否支持蓝牙</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initBluetooth</span><span class="params">()</span> </span>&#123;</div><div class="line">    mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == mBluetoothAdapter) &#123;</div><div class="line">        tvContent.setText(<span class="string">"BluetoothAdapter is null"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!mBluetoothAdapter.isEnabled()) &#123;</div><div class="line">        tvContent.setText(<span class="string">"BluetoothAdapter is disable, please open it"</span>);</div><div class="line"></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</div><div class="line">        startActivityForResult(intent, REQUEST_ENABLE_BT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tvContent.setText(<span class="string">"Bluetooth init success"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>首先是判断是否有蓝牙适配器，如果没有，`BluetoothAdapter.getDefaultAdapter()` 返回 `null`。然后判断蓝牙设备是否启用 `mBluetoothAdapter.isEnabled()` ，如果未启用，则发送一个 `Intent` 来让用户启用蓝牙，这个 `Intent` 是系统的，我们在 `onActivityResult` 中处理用户操作结果，如果用户顺利开启蓝牙，则会返回 `RESULT_OK`。
</code></pre><ol>
<li><p>获取设备列表</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Set&lt;BluetoothDevice&gt; pairedDevices = mBluetoothAdapter.getBondedDevices();</div><div class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != pairedDevices &amp;&amp; pairedDevices.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="keyword">for</span> (BluetoothDevice device : pairedDevices) &#123;</div><div class="line">      ......</div><div class="line">      String msg = String.format(<span class="string">"%s %s\n"</span>, device.getName(), device.getAddress());</div><div class="line">      ......</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>这个时候我们可以拿到 `BluetoothDevice` ，这个对象中保存了已配对蓝牙设备的信息，比如名称，MAC地址，状态，UUID等信息（但这些信息不一定都都），我们需要保存下来，在接下来连接的时候会使用。
</code></pre><ol>
<li><p>连接设备</p>
<p> 有了 <code>BluetoothDevice</code> 信息，我们就可以连接这个已经配对的蓝牙设备了。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> UUID DEFAULT_UUID = UUID.fromString(<span class="string">"00001101-0000-1000-8000-00805f9b34fb"</span>);</div><div class="line"></div><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == mSocket)&#123;</div><div class="line">        mSocket = mDevice.createRfcommSocketToServiceRecord(DEFAULT_UUID);</div><div class="line">    &#125;</div><div class="line">    mSocket.connect(); <span class="comment">// 阻塞的</span></div><div class="line"></div><div class="line">    mIn = mSocket.getInputStream();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>连接成功后，我们会得到一个 `BluetoothSocket` 对象，然后调用其阻塞的 `connect()` 方法，等待两台设备连接成功（所以这个时候必须在另外一个线程中进行）。当两台设备连接成功之后会继续向下执行。
</code></pre><ol>
<li><p>读取数据</p>
<p> 连接成功之后，我们可以通过 <code>mSocket.getInputStream()</code> 获得一个输入流，结下来的操作就是流的操作了，这个和普通 <code>socket</code> 中输入输出流的操作一样了。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">    mBytes = mIn.read(readBuffer);</div><div class="line">    System.arraycopy(readBuffer, <span class="number">0</span>, tempBuffer, mCount, mBytes);</div><div class="line">    mCount += mBytes;</div><div class="line">    <span class="keyword">if</span> (mCount &gt;= SIZE) &#123;</div><div class="line">        parseData(tempBuffer);</div><div class="line">        mCount = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="0x02-总结"><a href="/1970/01/01/[Android-Bluetooth]0x01操作/#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>Android蓝牙（主从）的操作：</p>
<ul>
<li>检查是否支持，是否启用（包括是否可见等）</li>
<li>扫描设备</li>
<li>配对</li>
<li>连接</li>
<li>数据交换</li>
<li>等等</li>
</ul>
<p>这里只讲了检查部分操作，涉及的扫描与配对可能是更复杂一些的，在接下来讲述。</p>
<p>最后，项目代码可参考这里<a href="https://github.com/ttdevs/android/tree/master/apps/air" target="_blank" rel="external">github/ttdevs/air</a>。</p>
<h2 id="0x03-Java线程的封装"><a href="/1970/01/01/[Android-Bluetooth]0x01操作/#0x03-Java线程的封装" class="headerlink" title="0x03 Java线程的封装"></a>0x03 Java线程的封装</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by ttdevs</div><div class="line"> * 2017-01-22 (android)</div><div class="line"> * https://github.com/ttdevs</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseWorkerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRunning = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.run();</div><div class="line">        isRunning = workerBefore();</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (isRunning) &#123;</div><div class="line">            workerCycle();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        workerAfter();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提前执行 true: 继续 false: 结束</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">workerBefore</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 工作方法，被循环调用</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> true: 继续 false: 结束</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">workerCycle</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 结束执行</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">workerAfter</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开始线程</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        isRunning = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            start();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            isRunning = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 结束线程</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        isRunning = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x04-参考"><a href="/1970/01/01/[Android-Bluetooth]0x01操作/#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><ul>
<li><a href="https://developer.android.google.cn/guide/topics/connectivity/bluetooth.html" target="_blank" rel="external">https://developer.android.google.cn/guide/topics/connectivity/bluetooth.html</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-蓝牙（Bluetooth）&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android-Bluetooth]0x01操作/#0x00-蓝牙（Bluetooth）&quot; class=&quot;headerlink&quot; title=&quot;0x00 蓝牙（Bluetooth）
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
      <category term="Bluetooth" scheme="https://ttdevs.github.io/tags/Bluetooth/"/>
    
  </entry>
  
  <entry>
    <title>「Android-SQLite」0x02从加载本地数据库开始</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid-SQLite%5D0x02%E4%BB%8E%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%A7%8B/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-引言"><a href="/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x00-引言" class="headerlink" title="0x00 引言"></a>0x00 引言</h2><blockquote>
<p>好久以前就写了，但是一直拖拖拉拉的，在草稿箱里放了两个星期还没写完，想想这样托下去又要废掉了，还是分开来吧，写多少是多少。</p>
</blockquote>
<p>Android的SQLite数据库简单使用一段时间了，现在想抽些时间总结下，不然总感觉很乱。</p>
<h2 id="0x01-SQLiteExpert"><a href="/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x01-SQLiteExpert" class="headerlink" title="0x01 SQLiteExpert"></a>0x01 SQLiteExpert</h2><p>先说一个工具，<code>SQLite Expert</code>，一款SQLite数据库管理工具，下载地址： <a href="http://www.sqliteexpert.com/" target="_blank" rel="external">http://www.sqliteexpert.com/</a>，Personal Edition是免费的，日常使用基本足够，需要专业版的可以自行网上找寻。当然，其他免费的工具还有很多，如：<code>SQLite Database Browser</code>、 <code>SQLiteManager</code> 等。<br><img src="http://img.blog.csdn.net/20130916222611000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="0x02-加载本地数据库"><a href="/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x02-加载本地数据库" class="headerlink" title="0x02 加载本地数据库"></a>0x02 加载本地数据库</h2><p>假设我们SDCard的根目录上已经存在一个数据库，名称为：ChinaCity.db。这时候我们可以这样操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readDataBaseFromSDCard</span><span class="params">()</span> </span>&#123;</div><div class="line">    String dbPath = Environment.getExternalStorageDirectory() + <span class="string">"/ChinaCity.db"</span>;</div><div class="line"></div><div class="line">    File dbFile = <span class="keyword">new</span> File(dbPath);</div><div class="line">    <span class="keyword">if</span> (!dbFile.exists()) &#123;</div><div class="line">        Toast.makeText(getApplicationContext(), <span class="string">"请先点击拷贝到SDCard"</span>, Toast.LENGTH_LONG).show();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    openOrCreateDatabase(dbPath, SQLiteDatabase.CREATE_IF_NECESSARY, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    SQLiteDatabase db = SQLiteDatabase.openDatabase(dbPath, <span class="keyword">null</span>, SQLiteDatabase.OPEN_READWRITE);</div><div class="line">    <span class="comment">// db = openOrCreateDatabase(dbPath, SQLiteDatabase.OPEN_READWRITE, null);</span></div><div class="line"></div><div class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">    Cursor cursor = db.rawQuery(<span class="string">"select * from china_provinces_code"</span>, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">        <span class="keyword">int</span> id = cursor.getInt(cursor.getColumnIndex(<span class="string">"_id"</span>));</div><div class="line">        String name = cursor.getString(cursor.getColumnIndex(<span class="string">"name"</span>));</div><div class="line">        sb.append(id + <span class="string">":"</span> + name + <span class="string">" \n"</span>);</div><div class="line">    &#125;</div><div class="line">    System.out.println(sb.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先用SQLiteDatabase的一个静态方法openDatabase打开一个数据库，第一个参数为数据库文件路径，第二个参数一般为null，第三个参数为打开数据库的方式，由于只需要读取数据，所以我们选择 <code>SQLiteDatabase.OPEN_READONLY</code>，此种方式的好处是数据库存在的话就不会出错；另外一种为 <code>SQLiteDatabase.OPEN_READWRITE</code>，以读写的方式打开。执行上面代码，我们会看与上图信息相同的：</p>
<p><img src="http://img.blog.csdn.net/20130916225300890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<p>开发的时候，我们可能会需要一些初始化数据，比如城市代码信息，这样我们就可以事先创建好一个数据库，写入初始数据，将其放入自己的apk中一起分发。这个时候我们就可以直接从资源文件中读取这个数据库文件写入到应用的数据库目录或者SDCard中，然后就可以对其操作，拷贝可以这样操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 拷贝资源中数据库</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> where 1SDCARD,2LOCAL</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyDataBase</span><span class="params">(<span class="keyword">int</span> where)</span> </span>&#123;</div><div class="line">    <span class="comment">// 每个应用都有一个数据库目录，他位于 /data/data/packagename/databases/目录下</span></div><div class="line">    String packageName = <span class="string">"com.ttdevs.citydata"</span>; <span class="comment">// xml中配置的</span></div><div class="line">    String dbName = <span class="string">"ChinaCity.db"</span>;</div><div class="line">    String dbPath = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (where == <span class="number">1</span>) &#123; <span class="comment">// sdcard</span></div><div class="line">        dbPath = Environment.getExternalStorageDirectory() + File.separator + dbName;</div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// local, TODO Environment.getDataDirectory()</span></div><div class="line">        dbPath = <span class="string">"/data/data/"</span> + packageName + <span class="string">"/databases/"</span> + dbName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (where == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">new</span> File(<span class="string">"/data/data/"</span> + packageName + <span class="string">"/databases/"</span>).mkdirs();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (where == <span class="number">1</span> &amp;&amp; !Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) &#123;</div><div class="line">        <span class="keyword">return</span>; <span class="comment">// 未挂载外部存储，拷贝到内部不用判断</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    File dbFile = <span class="keyword">new</span> File(dbPath);</div><div class="line">    <span class="keyword">if</span> (dbFile.exists()) &#123;</div><div class="line">        dbFile.delete();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        dbFile.createNewFile();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e1) &#123;</div><div class="line">        e1.printStackTrace();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        InputStream is = getResources().getAssets().open(dbName);</div><div class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(dbPath);</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> ((length = is.read(buffer)) &gt; <span class="number">0</span>) &#123;</div><div class="line">            os.write(buffer, <span class="number">0</span>, length);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        os.flush();</div><div class="line">        os.close();</div><div class="line">        is.close();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    Toast.makeText(getApplicationContext(), <span class="string">"拷贝成功"</span>, Toast.LENGTH_LONG).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码不是很严谨，凑活着看哈。经过以上步骤，我们就可以开始使用数据库，数据库的常用操作，在接下来的介绍中继续。</p>
<h2 id="0x03-下载"><a href="/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x03-下载" class="headerlink" title="0x03 下载"></a>0x03 下载</h2><p>ChinaCity.db数据库： <a href="http://download.csdn.net/detail/ttdevs/6332431" target="_blank" rel="external">下载</a></p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-引言&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x00-引言&quot; class=&quot;headerlink&quot; title=&quot;0x00 引言&quot;&gt;&lt;/a&gt;0x00 引言&lt;/h2&gt;&lt;blockquot
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
      <category term="SQLite" scheme="https://ttdevs.github.io/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>「Android-SQLite」0x01创建自己的数据库</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid-SQLite%5D0x01%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android-SQLite]0x01创建自己的数据库/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-创建自己的数据库"><a href="/1970/01/01/[Android-SQLite]0x01创建自己的数据库/#0x01-创建自己的数据库" class="headerlink" title="0x01 创建自己的数据库"></a>0x01 创建自己的数据库</h2><p>大多数情况，我们还是需要自己去维护一个数据库，常见的包括数据库的创建，升级，销毁等操作。 android提供了SQLiteOpenHelper抽象类，我们创建SQLiteOpenHelper的实现类，重写他的onCreate(), onUpgrade() 或者 onOpen()方法，对数据库进行管理。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_NAME = <span class="string">"ChinaCity.db"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DATABASE_VERSION = <span class="number">1</span>; <span class="comment">// Version must be &gt;= 1</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataBaseOpenHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, DATABASE_NAME, <span class="keyword">null</span>, DATABASE_VERSION);</div><div class="line">        System.out.println(<span class="string">"DataBaseOpenHelper"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataBaseOpenHelper</span><span class="params">(Context context, <span class="keyword">int</span> version)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, DATABASE_NAME, <span class="keyword">null</span>, version);</div><div class="line">        System.out.println(<span class="string">"DataBaseOpenHelper version"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!db.isReadOnly()) &#123;</div><div class="line">            db.execSQL(<span class="string">"PRAGMA foreign_keys = ON;"</span>); <span class="comment">// Enable foreign key constraints </span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// create table test(id integer references students(id),score integer check (score&lt;=100 and score&lt;=0),primary key(id,score))</span></div><div class="line">        <span class="keyword">super</span>.onOpen(db);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        CityData.createTable(db);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">        CityData.dropTable(db);</div><div class="line">        CityData.createTable(db);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CityData</span> <span class="keyword">implements</span> <span class="title">BaseColumns</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_TEXT = <span class="string">" text "</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_INTEGER = <span class="string">" integer "</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMMA_SEP = <span class="string">","</span>;</div><div class="line"></div><div class="line">        <span class="comment">// *******************************china_city_code***********************************</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_NAME_CITY = <span class="string">"china_city_code"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_PROVINCE = <span class="string">"province"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_CITY = <span class="string">"city"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_COUNTY = <span class="string">"county"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_CODE = <span class="string">"code"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_CREATE_CITY = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + TABLE_NAME_CITY + <span class="string">" ("</span> +</div><div class="line">                _ID + TYPE_INTEGER + <span class="string">" PRIMARY KEY AUTOINCREMENT, "</span> +</div><div class="line">                COLUMN_NAME_PROVINCE + TYPE_TEXT + COMMA_SEP +</div><div class="line">                COLUMN_NAME_CITY + TYPE_TEXT + COMMA_SEP +</div><div class="line">                COLUMN_NAME_COUNTY + TYPE_TEXT + COMMA_SEP +</div><div class="line">                COLUMN_NAME_CODE + TYPE_INTEGER</div><div class="line">                + <span class="string">" )"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_CREATE_CITY_INDEX = <span class="string">"CREATE UNIQUE INDEX IF NOT EXISTS "</span> + COLUMN_NAME_CODE + <span class="string">" ON "</span> + TABLE_NAME_CITY + <span class="string">"("</span> + COLUMN_NAME_CODE + <span class="string">")"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_DELETE_CITY = <span class="string">"DROP TABLE IF EXISTS "</span> + TABLE_NAME_CITY;</div><div class="line"></div><div class="line">        <span class="comment">// *******************************china_provinces_code*******************************</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_NAME_PROVINCE = <span class="string">"china_provinces_code"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_ID = <span class="string">"id"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_NAME = <span class="string">"name"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_CREATE_PROVINCE = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + TABLE_NAME_PROVINCE + <span class="string">" ("</span> +</div><div class="line">                _ID + TYPE_INTEGER + <span class="string">" PRIMARY KEY AUTOINCREMENT, "</span> +</div><div class="line">                COLUMN_NAME_ID + TYPE_INTEGER + COMMA_SEP +</div><div class="line">                COLUMN_NAME_NAME + TYPE_TEXT</div><div class="line">                + <span class="string">" )"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_DELETE_PROVINCE = <span class="string">"DROP TABLE IF EXISTS "</span> + TABLE_NAME_PROVINCE;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">            db.execSQL(SQL_CREATE_PROVINCE);</div><div class="line">            db.execSQL(SQL_CREATE_CITY);</div><div class="line">            db.execSQL(SQL_CREATE_CITY_INDEX);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dropTable</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">            db.execSQL(SQL_DELETE_PROVINCE);</div><div class="line">            db.execSQL(SQL_DELETE_CITY);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造函数中我们需要传入四个参数，第一个参数为上下文，第二个为数据库名称，第三个参数一般为null，第四个为数据库的版本。onCreate()方法中主要执行数据库的创建操作。onUpgrade()方法主要在数据库升级时调用，源码 <code>android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean writable)</code> 中这样描述：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> SQLiteDatabase <span class="title">getDatabaseLocked</span><span class="params">(<span class="keyword">boolean</span> writable)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (mDatabase != <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">if</span> (!mDatabase.isOpen()) &#123;</div><div class="line">           <span class="comment">// Darn!  The user closed the database by calling mDatabase.close().</span></div><div class="line">           mDatabase = <span class="keyword">null</span>;</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!writable || !mDatabase.isReadOnly()) &#123;</div><div class="line">           <span class="comment">// The database is already open for business.</span></div><div class="line">           <span class="keyword">return</span> mDatabase;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (mIsInitializing) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"getDatabase called recursively"</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   SQLiteDatabase db = mDatabase;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">       mIsInitializing = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (db != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (writable &amp;&amp; db.isReadOnly()) &#123;</div><div class="line">               db.reopenReadWrite();</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mName == <span class="keyword">null</span>) &#123;</div><div class="line">           db = SQLiteDatabase.create(<span class="keyword">null</span>);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               <span class="keyword">if</span> (DEBUG_STRICT_READONLY &amp;&amp; !writable) &#123;</div><div class="line">                   <span class="keyword">final</span> String path = mContext.getDatabasePath(mName).getPath();</div><div class="line">                   db = SQLiteDatabase.openDatabase(path, mFactory,</div><div class="line">                           SQLiteDatabase.OPEN_READONLY, mErrorHandler);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   db = mContext.openOrCreateDatabase(mName, mEnableWriteAheadLogging ?</div><div class="line">                           Context.MODE_ENABLE_WRITE_AHEAD_LOGGING : <span class="number">0</span>,</div><div class="line">                           mFactory, mErrorHandler);</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">catch</span> (SQLiteException ex) &#123;</div><div class="line">               <span class="keyword">if</span> (writable) &#123;</div><div class="line">                   <span class="keyword">throw</span> ex;</div><div class="line">               &#125;</div><div class="line">               Log.e(TAG, <span class="string">"Couldn't open "</span> + mName</div><div class="line">                       + <span class="string">" for writing (will try read-only):"</span>, ex);</div><div class="line">               <span class="keyword">final</span> String path = mContext.getDatabasePath(mName).getPath();</div><div class="line">               db = SQLiteDatabase.openDatabase(path, mFactory,</div><div class="line">                       SQLiteDatabase.OPEN_READONLY, mErrorHandler);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       onConfigure(db);</div><div class="line"></div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> version = db.getVersion();</div><div class="line">       <span class="keyword">if</span> (version != mNewVersion) &#123;</div><div class="line">           <span class="keyword">if</span> (db.isReadOnly()) &#123;</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> SQLiteException(<span class="string">"Can't upgrade read-only database from version "</span> +</div><div class="line">                       db.getVersion() + <span class="string">" to "</span> + mNewVersion + <span class="string">": "</span> + mName);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           db.beginTransaction();</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               <span class="keyword">if</span> (version == <span class="number">0</span>) &#123;</div><div class="line">                   onCreate(db);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="keyword">if</span> (version &gt; mNewVersion) &#123;</div><div class="line">                       onDowngrade(db, version, mNewVersion);</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       onUpgrade(db, version, mNewVersion);</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">               db.setVersion(mNewVersion);</div><div class="line">               db.setTransactionSuccessful();</div><div class="line">           &#125; <span class="keyword">finally</span> &#123;</div><div class="line">               db.endTransaction();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       onOpen(db);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (db.isReadOnly()) &#123;</div><div class="line">           Log.w(TAG, <span class="string">"Opened "</span> + mName + <span class="string">" in read-only mode"</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       mDatabase = db;</div><div class="line">       <span class="keyword">return</span> db;</div><div class="line">   &#125; <span class="keyword">finally</span> &#123;</div><div class="line">       mIsInitializing = <span class="keyword">false</span>;</div><div class="line">       <span class="keyword">if</span> (db != <span class="keyword">null</span> &amp;&amp; db != mDatabase) &#123;</div><div class="line">           db.close();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当当前版本小于新版本时，会调用onUpgrade()方法。所以上面SQLiteOpenHelper的实现思路为：构造方法中初始化一下数据库的必要参数，如数据库版本，数据库名等；在onCreate()方法中创建数据库的表；当我们需要对数据库进行升级的时候，修改数据库的版本号，这样就可以触发onUpgrade()方法，这里我们做最简单的处理：drop掉所有表然后重新创建。当然我们还可以在onOpen()方法中做一下数据库的设置操作，如设置外键生效。这样我们的数据库管理类就实现了。</p>
<h2 id="0x02-拿到数据库对象"><a href="/1970/01/01/[Android-SQLite]0x01创建自己的数据库/#0x02-拿到数据库对象" class="headerlink" title="0x02 拿到数据库对象"></a>0x02 拿到数据库对象</h2><p>有了数据库管理类，对数据库进行操作我们最好封装一个操作类，在这个类中对数据库中的表进行操作。下面的代码也是网上比较常见的（对于数据库对象，也有处理成单例）。先看代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DataBaseOpenHelper dbHelper;</div><div class="line">    <span class="keyword">private</span> SQLiteDatabase db;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataBaseManager</span><span class="params">(Context context)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dbHelper = <span class="keyword">new</span> DataBaseOpenHelper(context);</div><div class="line">        <span class="keyword">this</span>.db = dbHelper.getWritableDatabase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CopyOfDataBaseManager</span><span class="params">(Context context, <span class="keyword">int</span> version)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dbHelper = <span class="keyword">new</span> DataBaseOpenHelper(context, version);</div><div class="line">        <span class="keyword">this</span>.db = dbHelper.getWritableDatabase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeDataBase</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (db != <span class="keyword">null</span> &amp;&amp; db.isOpen()) &#123;</div><div class="line">            db.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInitData</span><span class="params">(String tableName)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        String sql = <span class="string">"select count(*) from "</span> + tableName;</div><div class="line">        Cursor cursor = db.rawQuery(sql, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</div><div class="line">            count = cursor.getInt(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearTable</span><span class="params">(String tableName)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"delete from "</span> + tableName + <span class="string">";"</span>;</div><div class="line">        sql += <span class="string">"update sqlite_sequence set seq = 0 where name = "</span> + tableName + <span class="string">";"</span>;</div><div class="line">        db.execSQL(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertProvinceData</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"insert into "</span> + CityData.TABLE_NAME_PROVINCE + <span class="string">" ("</span> + CityData.COLUMN_NAME_ID + <span class="string">","</span></div><div class="line">                + CityData.COLUMN_NAME_NAME + <span class="string">") VALUES("</span> + id + <span class="string">",'"</span> + name + <span class="string">"');"</span>;</div><div class="line">        db.execSQL(sql);</div><div class="line">        System.out.println(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// TODO其他一下对表进行的操作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先我们创建一个DataBaseOpenHelper的实例，然后通过它拿到SQLiteDatabase对象，这样我们就可以对数据库进行操作了。DataBaseOpenHelper有两种get方法：<code>getWritableDatabase()</code> 和 <code>getReadableDatabase()</code>，大家都应该知道着两种方法的含义，<code>getReadableDatabase()</code> 拿到的数据库对象不可以进行插入修改等写操作。在这两种方法的说明在我们可能需要注意几点：</p>
<ul>
<li>当我们没有申请数据库操作的权限或者磁盘已满，会报错</li>
<li>数据库的更新可能需要很长时间，因此我们不能在主线程中调用</li>
<li>当我们不再对数据库进行操作时，别忘记关闭数据库</li>
</ul>
<p>接下来就是数据库的常用操作了</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-创建自己的数据库&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android-SQLite]0x01创建自己的数据库/#0x01-创建自己的数据库&quot; class=&quot;headerlink&quot; title=&quot;0x01 创建自己的数据库&quot;&gt;&lt;/a&gt;0x01 创
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
      <category term="SQLite" scheme="https://ttdevs.github.io/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>「Android」0x01本地数据安全尝试SQLCipher</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5D0x01%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%B0%9D%E8%AF%95SQLCipher/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>先纪念下，从今天开始，又开始写博客啦啦啦啦。话说基本上一年多没好好写博客了。回想起来，和之前写博客时相比，还是差距好大。好吧，废话不说了，进入正题。</p>
<p>首先，开篇打算跟大家分享下你遇到的或者将来可能遇到的问题：本地数据的安全问题。多数情况，我们可能没有去考虑app的本地数据安全问题，一来公司没这样的要求，二来我们可能也没有非常需要保密的数据。那现在思考一下为将来做储备。</p>
<p>面试的时候，可能常常会被问到这样一个问题：Android的数据存储有哪几种方式？ 对于这个问题，<a href="http://developer.android.com/guide/topics/data/data-storage.html" target="_blank" rel="external">Android的官方文档</a> 有回答：</p>
<ul>
<li>Shared Preferences</li>
<li>Internal Storage</li>
<li>External Storage</li>
<li>SQLite Databases</li>
<li>Network Connection</li>
</ul>
<p>这几种方式就不用多说了。第一种以key-value的方式存储在我们的设备内部；第二种第三种简单理解为文件存储；第四种本地数据库存储（这四种都属本地存储）。最后一种方式（暂且算是一种方式吧）不在我们考虑范围之内。现在假设一个最坏的环境：设备已经root，任何本地数据都可以被直接或者间接拿到。这时候我们自然想到的就是对我们的数据进行加密。</p>
<h2 id="0x01"><a href="/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>以上是开场，下面进入第一部分：本地数据库加密。<br>先回顾下本地数据库，root以后，我们可以在下面的位置找到它：<code>/data/data/you.package/databases</code>，例如我们demo的数据库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@t03g:/data/data/com.ttdevs.demo/databases # ls</div><div class="line">normal_user.db</div><div class="line">normal_user.db-journal</div><div class="line">user.db</div><div class="line">root@t03g:/data/data/com.ttdevs.demo/databases #</div><div class="line">``` </div><div class="line"></div><div class="line">知道了它的位置，接下来我们就可以直接将这些数据库文件拷贝出来，然后使用SQLite浏览器浏览。</div><div class="line">我们选用网上一个开源的方案：[SQLCipher][2]（[GitHub地址][3]）。SQLCipher是在SQLite的基础上封装了加密功能，使用上和直接使用SQLite基本相同。</div><div class="line"></div><div class="line"></div><div class="line">## 0x02</div><div class="line"></div><div class="line">首先，按照说明，我们引入SQLCipher：</div><div class="line"></div><div class="line">``` gradle</div><div class="line">compile &apos;net.zetetic:android-database-sqlcipher:3.3.1-2@aar&apos;</div></pre></td></tr></table></figure>
<p>接下来就是编写我们的数据库代码了。先创建一个DatabaseHelper：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> net.sqlcipher.database.SQLiteDatabase;</div><div class="line"><span class="keyword">import</span> net.sqlcipher.database.SQLiteOpenHelper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_NAME = <span class="string">"user.db"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DATABASE_VERSION = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE = <span class="string">"user_info"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"name"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AGE = <span class="string">"age"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ICON = <span class="string">"icon"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN = <span class="string">"token"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatabaseOpenHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, DATABASE_NAME, <span class="keyword">null</span>, DATABASE_VERSION);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"create table "</span> + TABLE +</div><div class="line">                <span class="string">" (_id integer primary key autoincrement, "</span> +</div><div class="line">                NAME + <span class="string">" text, "</span> +</div><div class="line">                AGE + <span class="string">" integer, "</span> +</div><div class="line">                ICON + <span class="string">" blob, "</span> +</div><div class="line">                TOKEN + <span class="string">" text not null);"</span>;</div><div class="line">        Log.d(<span class="string">"EventsData"</span>, <span class="string">"onCreate: "</span> + sql);</div><div class="line">        db.execSQL(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (oldVersion &lt; newVersion) &#123;</div><div class="line">            <span class="comment">// TODO</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>注意，此处的SQLiteOpenHelper和SQLiteDatabase都来自net.sqlcipher.database包。</code></p>
<p>为了便于对比，我又写了一个相同逻辑使用<code>android.database.sqlite.SQLiteOpenHelper</code>的Helper作对比。接下来使用编写数据库操作逻辑。使用中SQLiteCipher区别是打开数据库的时候需要传入用于加密的KEY。下面是测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlcipherActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"&gt;&gt;&gt;&gt;&gt;"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CIPHER_KEY = <span class="string">"123abc_!@#$%^&amp;*"</span>;</div><div class="line">    <span class="keyword">private</span> DatabaseOpenHelper mOpenHelper;</div><div class="line">    <span class="keyword">private</span> NormalDatabaseOpenHelper mNormalHelper;</div><div class="line">...</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeData</span><span class="params">(<span class="keyword">boolean</span> isCipher)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isCipher) &#123;</div><div class="line">            log(<span class="string">"Cipher:101:"</span> + System.currentTimeMillis());</div><div class="line">            SQLiteDatabase db = mOpenHelper.getWritableDatabase(PASSWORD_KEY);</div><div class="line">            log(<span class="string">"Cipher:102:"</span> + System.currentTimeMillis());</div><div class="line">            String name = <span class="string">"Cipher"</span> + (++mIndex);</div><div class="line">            ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">            values.put(DatabaseOpenHelper.NAME, name);</div><div class="line">            values.put(DatabaseOpenHelper.AGE, mIndex);</div><div class="line">            values.put(DatabaseOpenHelper.TOKEN, PASSWORD_KEY);</div><div class="line">            values.put(DatabaseOpenHelper.ICON, name.getBytes());</div><div class="line">            log(<span class="string">"Cipher:11:"</span> + System.currentTimeMillis());</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                db.beginTransaction();</div><div class="line">                db.insert(DatabaseOpenHelper.TABLE, <span class="keyword">null</span>, values);</div><div class="line">                db.setTransactionSuccessful();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                db.endTransaction();</div><div class="line">            &#125;</div><div class="line">            log(<span class="string">"Cipher:12:"</span> + System.currentTimeMillis());</div><div class="line">            db.close();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readData</span><span class="params">(<span class="keyword">boolean</span> isCipher)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isCipher) &#123;</div><div class="line">            SQLiteDatabase db = mOpenHelper.getReadableDatabase(PASSWORD_KEY);</div><div class="line">            Cursor cursor = db.query(DatabaseOpenHelper.TABLE, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">                String name = cursor.getString(cursor.getColumnIndex(DatabaseOpenHelper.NAME));</div><div class="line">                <span class="keyword">int</span> age = cursor.getInt(cursor.getColumnIndex(DatabaseOpenHelper.AGE));</div><div class="line">                String token = cursor.getString(cursor.getColumnIndex(DatabaseOpenHelper.TOKEN));</div><div class="line">                String result = String.format(<span class="string">"Cipher&gt;&gt;&gt;&gt; name:%s, age:%d, token:%s"</span>, name, age, token);</div><div class="line">                log(result);</div><div class="line">            &#125;</div><div class="line">            db.close();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            android.database.sqlite.SQLiteDatabase ndb = mNormalHelper.getReadableDatabase();</div><div class="line">            android.database.Cursor cursor = ndb.query(NormalDatabaseOpenHelper.TABLE, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">                String name = cursor.getString(cursor.getColumnIndex(DatabaseOpenHelper.NAME));</div><div class="line">                <span class="keyword">int</span> age = cursor.getInt(cursor.getColumnIndex(DatabaseOpenHelper.AGE));</div><div class="line">                String token = cursor.getString(cursor.getColumnIndex(DatabaseOpenHelper.TOKEN));</div><div class="line">                String result = String.format(<span class="string">"Normal&gt;&gt;&gt;&gt; name:%s, age:%d, token:%s"</span>, name, age, token);</div><div class="line">                log(result);</div><div class="line">            &#125;</div><div class="line">            ndb.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，跑一下我们的测试代码，得到下面的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">02-19 13:49:41.596 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: &gt;&gt;&gt;&gt;&gt; Cipher &gt;&gt;&gt;&gt;&gt;</div><div class="line">02-19 13:49:41.596 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher:101:1455860981597</div><div class="line">02-19 13:49:41.971 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher:102:1455860981974</div><div class="line">02-19 13:49:41.971 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher:11:1455860981974</div><div class="line">02-19 13:49:41.981 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher:12:1455860981983</div><div class="line">02-19 13:49:42.201 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher&gt;&gt;&gt;&gt; name:Cipher1, age:1, token:123abc_!@#$%^&amp;*</div><div class="line">02-19 13:49:42.201 24884-24884/com.ttdevs.demo I/Choreographer: Skipped 35 frames!  The application may be doing too much work on its main thread.</div><div class="line">02-19 13:49:49.471 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: &gt;&gt;&gt;&gt;&gt; Noremal &gt;&gt;&gt;&gt;&gt;</div><div class="line">02-19 13:49:49.476 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal:101:1455860989477</div><div class="line">02-19 13:49:49.521 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal:102:1455860989525</div><div class="line">02-19 13:49:49.521 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal:11:1455860989525</div><div class="line">02-19 13:49:49.531 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal:12:1455860989535</div><div class="line">02-19 13:49:49.541 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal&gt;&gt;&gt;&gt; name:Normal2, age:2, token:123abc_!@#$%^&amp;*</div></pre></td></tr></table></figure>
<p>通过简单的对比，我们发现，SQLCipher在打开写数据库的时候花费了375ms，时间大概是SQLite 45ms的8~9倍，所以我们在log中看到丢帧的提示。这就提示我们，简单的数据库操作，使用SQLite我们也可能需要考虑将其放在新的线程中。当然，这个测试对比不够完善，比如大文件写入，大量数据插入，事务等等，因此还需要更多、更详细的测试来检测SQLCipher的性能等，这里就暂不讨论了。</p>
<p>跑完上面的代码，我们来看看我们本地数据库中都创建了哪些东西：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@t03g:/data/data/com.ttdevs.demo/databases # ls</div><div class="line">normal_user.db</div><div class="line">normal_user.db-journal</div><div class="line">user.db</div><div class="line">root@t03g:/data/data/com.ttdevs.demo/databases #</div></pre></td></tr></table></figure>
<p>我们把这两个db文件拷贝到我们的电脑，看看里面有哪些东西。这里推荐一个工具：<a href="http://sqlitebrowser.org/" target="_blank" rel="external">sqlitebrowser</a>。打开他们的网站你会发现它有两个版本的：Standard和SQLCipher的。是的，你没看错，就是针对SQLCipher的。如果你使用Standard版本，你会发现无法打开我们加密后的user.db（当然你也可是试试其他方法）。使用SQLCipher版的，打开之前会要求输入我们加密的KEY，就是我们上面的<code>123abc_!@#$%^&amp;*</code>。这时候我们就可以看到原始的数据了，如下图：</p>
<p><img src="http://img.blog.csdn.net/20160219151008300" alt="Browser SQLCipher Data"></p>
<h2 id="0x03"><a href="/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>到这里，我们基本上已经见到了SQLCipher的使用。还没有结束，再来看一个问题：在创建项目开始，我尝试跑了下项目，apk的大小是1.4MB，在Gradle中引入SQLCipher之后，体积一下子飙到了8.7MB。呵呵呵~~ 这个体积的增加还是值得我们慎重的思考一下下的。</p>
<h2 id="0x04"><a href="/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>说了这么多，我们可以得到这样一个结论，使用SQLiteCipher可以对我们客户端的本地数据库进行加密，但是我们需要自己存一个加密KEY，如果我们能保存好这个KEY，那我们的数据基本是安全的。但是同时，我们可能需要考虑数据库加密过程中引入的新的问题，比如：apk体积的暴增，加密对性能的影响，加密KEY的保存等等。这些问题考虑好之后，我们就可以决定是否引入SQLCipher。</p>
<p>如果你对引入SQLiteCiper引起的新问题心存芥蒂，那接下来给大家推荐下一种方法。敬请期待：<a href="http://blog.csdn.net/ttdevs/" target="_blank" rel="external">Android本地数据安全尝试(中)</a></p>
<p>PS：<a href="https://github.com/ttdevs/Demo" target="_blank" rel="external">Github Demo</a></p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;先纪念下，从今天开始，又开始写博客啦啦
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」0x02本地数据安全尝试Conceal</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5D0x02%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%B0%9D%E8%AF%95Conceal/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]0x02本地数据安全尝试Conceal/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>上一篇我们提到使用SQLCipher对本地的数据进行加密。在保证数据安全的同时，我们又引入了一些新的问题，比如安装包体积的增加，数据存储过程中耗时增加，数据加密的粒度不可控等等。如果你接受不了这些问题，那我们还需寻找其他的加密方法。这里给大家推荐<a href="https://github.com/facebook/conceal" target="_blank" rel="external">Conceal</a></p>
<h2 id="0x01"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x01" class="headerlink" title="0x01"></a>0x01</h2><p><a href="https://github.com/facebook/conceal" target="_blank" rel="external">Conceal</a>是Facebook的一个开源项目，它可以高效的对大文件进行加密（当然对小数据加密也不是问题），同时对设备的性能和系统版本要求比较低。更具体的信息可参考<a href="https://facebook.github.io/conceal/" target="_blank" rel="external">这里</a>。</p>
<blockquote>
<p>Conceal doesn’t implement any crypto, but instead, it uses specific cryptographics algorithms from OpenSSL. Conceal attempts to manage memory efficiently between the native and Java heap. Conceal also uses fast modes like AES-GCM and HMAC-SHA1 by default.<br>OpenSSL is a very large library, and would increase the size of apps. Conceal ships with only a select number of encryption algorithms from OpenSSL which make it much smaller (85KB). </p>
</blockquote>
<h2 id="0x02"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x02" class="headerlink" title="0x02"></a>0x02</h2><h3 id="引用"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#引用" class="headerlink" title="引用"></a>引用</h3><p><code>compile &#39;com.facebook.conceal:conceal:1.0.1@aar&#39;</code></p>
<h3 id="关键代码"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><p>我们可以用其加密常见的数据类型，比如字符串，图片等。</p>
<ul>
<li>字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 加密</span></div><div class="line"><span class="keyword">byte</span>[] cipherText = mCrypto.encrypt(plainText, mEntity);</div><div class="line"><span class="comment">// 解密</span></div><div class="line"><span class="keyword">byte</span>[] plainText = mCrypto.decrypt(cipherText, mEntity);</div></pre></td></tr></table></figure>
<ul>
<li>大文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">OutputStream out = mCrypto.getCipherOutputStream(fileOS, mEntity);</div><div class="line"><span class="keyword">int</span> read = <span class="number">0</span>;</div><div class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line"><span class="keyword">while</span> ((read = sourceFile.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">    out.write(buffer, <span class="number">0</span>, read);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENTITY = <span class="string">"ttdevs"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == mCrypto) &#123;</div><div class="line">        mCrypto = <span class="keyword">new</span> Crypto(<span class="keyword">new</span> SharedPrefsBackedKeyChain(context), <span class="keyword">new</span> SystemNativeCryptoLibrary());</div><div class="line">        mEntity = <span class="keyword">new</span> Entity(ENTITY);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上三部分是我们使用Conceal的关键代码。首先，我们需要构造一个Crypto对象，这个对象需要传入两个参数，第一个是KeyChain，第二个是NativeCryptoLibrary。NativeCryptoLibrary我们使用系统默认的。KeyChain顾名思义，就是我们的加密key。例子中我们使用了SharedPrefsBackedKeyChain，通过查看源码，我们发现，它是将加密的key保存到SharedPreferences中的一个KeyChain的实现。</p>
<h3 id="测试"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#测试" class="headerlink" title="测试"></a>测试</h3><p>接下来我们来看看Conceal的表现如何。我写了一个简单的测试代码，由于比较长，就不贴了，具体可以参考<a href="https://github.com/ttdevs/Demo" target="_blank" rel="external">这里</a>，主要有三个部分：</p>
<ul>
<li>测试字符串加解密</li>
<li>测试加密数据的数据库读写</li>
<li>测试本地文件加解密</li>
</ul>
<p>界面如下：</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/app/image-conceal-string.png" alt="测试界面"></p>
<ul>
<li>字符串加解密</li>
</ul>
<p>字符串的读写如上图，加解密字符串<code>Hello world!</code>耗时都在3ms左右，这个时间应该是我们可以接受的。</p>
<p><code>PS:强势插入一个2B问题</code></p>
<blockquote>
<p>细心的你可能会想如果我们不用数据库，只是加密几个简单的数据，能不能将密文直接写入SharedPreferences中呢？告诉你我也是这么想的，而且去测试了，但是死活不成功，不成功，不成功……<br>我的思路是这样的：由于加密、加密结果、解密 三个操作参数都是byte，而SharedPreferences接受的参数是String类型，因此我们需要进行转换，<code>new String(bytes, &quot;utf-8&quot;)</code> 和 <code>string.getBytes(&quot;utf-8&quot;)</code> ， 当你这么做的时候，你会发现解密死活不成功。经历过无数个不眠之夜后，终于恍然大悟，原来这么转换是错误的！原因很简单，一个utf-8编码汉字是2bytes，如果我们的加密结果不足2byte，我们强转时不足部分就会被补齐，当再转换回来的时候就和原来的不一一样了。最后怎么解决呢？也很简单，用Base64对byte数组进行编码，具体怎么做可以参考Conceal源码中的SharedPrefsBackedKeyChain。</p>
</blockquote>
<ul>
<li>数据库读写</li>
</ul>
<p>这个时间就不做过多解读，数据库操作时间加加解密时间。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1456500607857: Begin transaction </div><div class="line">1456500607861: Insert: Hello world! </div><div class="line">1456500607865: Read: name:Hello world! token:Hello world! </div><div class="line">1456500607868: Read: name:Hello world! token:Hello world! </div><div class="line">1456500607871: Read: name:Hello world! token:Hello world! </div><div class="line">1456500607885: End transaction</div></pre></td></tr></table></figure>
<ul>
<li>文件加解密</li>
</ul>
<p>这个比较重要，如果我们有大文件加密的需求（比如前段时间微信的红包图片），对性能和效率要求就比较高了。</p>
<p>某一次加密数据：</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/app/image-conceal-file.png" alt="测试界面"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Encrpyt 1.png 1014KB 163ms</div><div class="line">Encrpyt 2.jpg 2078KB 336ms</div><div class="line">Encrpyt 3.jpg 3043KB 477ms</div><div class="line">Encrpyt 4.JPG 3811KB 560ms</div><div class="line">Encrpyt 5.JPG 4772KB 699ms</div><div class="line">Encrpyt 10.apk 10268KB 1281ms</div><div class="line">Encrpyt 10.gif 10421KB 671ms</div><div class="line">Encrpyt 21.apk 20962KB 1323ms</div></pre></td></tr></table></figure>
<p>某一次解密数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Decrpyt encrypt_1.png 1014KB 108ms</div><div class="line">Decrpyt encrypt_2.jpg 2078KB 177ms</div><div class="line">Decrpyt encrypt_3.jpg 3043KB 221ms</div><div class="line">Decrpyt encrypt_4.JPG 3811KB 270ms</div><div class="line">Decrpyt encrypt_5.JPG 4772KB 340ms</div><div class="line">Decrpyt encrypt_10.apk 10268KB 732ms</div><div class="line">Decrpyt encrypt_10.gif 10421KB 764ms</div><div class="line">Decrpyt encrypt_21.apk 20962KB 1468ms</div></pre></td></tr></table></figure>
<p>从上面的数据我们可以看到，加密多张大图并没有导致内存的增加，只是CPU使用率有所变化。加密1MB图片耗时160ms，加密20MB文件耗时1300ms多。解密数据的性能消耗类似。</p>
<h2 id="0x03"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x03" class="headerlink" title="0x03"></a>0x03</h2><h3 id="分析"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#分析" class="headerlink" title="分析"></a>分析</h3><p>了解了Conceal的基本情况，我们来对比下上面提到的使用SQLCipher遇到的问题。首先，Conceal只有85KB，这个大小是我们完全可以接受的，然后就是加密粒度，无论是数据库还是文件，我们都可以只真对需要的那部分加密，最后即使你选择将文件存入数据库，它的时间也只有正常数据库操作时间加Conceal的加解密时间。综上所述，Conceal应该是一个不错的选择。</p>
<h3 id="总结"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#总结" class="headerlink" title="总结"></a>总结</h3><p>我们再来想想这两篇文章中提到的加密方法：无论你选择哪一种，由于他们都采用了对称加密算法，虽然数据部分加密了，但是我们却需要维护一个秘钥，这个秘钥放在那里？SharedPreferences？数据库？本地文件？貌似进入了一个死循环，问题又回到了起点。分析了这么多，如果没有办法解决秘钥的问题，也都是白搭。怎么办？下一篇在进一步分析。敬请期待。</p>
<p><code>PS: 所有测试机器 魅族 MX4PRO 性能均衡模式</code></p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;上一篇我们提到使用SQLCipher对本地
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」0x03本地数据安全尝试JNI</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5D0x03%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%B0%9D%E8%AF%95JNI/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]0x03本地数据安全尝试JNI/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两篇，我们谈到了使用SQLCipher和Conceal对本地数据进行加密。由于都两种方法都采用了对称加密，因此我们需要自己管理加密的秘钥。这时你会发现，虽然对我们的数据进行了加密，但是我们却引入了新的问题。我们的加密方法很容易通过反编译apk获取到，那么，我们就需要安全的维护这个秘钥了。但遗憾的是，本地数据存储方式我们都已经讲述，并没有一种一劳永逸的安全保存方法，那么，我们的秘钥存在哪里合适呢？这个时候你可能会想到本地不行那我们存到服务器上吧，通过https进行传输。这样当然可以，通过一定的算法为每个人配置一个秘钥，需要的时候请求网络获取，然后对本地数据进行解密。但是这样也存在一个问题：本地保存的数据如果不联网就无法打开。那么，还有更好的方案吗？今天给大家介绍JNI。</p>
<h2 id="0x01"><a href="/1970/01/01/[Android]0x03本地数据安全尝试JNI/#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>NDK，JNI对于刚接触android开发的攻城狮来说是有较大的门槛的，但是为了实现我们更安全的保存数据，他可能是不错的选择。反编译过别人家app的你可能都遇到过这样的情况：一个个没无法查看代码逻辑的so文件。这些文件我们可以使用java代码调用，实现一些我们不知道内部逻辑但是会给我们一个结果功能。那么，我们把密码放到这些so中就可以更进一步提高我们本地数据的安全级别。</p>
<p>下面通过一个加单的demo来看看JNI的实现。</p>
<p>首先创建一个工具类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CipherUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"Cipher"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getCipherKey</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个类文件上点击右键，使用我们之前配置的javah工具生成头文件。之后我们会在和java目录同级的jni文件下看到一个.h文件，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="comment">/* Header for class com_ttdevs_ndk_CipherUtil */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_com_ttdevs_ndk_CipherUtil</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_com_ttdevs_ndk_CipherUtil</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     com_ttdevs_ndk_CipherUtil</div><div class="line"> * Method:    getCipherKey</div><div class="line"> * Signature: ()Ljava/lang/String;</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_ttdevs_ndk_CipherUtil_getCipherKey</span></span></div><div class="line">  <span class="params">(JNIEnv *, jclass)</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>然后在h文件的同级新建一个C++文件（右键&gt;New&gt;C/C++ Source file）,内容如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"QiniuConfig.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG <span class="meta-string">"System.out"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_ttdevs_ndk_CipherUtil.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_ttdevs_ndk_CipherUtil_getCipherKey</span><span class="params">(JNIEnv *env, jclass)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> (*env).NewStringUTF(<span class="string">"Hello World! getCipherKey"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们还需要创建两个文件，一个叫Android.mk，另一个叫Application.mk，他们都在jni目录下。</p>
<ul>
<li>Android.mk:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># http://developer.android.com/intl/zh-tw/ndk/guides/android_mk.html</div><div class="line"></div><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE := Cipher</div><div class="line">LOCAL_SRC_FILES := Cipher.cpp</div><div class="line">LOCAL_LDLIBS += -llog</div><div class="line"></div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>
<ul>
<li>Application.mk</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># http://developer.android.com/intl/zh-tw/ndk/guides/application_mk.html</div><div class="line"></div><div class="line"># APP_STL := stlport_static</div><div class="line">APP_STL := gnustl_static</div><div class="line">APP_CPPFLAGS := -frtti -std=c++11</div><div class="line">APP_CFLAGS += -Wno-error=format-security</div><div class="line"></div><div class="line">APP_ABI := all</div></pre></td></tr></table></figure>
<p>还没有完，我们还需要修改当前Project或者Module的gradle.build文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion 23</div><div class="line">    buildToolsVersion &quot;23.0.2&quot;</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion 16</div><div class="line">        targetSdkVersion 23</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line"></div><div class="line">        ndk &#123;</div><div class="line">            moduleName &quot;ndkutil&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sourceSets.main &#123;</div><div class="line">        jni.srcDirs = []</div><div class="line">        jniLibs.srcDir &quot;libs&quot;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完成这些，我们就可以进行编译了。在当前Project（Module）上点击右键，使用之前配置的ndk-build工具进行编译，如果没有问题，我们会在libs目录下看到生产的so文件。好了，最后我们可以编写测试代码了：在java直接调用刚才创建的CipherUtil即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span>, CipherUtil.getCipherKey());</div></pre></td></tr></table></figure>
<p>运行上面代码，我们可以在log中看到输出的字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello World! getCipherKey</div></pre></td></tr></table></figure>
<h2 id="0x02"><a href="/1970/01/01/[Android]0x03本地数据安全尝试JNI/#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>上述demo中，我们只是简单的返回一个字符串，要实现更安全，我们可以将此方法写的更复杂，比如获取app的签名，获取设备的硬件信息进行复杂的组合，以保障最终生成的秘钥的唯一性和安全性（更难伪造），这里有一个<a href="https://github.com/MasonLiuChn/AndroidUltimateEncrypt" target="_blank" rel="external">demo</a>可以参考。</p>
<p>写到这里，可能又有人会问到：其实so文件也不是很全，可以通过对汇编的分析得到里面的代码逻辑。当然，高手是可以做到对so文件进行分析的，但是so还是可以阻隔大部分的反编译人员。如果我们能把getCipherKey实现的更好，也会增加破解的成本。另外，so还有一个被盗用的问题，就是别人直接调用我们的so，这个问题也可以通过一定的代码逻辑来避免。之后会继续讲解。</p>
<p>最后再说一点，对于秘钥，我们最终还会被载入我们的内存，如果直接dump我们的内存，会是一个人什么样的结果呢？</p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两篇，我们谈到了使用SQLCipher和Conceal对本地数据进行加密。由于都两种方法都采用了对称加密，因此我们需要自己管理加密的秘钥。这时你会发现，虽然对我们的数据进行了加密，但是我们却引入了新的问题。我们的加密方法很容易通过反编译apk获取到，那么，我们就需要安全的
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」Android闹钟遇到的那些坑</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DAndroid%E9%97%B9%E9%92%9F%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]Android闹钟遇到的那些坑/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-做过闹钟的话你才会理解的坑"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x00-做过闹钟的话你才会理解的坑" class="headerlink" title="0x00 做过闹钟的话你才会理解的坑"></a>0x00 做过闹钟的话你才会理解的坑</h2><p>第一次做闹钟程序是在2012年，那时候android最新版本是2.2，2.3发布在即，做了一个整点提醒的小工具，记得很清楚，主要的问题是锁屏之后闹钟不能准时被唤醒，总会晚那么几秒钟，后来没办法把闹钟提前设置几秒钟。不过那时候环境还好，没有遇到攻克不了的问题，重启也可以唤起闹钟的。</p>
<p>但是随着android版本的进化，开发者节操的丢失，问题就越来越难做了。闹钟明明设置了却不能到来；不再设置的时间到来，晚了好久才到；重启之后闹钟就没了等等。当然，还有好多好多，总之很多东西不按照自己期待的来。</p>
<p>项目上线，踩过之后挑一些做总结。</p>
<p>由于时间关系，项目比较赶，所以没有去考虑闹钟无法及时触发的问题，假设了一个最理想的环境。（更多的信息可以参考下面的文章）</p>
<h2 id="0x01-闹钟的创建"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x01-闹钟的创建" class="headerlink" title="0x01 闹钟的创建"></a>0x01 闹钟的创建</h2><p>这里涉及到不同版本设置闹钟的方法，下面的参考文章中已经提到：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startAlarm</span><span class="params">(Calendar calendar, PendingIntent pendingIntent)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">       <span class="comment">// mManager.setWindow(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), 1000* 5, mFirstPIntent);</span></div><div class="line">       mManager.setExact(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), pendingIntent);</div><div class="line">       <span class="comment">// mManager.set(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), mSecondPIntent);</span></div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       mManager.set(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), pendingIntent);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x02-闹钟的取消"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x02-闹钟的取消" class="headerlink" title="0x02 闹钟的取消"></a>0x02 闹钟的取消</h2><p>有的时候可能需要去取消一个闹钟。我们可以通过两种方式来取消：</p>
<ul>
<li><p>通过 <code>PendingIntent.cancel();</code> 来取消</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Cancel a currently active PendingIntent.  Only the original application</div><div class="line"> * owning a PendingIntent can cancel it.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ActivityManagerNative.getDefault().cancelIntentSender(mTarget);</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>这种方式只有能拿到 `PendingIntent` 才可以。
</code></pre><ul>
<li><p>通过 <code>AlarmManager.cancel(PendingIntent);</code> 来取消</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Remove any alarms with a matching &#123;<span class="doctag">@link</span> Intent&#125;.</div><div class="line"> * Any alarm, of any type, whose Intent matches this one (as defined by</div><div class="line"> * &#123;<span class="doctag">@link</span> Intent#filterEquals&#125;), will be canceled.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> operation IntentSender which matches a previously added</div><div class="line"> * IntentSender.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@see</span> #set</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">(PendingIntent operation)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        mService.remove(operation);</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="0x03-闹钟的查看"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x03-闹钟的查看" class="headerlink" title="0x03 闹钟的查看"></a>0x03 闹钟的查看</h2><p>又个adb命令可以用来查看当前系统中存在的闹钟：</p>
<p><code>adb shell dumpsys alarm</code></p>
<p><img src="http://img.blog.csdn.net/20170224183136089?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>不是在所有的设备上都好使，比如在我的魅族设备上可以正常使用，而在另一台 OPPO R7C上就不可以。</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ul>
<li><a href="http://www.jianshu.com/p/1f919c6eeff6" target="_blank" rel="external">http://www.jianshu.com/p/1f919c6eeff6</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-做过闹钟的话你才会理解的坑&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x00-做过闹钟的话你才会理解的坑&quot; class=&quot;headerlink&quot; title=&quot;0x00 做过闹钟的话你才会理解的坑&quot;
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」Android Studio 1.x NDK环境搭建</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DAndroid%20Studio%201.x%20NDK%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载NDK"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#下载NDK" class="headerlink" title="下载NDK"></a>下载NDK</h2><h3 id="下载"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="http://developer.android.com/ndk/downloads/index.html" target="_blank" rel="external">NDK Download</a></p>
<p><a href="http://dl.google.com/android/ndk/android-ndk-r10e-linux-x86.bin" target="_blank" rel="external">mac: android-ndk-r10e-linux-x86.bin</a></p>
<h3 id="安装"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ndk ls</div><div class="line">android-ndk-r10e-darwin-x86_64.bin</div><div class="line">➜  ndk chmod a+x android-ndk-r10e-darwin-x86_64.bin</div><div class="line">➜  ndk ./android-ndk-r10e-darwin-x86_64.bin</div></pre></td></tr></table></figure>
<h2 id="配置环境"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="gradle-properties"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h3><p>在末尾添加一行： <code>android.useDeprecatedNdk=true</code></p>
<h3 id="添加build工具"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#添加build工具" class="headerlink" title="添加build工具"></a>添加build工具</h3><p>AS &gt; Preferences &gt; Tools &gt; External Tools</p>
<h4 id="add-javah"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#add-javah" class="headerlink" title="add javah"></a>add javah</h4><ul>
<li>Name: javah</li>
<li>Group: default(External Tools)</li>
<li>Description: generate C header</li>
<li>Options: select all</li>
<li>Show in: select all</li>
<li>Tools Settings:<ul>
<li>Program:  <code>$JDKPath$/bin/javah</code></li>
<li>Parameters:  <code>-v -d $ModuleFileDir$/src/main/jni -jni $FileClass$</code></li>
<li>Parameters:  <code>-bootclasspath $ModuleSdkPath$/platforms/android-23/android.jar -v -d $ModuleFileDir$/src/main/jni -jni $FileClass$</code> (if you need android object)</li>
<li>Working directory:  <code>$SourcepathEntry$</code></li>
</ul>
</li>
</ul>
<p>(PS: Right click on the class)</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/ndkutil/image-javah.png" alt="项目结构"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  ~ javah</div><div class="line">用法:</div><div class="line">  javah [options] &lt;classes&gt;</div><div class="line">其中, [options] 包括:</div><div class="line">  -o &lt;file&gt;                输出文件 (只能使用 -d 或 -o 之一)</div><div class="line">  -d &lt;dir&gt;                 输出目录</div><div class="line">  -v  -verbose             启用详细输出</div><div class="line">  -h  --help  -?           输出此消息</div><div class="line">  -version                 输出版本信息</div><div class="line">  -jni                     生成 JNI 样式的标头文件 (默认值)</div><div class="line">  -force                   始终写入输出文件</div><div class="line">  -classpath &lt;path&gt;        从中加载类的路径</div><div class="line">  -bootclasspath &lt;path&gt;    从中加载引导类的路径</div><div class="line">&lt;classes&gt; 是使用其全限定名称指定的</div><div class="line">(例如, java.lang.Object)。</div></pre></td></tr></table></figure>
<h4 id="add-ndkBuild"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#add-ndkBuild" class="headerlink" title="add ndkBuild"></a>add ndkBuild</h4><ul>
<li>Name: ndkBuild</li>
<li>Group: default(External Tools)</li>
<li>Description: ndk build</li>
<li>Options: select all</li>
<li>Show in: select all</li>
<li>Tools Settings:<ul>
<li>Program:  <code>/Users/ttdevs/android/android-ndk-r10e/ndk-build</code></li>
<li>Parameters:  <code>NDK_LIBS_OUT=$ModuleFileDir$/libs</code></li>
<li>Working directory:  <code>$ModuleFileDir$/src/main</code></li>
</ul>
</li>
</ul>
<p>(PS: Right click on the module name)</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/ndkutil/image-ndkbuild.png" alt="项目结构"></p>
<h2 id="编写代码"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><h3 id="新建一个Module：ndkutil"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#新建一个Module：ndkutil" class="headerlink" title="新建一个Module：ndkutil"></a>新建一个Module：ndkutil</h3><h3 id="修改ndkutil的build-gradle"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#修改ndkutil的build-gradle" class="headerlink" title="修改ndkutil的build.gradle"></a>修改ndkutil的build.gradle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    defaultConfig &#123;</div><div class="line">        ...</div><div class="line">        ndk &#123;</div><div class="line">            moduleName <span class="string">"ndkutil"</span></div><div class="line">//            abiFilters <span class="string">"armeabi-v7a"</span>, <span class="string">"x86"</span></div><div class="line">//            stl <span class="string">"gnustl_static"</span></div><div class="line">//            cFlags <span class="string">"-std=c++11 -Wall"</span></div><div class="line">//            ldLibs <span class="string">"log"</span>, <span class="string">"jnigraphics"</span>, <span class="string">"EGL"</span>, <span class="string">"GLESv3"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sourceSets.main &#123;</div><div class="line">        jni.srcDirs = []</div><div class="line">        jniLibs.srcDir <span class="string">"libs"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建工具类CipherUtil"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#创建工具类CipherUtil" class="headerlink" title="创建工具类CipherUtil"></a>创建工具类CipherUtil</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ttdevs.ndk;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CipherUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"Cipher"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getCipherKey</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成头文件com-ttdevs-ndk-CipherUtil-h"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#生成头文件com-ttdevs-ndk-CipherUtil-h" class="headerlink" title="生成头文件com_ttdevs_ndk_CipherUtil.h"></a>生成头文件com_ttdevs_ndk_CipherUtil.h</h3><p>在刚才创建的CipherUtil.java上点击右键 &gt; External Tools &gt; javah<br>此时会在main目录下生成: jni/com_ttdevs_ndk_CipherUtil.h</p>
<h3 id="编写代码-1"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#编写代码-1" class="headerlink" title="编写代码"></a>编写代码</h3><p>都是在ndkutil/src/main/jni目录下</p>
<ul>
<li>创建C源码:Cipher.cpp</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_ttdevs_ndk_CipherUtil.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_ttdevs_ndk_CipherUtil_getCipherKey</span><span class="params">(JNIEnv *env, jclass)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (*env).NewStringUTF(<span class="string">"Hello World!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建Android.mk</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE := Cipher</div><div class="line">LOCAL_SRC_FILES := Cipher.cpp</div><div class="line"></div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>
<ul>
<li>创建Application.mk</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">APP_MODULE := Cipher</div><div class="line">APP_ABI := all</div></pre></td></tr></table></figure>
<h3 id="编译生成so文件"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#编译生成so文件" class="headerlink" title="编译生成so文件"></a>编译生成so文件</h3><p>在module（ndkutil）上点击右键 &gt; External Tools &gt; ndkBuild ，可以看到如下log：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/Users/ttdevs/android/android-ndk-r10d/ndk-build NDK_LIBS_OUT=/Users/ttdevs/android/workspace/Demo/ndkutil/libs</div><div class="line">[arm64-v8a] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[arm64-v8a] SharedLibrary  : libCipher.so</div><div class="line">[arm64-v8a] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/arm64-v8a/libCipher.so</div><div class="line">[x86_64] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[x86_64] SharedLibrary  : libCipher.so</div><div class="line">[x86_64] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/x86_64/libCipher.so</div><div class="line">[mips64] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[mips64] SharedLibrary  : libCipher.so</div><div class="line">[mips64] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/mips64/libCipher.so</div><div class="line">[armeabi-v7a] Compile++ thumb: Cipher &lt;= Cipher.cpp</div><div class="line">[armeabi-v7a] SharedLibrary  : libCipher.so</div><div class="line">[armeabi-v7a] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/armeabi-v7a/libCipher.so</div><div class="line">[armeabi] Compile++ thumb: Cipher &lt;= Cipher.cpp</div><div class="line">[armeabi] SharedLibrary  : libCipher.so</div><div class="line">[armeabi] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/armeabi/libCipher.so</div><div class="line">[x86] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[x86] SharedLibrary  : libCipher.so</div><div class="line">[x86] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/x86/libCipher.so</div><div class="line">[mips] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[mips] SharedLibrary  : libCipher.so</div><div class="line">[mips] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/mips/libCipher.so</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
<p>此时我们可以发现在ndkutil/libs/目录下生成的so文件。</p>
<h3 id="测试代码"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String cipher = CipherUtil.getCipherKey();</div></pre></td></tr></table></figure>
<h2 id="项目结构"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/ndkutil/image-dir.png" alt="项目结构"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载NDK&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#下载NDK&quot; class=&quot;headerlink&quot; title=&quot;下载NDK&quot;&gt;&lt;/a&gt;下载NDK&lt;/h2&gt;&lt;h3 id=&quot;下载&quot;&gt;&lt;
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」DataBinding给Button设置背景无效</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DDataBinding%E7%BB%99Button%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E6%97%A0%E6%95%88/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]DataBinding给Button设置背景无效/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-问题"><a href="/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x00-问题" class="headerlink" title="0x00 问题"></a>0x00 问题</h2><p>通过Data Binding给Button设置背景无效。<br>具体表现为给Button设置不同的背景图片，但是无论怎样背景只会显示不同的颜色，而不是显示期望的图片。</p>
<h2 id="0x01-分析"><a href="/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>由于对Data Binding不是很熟悉，所以很奇怪为什么。不管怎样先打印下这个资源的值，发现在布局文件中打印资源值是有的。根据经验，设置不同的背景图片，背景会显示不同的颜色，那这个值可能被解析成了颜色值。</p>
<h2 id="0x02-解决"><a href="/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x02-解决" class="headerlink" title="0x02 解决"></a>0x02 解决</h2><p>在网上搜了一下（容我忘记了具体网址），需要通过不同的方式来设置背景：<br>之前的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">      <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">      <span class="attr">android:onClick</span>=<span class="string">"@&#123;(view) -&gt; handler.onStartClick(view)&#125;"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"@string/button_start"</span></div><div class="line">      <span class="attr">android:textColor</span>=<span class="string">"@color/blueColor"</span></div><div class="line">      <span class="attr">android:textSize</span>=<span class="string">"@dimen/global_font_large"</span></div><div class="line">      <span class="attr">android:background</span>=<span class="string">"@&#123;handler.startButtonBg&#125;"</span></div><div class="line">      <span class="attr">tools:background</span>=<span class="string">"@drawable/btn_main_circle_start"</span> /&gt;</div></pre></td></tr></table></figure>
<p>修改之后：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">      <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">      <span class="attr">android:onClick</span>=<span class="string">"@&#123;(view) -&gt; handler.onStartClick(view)&#125;"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"@string/button_start"</span></div><div class="line">      <span class="attr">android:textColor</span>=<span class="string">"@color/blueColor"</span></div><div class="line">      <span class="attr">android:textSize</span>=<span class="string">"@dimen/global_font_large"</span></div><div class="line">      <span class="attr">app:backgroundResource</span>=<span class="string">"@&#123;handler.startButtonBg&#125;"</span></div><div class="line">      <span class="attr">tools:background</span>=<span class="string">"@drawable/btn_main_circle_start"</span> /&gt;</div></pre></td></tr></table></figure>
<p>也就是将之前的 <code>android:background</code> 换成 <code>app:backgroundResource</code></p>
<h2 id="0x03-总结"><a href="/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>没啥总结的，Data Binding 还有很多等待探究。</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-问题&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x00-问题&quot; class=&quot;headerlink&quot; title=&quot;0x00 问题&quot;&gt;&lt;/a&gt;0x00 问题&lt;/h2&gt;&lt;p&gt;通过Da
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」Android Studio 2.0 NDK开发环境搭建</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DAndroid%20Studio%202.0%20NDK%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前情回顾"><a href="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x00-前情回顾" class="headerlink" title="0x00 前情回顾"></a>0x00 前情回顾</h2><p>前不久写了一篇环境搭建，虽然可以跑一个demo，但是如果你跟着做的话就会发现，仅仅是可以跑一个Demo，真做起来很是蛋疼。编写源码，生成so，跑App，改一点代码，再生成so，跑app。而且编写代码没有提示，不能格式化，各种不能，就是最基本的文本开发。经过一段时间折腾和Android Studio 2.0的 release，发现有更完美的方式，而且不用编写Android.mk和Application.mk。看在我刚开始学的份上，容我再来写一遍。看完这篇，你会发现JNI的开发也是如此的so easy。</p>
<h2 id="0x01-环境搭建"><a href="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>所需环境：</p>
<ol>
<li>Android Studio 2.0</li>
<li>Gradle 2.10（最低要求）</li>
<li>NDK：ndk-r11c（目前最新版：2016-04-16）</li>
<li>LLDB：2.1（目前最新版：2016-04-16）</li>
</ol>
<p>下面开始正式操作：</p>
<ul>
<li><p>安装Android Studio 2.0</p>
<p>  这个就不细说了。</p>
</li>
<li><p>配置Gradle</p>
<p>  最低要求Gradle版本为2.10，目前最新版本为2.12。修改方法：</p>
<p>  <code>项目根目录/gradle/wrapper/gradle-wrapper.properties</code></p>
<p>  将最下面的一行改成你要的版本，如：</p>
<p>  <code>distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip</code></p>
</li>
<li><p>安装NDK</p>
<p>  安装NDK有两种方式，一种是直接下载最新的NDK安装文件进行安装，另一种是通过SDK安装：</p>
<ol>
<li><p>NDK安装文件</p>
<p> 下载参考<a href="http://developer.android.com/ndk/downloads/index.html" target="_blank" rel="external">这里</a>。根据你的操作系统下载不同版本。</p>
</li>
<li><p>通过SDK安装</p>
<p> <code>Android Studio &gt; Preferences &gt; Appearance &amp; Behavior &gt; Syetem Settings &gt; Android SDK &gt; SDK Tools</code></p>
<p> 在这个Tab中找到 <code>Android NDK</code>，选中安装即可。安装之后我们可以在 Android SDK 的目录下看到一个 <code>ndk-bundle</code> 目录，这个就是我们的NDK目录。</p>
<p><img src="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/image.png" alt="ndk_lldb"></p>
</li>
</ol>
</li>
<li><p>LLDB</p>
<p>  和 GDB 类似，<a href="http://lldb.llvm.org/" target="_blank" rel="external">LLDB</a>  是一款调试器，可以调试我们的JNI代码。同上打开SDK设置界面：</p>
<p>  <code>Android Studio &gt; Preferences &gt; Appearance &amp; Behavior &gt; Syetem Settings &gt; Android SDK &gt; SDK Tools</code></p>
<p>  在这个Tab中找到 <code>LLDB</code>，选中安装即可。安装之后我们可以在 Android SDK 的目录下看到一个 <code>lldb</code> 目录，这个就是我们的 LLDB 目录。LLDB的更多信息可参考<a href="http://lldb.llvm.org/" target="_blank" rel="external">这里</a>。</p>
</li>
</ul>
<p>通过上面的配置，接下来就可以开始我们的JNI的开发了。 可能你会问之前我有介绍过一篇开发环境的搭建，这个有什么不同呢？如果你使用之前的方法，你需要配置 Android.mk、Application.mk，无代码自动完成，不能代码个时候，运行调试麻烦，等等。这些问题在这里都不存在了，让我们把更多的精力放到代码编写中。</p>
<h2 id="0x02-测试Demo"><a href="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x02-测试Demo" class="headerlink" title="0x02 测试Demo"></a>0x02 测试Demo</h2><p>新建java代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CipherUtils</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"CipherUtils"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成对应的C++代码：</p>
<p>令人兴奋的是，Android Studio可以帮我们自动生成 C 代码。点击 <code>add</code> 方法，Option ＋ Return 即可生成一个 <code>CipherUtils.c</code>文件，由于我打算使用C++，因此将扩展名改为 <code>cpp</code> ，同时添加头文件，最终如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utils/log.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_ttdevs_jniutils_CipherUtils_add</span><span class="params">(JNIEnv *env, jclass type, jint x, jint y)</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">input_str</span><span class="params">(<span class="string">"Test add two number!"</span>)</span></span>;</div><div class="line">    LOGE(<span class="string">"%s"</span>, input_str.c_str());</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>PS：如果报错，可是将错误的 cpp文件拷贝出来再考吧回去。</code></p>
<p>build.gradle 配置</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ......</div><div class="line">        defaultConfig &#123;</div><div class="line">        ......</div><div class="line">        ndk &#123;</div><div class="line">            moduleName <span class="string">"CipherUtils"</span></div><div class="line">            stl <span class="string">"gnustl_static"</span> <span class="comment">// stlport_static</span></div><div class="line">            abiFilters <span class="string">"armeabi"</span>, <span class="string">"armeabi-v7a"</span></div><div class="line">            ldLibs <span class="string">"log"</span>, <span class="string">"android"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">sourceSets</span>.main &#123;</div><div class="line">        <span class="comment">// 如果不写(jni.srcDirs = ['src/main/jni/'])</span></div><div class="line">        <span class="comment">// Android展示模式没有jni目录</span></div><div class="line">        <span class="comment">// this file has been added after the last project sync with gradle</span></div><div class="line">        <span class="comment">// 必须有值,如: 'src/main/jni/'</span></div><div class="line">        jni.srcDirs = [<span class="string">'src/main/jni/'</span>]</div><div class="line">        <span class="comment">// jniLibs.srcDir "libs"</span></div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接点击运行按钮，即可跑我们的测试程序了。就这么简单。</p>
<h2 id="0x03-JNI层的Debug"><a href="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x03-JNI层的Debug" class="headerlink" title="0x03 JNI层的Debug"></a>0x03 JNI层的Debug</h2><p>这个同样简单。首先需要在外面的build.gradle中配置一下：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ......</div><div class="line">    buildTypes &#123;</div><div class="line">        debug &#123;</div><div class="line">            jniDebuggable = <span class="keyword">true</span></div><div class="line">        &#125;</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>C/C++</code> 源文件上添加断点，点击debug，就可以像debug我们的java代码一样调试我们的原生代码了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前情回顾&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x00-前情回顾&quot; class=&quot;headerlink&quot; title=&quot;0x00 前情回顾&quot;&gt;&lt;/a&gt;0x00 前情回顾
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」Android你可能要用到的自定义View分享</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DAndroid%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%A6%81%E7%94%A8%E5%88%B0%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%88%86%E4%BA%AB/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]Android你可能要用到的自定义View分享/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-main"><a href="/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x00-main" class="headerlink" title="0x00 main"></a>0x00 main</h2><p>进步、创新都是在不断变化的需求中诞生的。<br>                        －－ By ttdevs</p>
<p>这不，新的需求又来了。废话不多说，先上设计稿：</p>
<p><img src="http://img.blog.csdn.net/20160619220030319" alt="boohee design"></p>
<p>简单分析上图包括三部分：最上面的类Progressbar，中间两个指示盘和最下面的指示盘。第一个类Progressbar我们项目之前有实现过，但是和这个需求有一些差异，因此决定重新实现一遍。另外两个圆形指示盘本想通过在一张背景图片上放一张指针图，控制指针图的旋转来实现，但是考虑到这样不够灵活，因此也决定自己来画。So，我们接下来实现这三个View。</p>
<p>正式开始之前，先看看我们最终效果图（当然，指针是可以动的）：</p>
<p><img src="http://img.blog.csdn.net/20160629135550259" alt="Indicator view"></p>
<h2 id="0x01-分析"><a href="/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><ul>
<li><p>LineIndicator （第一个，类Progressbar）</p>
<p>  主要包括三部分：左侧的提示和内容，右侧的提示和内容，中间的类Progressbar。两侧的文字比较容易处理，掌握了文字的基本绘制，画起来是很容易的。中间的类Progressbar由于打算自己画，所以不会直接贴个Progressbar在上面。我的思路是画一条长的直线作为背景，中间的指示也是直线，比背景直线粗，直线的Paint设置 <code>StrokeCap</code> 为 <code>Paint.Cap.ROUND</code> 即 <code>paint.setStrokeCap(Paint.Cap.ROUND);</code>，这样就可以有两头半圆的效果；中间的指示数字直接画在粗的指示直线上面即可。这里可能遇到的问题有下面两个：</p>
<ul>
<li><p><code>StrokeCap</code> 设置 为 <code>Paint.Cap.ROUND</code>时的位置关系</p>
<p>  <code>StrokeCap</code> 设置 为 <code>Paint.Cap.ROUND</code>，直线两侧的半圆是不算在直线的长度里的。简单来说，如果view的长度和我画的直线长度一致，那么这个直线就是矩形而不是期待的两侧都是半圆的椭圆。</p>
</li>
<li><p>当进度为0或者为100％时的展示</p>
<p>  如果我们背景直线和指示直线起点终点位置一致，那么最终效果就是当进度为0或者100%的时候，指示直线是显示不全的，因此我们需要对这两个位置进行矫正。我的矫正方法比较简单，在0～x和y～100%进度的时候分别显示x和y（本以为自己的思路很屌，后来发现别人也是这么干的）。</p>
</li>
</ul>
</li>
<li><p>CircleIndicator （中间的多种颜色环）</p>
<p>  这个View我将其分解为四部分，从上层到下层：中间指针，刻度环，显示的内容，圆环背景和外层指示文字。每一部分再做分解：</p>
<ul>
<li><p>中间指针</p>
<p>  这个又分解为六个部分：最下层大圆，两个圆形半圆，两个三角形和上层小圆。</p>
</li>
<li><p>刻度环</p>
<p>  由于是圆环，所以必须画弧线了。但是这个弧线又有点特殊，两侧带圆角，中间圆环直角，这个没想到啥好办法，用了很一般的思路：先用 <code>Paint.Cap.ROUND</code> 画两侧的弧，然后 <code>Paint.Style.STROKE</code> 画中间的部分。</p>
</li>
<li><p>显示的内容</p>
<p>  这个就比较简单了，主要在于计算文字的显示位置。</p>
</li>
<li><p>圆环背景和外层文字</p>
<p>  最简单的一个圆，加一个以圆为路径画的文字。</p>
</li>
</ul>
</li>
</ul>
<pre><code>最后我们画的顺序正好与上面所述顺序相反。
</code></pre><ul>
<li><p>ProgressIndicator （最下面的两种颜色环）</p>
<p>  这个相较 CircleIndicator 就简单了一些。在画圆环的时候，我们只需要先画一个灰色背景，然后再画一个绿色圆弧即可。</p>
</li>
</ul>
<h2 id="0x02-实现"><a href="/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x02-实现" class="headerlink" title="0x02 实现"></a>0x02 实现</h2><p>View的绘制我们应该都比较熟悉，主要有下面三个过程： onMeasure（测量）、onLayout（布局）、onDraw（绘制）。针对上述三个View：LineIndicator，我们根据实际的内容来计算View的高度，宽度用户设定；CircleIndicator和ProgressIndicator的宽度用户设定，高度自定计算与宽度相同。onLayout我们不需要。最后的根据实际的展示内容来绘制。</p>
<p>另外，由于CircleIndicator和ProgressIndicator和相似度高，很多代码可以拿来重用，因此，我写了一个基类来完成公共的部分，特殊部分每个 子类自己完成。最后再子类地onDraw方法中按照顺序调用即可。</p>
<p>由于主要是计算各种坐标位置，代码还是不少的，这里就不贴代码。最后的实现请移步我的 <a href="https://github.com/ttdevs/android/tree/master/modules/indicator" target="_blank" rel="external">github</a>。三个View的代码已经整理完LineIndicator，其它的两个还需要点时间（2016-06-19）。</p>
<h2 id="0x03-知识点"><a href="/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x03-知识点" class="headerlink" title="0x03 知识点"></a>0x03 知识点</h2><ul>
<li><p>自定义View的思路</p>
<ul>
<li>创建类，继承自View或者ViewGroup或者其它ViewGroup</li>
<li>定义View的可配置参数，如果你需要的话</li>
<li><p>实现View的具体逻辑</p>
<p>这个太粗略了，各位可以参考具体源码。</p>
</li>
</ul>
</li>
<li><p>文字位置的计算</p>
<p>  如果你没有自己画过文字，那你肯定不可能一下子明白文字的画法，或多或少的出现偏移。这里直接给大家推荐一篇讲的非常详细的文章：<a href="http://blog.csdn.net/aigestudio/article/details/41447349" target="_blank" rel="external">http://blog.csdn.net/aigestudio/article/details/41447349</a></p>
</li>
<li><p>位置、半径、弧长等的计算</p>
<p>  这里会涉及到简单的三角函数和圆的周长弧度的计算，可能要说的就是三角函数的参数是弧度制度。</p>
</li>
<li><p>ObjectAnimator</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置内容的颜色值（非resource的id）</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> contentColor 内容的颜色值</div><div class="line"> * <span class="doctag">@param</span> unitColor    单位的颜色值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentColor</span><span class="params">(<span class="keyword">int</span> contentColor, <span class="keyword">int</span> unitColor)</span> </span>&#123;</div><div class="line">    mContentColor = contentColor;</div><div class="line">    mUnitColor = unitColor;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置进度</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> indicator 进度值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndicator</span><span class="params">(<span class="keyword">float</span> indicator)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (indicator &lt;= mStartIndicator) &#123;</div><div class="line">        mIndicator = mStartIndicator;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (indicator &gt; mEndIndicator) &#123;</div><div class="line">        mIndicator = mEndIndicator;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mIndicator = indicator;</div><div class="line">    &#125;</div><div class="line">    postInvalidate();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取进度</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> 当前进度值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getIndicator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mStartIndicator;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">animateIndicator</span><span class="params">(<span class="keyword">float</span> indicator)</span> </span>&#123;</div><div class="line">    Interpolator interpolator = <span class="keyword">new</span> AnticipateOvershootInterpolator(<span class="number">1.8f</span>);</div><div class="line">    ObjectAnimator animation = ObjectAnimator.ofFloat(<span class="keyword">this</span>, <span class="string">"indicator"</span>, indicator);</div><div class="line">    animation.setDuration(<span class="number">2000</span>);</div><div class="line">    animation.setInterpolator(interpolator);</div><div class="line">    animation.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>处理屏幕的旋转</p>
<p>  由于时间比较紧，这个我还没做。主要在View的以下两个方法中实现：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Parcelable <span class="title">onSaveInstanceState</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">super</span>.onSaveInstanceState();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(Parcelable state)</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onRestoreInstanceState(state);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>最后欢迎各位吐槽并提供更好的建议～～</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-main&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x00-main&quot; class=&quot;headerlink&quot; title=&quot;0x00 main&quot;&gt;&lt;/a&gt;0x00 main&lt;/h2&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」MediaPlayer单曲循环不卡顿</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DMediaPlayer%E5%8D%95%E6%9B%B2%E5%BE%AA%E7%8E%AF%E4%B8%8D%E5%8D%A1%E9%A1%BF/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-需求"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x00-需求" class="headerlink" title="0x00 需求"></a>0x00 需求</h2><p>单曲循环播放歌曲，要求过度连贯，听不出来卡顿感觉。</p>
<h2 id="0x01-解决思路"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x01-解决思路" class="headerlink" title="0x01 解决思路"></a>0x01 解决思路</h2><ol>
<li><p>MediaPlayer</p>
<p> 对于常见的音乐播放，我们第一时间想到的应该就是它，它有一个方法</p>
<p> <code>MediaPlayer.setLooping(true);</code></p>
<p> 就是用来进行单曲循环的。但是很遗憾，如果你简单的这么做，上面的目的是达不到的，会出现上一遍结束出现一个明显的停止才开始播放下一次的现象。</p>
<p> 不过最后就是用的这个组件，不过不是简单的设置 <code>setLooping(true)</code>。</p>
</li>
<li><p>SoundPool</p>
<p>一段时间内可能会播放很多音乐的时候，我们首先应该选择这个。</p>
</li>
<li><p>第三方组件</p>
<p> 如果没有特殊的需求，这个不是首选，特别是当引入的组件特别重的时候。    </p>
</li>
</ol>
<p>因为之前踩过坑：iOS上直接播放mp3文件，单曲循环的时候播放的间隙特别长，卡顿的感觉无法接受，解决方法是将mp3转换成m4a，基本上听不出中间的过度间隙。<br>首先尝试了使用 <code>MediaPlayer</code> 来播放，在我的机器（MX4 Pro）上播放还勉强能接受，间隙不是非常明显，换到配置差一点的机器上就不能忍了。然后尝试了 <code>SoudPool</code> ，无论是预加载一次循环播放，还是预加载两次循环播放，中间的卡顿感觉和用 <code>MediaPlayer.setLooping(true);</code> 一样一样的。再然后，尝试macOS 下编译 <code>vlc for android</code> ，我失败了╮(╯▽╰)╭）问题总要解决的，再找其他办法。</p>
<h2 id="0x02-死循环"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x02-死循环" class="headerlink" title="0x02 死循环"></a>0x02 死循环</h2><p>找了很多资料，最后使用一个循环播放的方法解决了这个问题：</p>
<ul>
<li>创建第一个播放器，播放；</li>
<li>同时创建第二个播放器，准备；</li>
<li>第一个播放器播放完毕立马启动第二个；</li>
<li>然后创建第三个播放器，准备；</li>
<li>如此往复，直到用户停止…</li>
</ul>
<p>由于对 <code>MediaPlayer</code> 没有过深入的研究和使用，这个思路来一时半会自己还是想不出来的（总是会想只要创建一个播放器就够了）。这么做下来真的循环播放就没有间隙感了……</p>
<p>由于 <code>mPlayer.setLooping(true);</code> 是native方法，所以没有去跟具体的实现逻辑。猜测可能是重新加载或者其他原因导致单曲循环中间间隙较大（原谅我的懒，没有去拿大文件尝试）。而使用上面的方式，当播放时间大于预加载时间的时候，第一个播放器播放的时候有第二个播放器有充足的机会去完成加载然后等待播放（播放时间小于加载时间的可能性不是很大）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> MediaPlayer mPlayer, mNextPlayer;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mPlayResId = R.raw.water;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoopPlayer</span><span class="params">()</span> </span>&#123;</div><div class="line">    mPlayer = MediaPlayer.create(<span class="keyword">this</span>, mPlayResId);</div><div class="line">    mPlayer.setOnPreparedListener(<span class="keyword">new</span> MediaPlayer.OnPreparedListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">(MediaPlayer mediaPlayer)</span> </span>&#123;</div><div class="line">            mPlayer.start();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    createNextMediaPlayer();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createNextMediaPlayer</span><span class="params">()</span> </span>&#123;</div><div class="line">    mNextPlayer = MediaPlayer.create(<span class="keyword">this</span>, mPlayResId);</div><div class="line">    mPlayer.setNextMediaPlayer(mNextPlayer);</div><div class="line">    mPlayer.setOnCompletionListener(<span class="keyword">new</span> MediaPlayer.OnCompletionListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(MediaPlayer mp)</span> </span>&#123;</div><div class="line">            mp.release();</div><div class="line"></div><div class="line">            mPlayer = mNextPlayer;</div><div class="line"></div><div class="line">            createNextMediaPlayer();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x03-总结"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>这更像一个开脑洞的问题。</p>
<h2 id="0x04-参考"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><ul>
<li><a href="http://stackoverflow.com/questions/26274182/not-able-to-achieve-gapless-audio-looping-so-far-on-android" target="_blank" rel="external">http://stackoverflow.com/questions/26274182/not-able-to-achieve-gapless-audio-looping-so-far-on-android</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-需求&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x00-需求&quot; class=&quot;headerlink&quot; title=&quot;0x00 需求&quot;&gt;&lt;/a&gt;0x00 需求&lt;/h2&gt;&lt;p&gt;单曲循环播放歌曲，要
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」Toobar的一个简单封装</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DToobar%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]Toobar的一个简单封装/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Toolbar和ActionBar的直观区别就是需要我们自己将ToolBar加到自己的布局文件中。目前的情况是：在我们的现有项目上改动，多数的Activity都是继承一个BaseActivity。为了用最小的代价达到目的，简单的思考之后，做了如下的改动：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 带ToolBar的基类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">ActionBarActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_VIEW_ID = R.layout.activity_base;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LayoutParams LAYOUT_PARAMS = <span class="keyword">new</span> LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinearLayout mParentView;</div><div class="line">    <span class="keyword">private</span> Toolbar mToolBar;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ViewUtils.startTranslucent(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(BASE_VIEW_ID);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (BASE_VIEW_ID == layoutResID) &#123;</div><div class="line">            <span class="keyword">super</span>.setContentView(layoutResID);</div><div class="line"></div><div class="line">            mParentView = (LinearLayout) findViewById(R.id.base_parent_view);</div><div class="line">            mToolBar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">            initToolbar(mToolBar);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mParentView.addView(getLayoutInflater().inflate(layoutResID, <span class="keyword">null</span>), LAYOUT_PARAMS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        mParentView.addView(view, LAYOUT_PARAMS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initToolbar</span><span class="params">(Toolbar toolbar)</span> </span>&#123;</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">        toolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Toolbar <span class="title">getToolBar</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mToolBar;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBackground</span><span class="params">(<span class="keyword">int</span> colorId)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mParentView) &#123;</div><div class="line">            mParentView.setBackgroundColor(getResources().getColor(colorId));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>布局文件activity_base.xml：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">   xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">   android:id="@+id/base_parent_view"</div><div class="line">   android:layout_width="match_parent"</div><div class="line">   android:layout_height="match_parent"</div><div class="line">   android:background="@color/global_background_status_bar"</div><div class="line">   android:fitsSystemWindows="true"</div><div class="line">   android:orientation="vertical"&gt;</div><div class="line">    </div><div class="line">   &lt;include layout="@layout/subview_toolbar"/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>在基类中添加如上代码，基本可以用最小的改动达到使用Toolbar的目的。但是，这样也存在一个问题，就是会使我们的每个Activity的布局层次多了一层。</p>
<p>如果有更好的思路，欢迎分享～～</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Toolbar和ActionBar的直观区别就是需要我们自己将ToolBar加到自己的布局文件中。目前的情况是：在我们的现有项目上改动，多数的Activity都是继承一个BaseActivity。为了用最小的代价达到目的，简单的思考之后，做了如下的改动：&lt;/p&gt;
&lt;figu
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」*不同Context区别</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5D%E4%B8%8D%E5%90%8CContext%E5%8C%BA%E5%88%AB/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]不同Context区别/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">AlertDialog dialog = <span class="keyword">new</span> AlertDialog</div><div class="line">    .Builder(context)</div><div class="line">    .setTitle(title)</div><div class="line">    .setCancelable(<span class="keyword">false</span>)</div><div class="line">    .setPositiveButton(<span class="string">"确定"</span>, listener)</div><div class="line">    .create();</div><div class="line">dialog.show();</div></pre></td></tr></table></figure>
<p>错误信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">android.view.WindowManager$BadTokenException: Unable to add window -- token <span class="keyword">null</span> is not <span class="keyword">for</span> an </div><div class="line">	at android.view.ViewRootImpl.setView(ViewRootImpl.java:<span class="number">589</span>)</div><div class="line">	at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:<span class="number">326</span>)</div><div class="line">	at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:<span class="number">224</span>)</div><div class="line">	at android.view.WindowManagerImpl$CompatModeWrapper.addView(WindowManagerImpl.java:<span class="number">149</span>)</div><div class="line">	at android.app.Dialog.show(Dialog.java:<span class="number">293</span>)</div><div class="line">	at com.ttdevs.easysecuritysmartbar.StartHandler.handleMessage(StartHandler.java:<span class="number">39</span>)</div><div class="line">	at android.os.Handler.dispatchMessage(Handler.java:<span class="number">99</span>)</div><div class="line">	at android.os.Looper.loop(Looper.java:<span class="number">137</span>)</div><div class="line">	at android.app.ActivityThread.main(ActivityThread.java:<span class="number">4866</span>)</div><div class="line">	at java.lang.reflect.Method.invokeNative(Native Method)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">511</span>)</div><div class="line">	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">786</span>)</div><div class="line">	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">553</span>)</div><div class="line">	at dalvik.system.NativeStart.main(Native Method)</div></pre></td></tr></table></figure>
<p>其中context是通 <code>getApplicationContext()</code> 获取的，将其换成 <code>Activity</code> 问题解决。</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Android]不同Context区别/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/40481055" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/40481055</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;l
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」LayoutInflate遇到的坑</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DLayoutInflate%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]LayoutInflate遇到的坑/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-问题"><a href="/1970/01/01/[Android]LayoutInflate遇到的坑/#0x01-问题" class="headerlink" title="0x01 问题"></a>0x01 问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initVoiceItem</span><span class="params">()</span> </span>&#123;</div><div class="line">    viewMusicList.removeAllViews();</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> localResource = SysPreferences.getAlarmVoiceResource();</div><div class="line">    LayoutInflater inflater = LayoutInflater.from(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VOICE_KEY.length; i++) &#123;</div><div class="line">        View view = inflater.inflate(R.layout.item_voice_name, viewMusicList); <span class="comment">// <span class="doctag">TODO:</span> 2017/2/10</span></div><div class="line">        view.setOnClickListener(mClickListener);</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> View.OnClickListener mClickListener = <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size = viewMusicList.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            View view = viewMusicList.getChildAt(i);</div><div class="line">            ...</div><div class="line">            <span class="keyword">if</span> (v == view) &#123;</div><div class="line">                &#123;...<span class="number">1</span>...&#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                &#123;...<span class="number">2</span>...&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>有上面一串代码，你能发现有什么问题吗？</p>
<p>嗯嗯，是这样的：只会执行代码块{1}，并没有像我们期待的那样点击的时候执行到代码块{2}中去。没有细究，通过下面的代码直接跨过去：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initVoiceItem</span><span class="params">()</span> </span>&#123;</div><div class="line">   viewMusicList.removeAllViews();</div><div class="line">   </div><div class="line">   <span class="keyword">int</span> localResource = SysPreferences.getAlarmVoiceResource();</div><div class="line">   LayoutInflater inflater = LayoutInflater.from(<span class="keyword">this</span>);</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VOICE_KEY.length; i++) &#123;</div><div class="line">       View view = inflater.inflate(R.layout.item_voice_name, <span class="keyword">null</span>); <span class="comment">// <span class="doctag">TODO:</span> 2017/2/10</span></div><div class="line">       view.setOnClickListener(mClickListener);</div><div class="line">       ...</div><div class="line">       viewMusicList.addView(view);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然不知道什么原因，但是找到解决办法，不过还是挺惭愧的······</p>
<h2 id="0x02-分析"><a href="/1970/01/01/[Android]LayoutInflate遇到的坑/#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h2><p>很多人可能跟我一样，开始学的时候，记住该怎么写，这个方法是干嘛的。但是很难避免会记错某个方法，就像我们会写错某个字一样，当别人纠正的时候才知道，这个字自己已经写错十几活着几十年了。来看一下 <code>View.inflate()</code> 这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Inflate a new view hierarchy from the specified xml resource. Throws</div><div class="line">* &#123;<span class="doctag">@link</span> InflateException&#125; if there is an error.</div><div class="line">* </div><div class="line">* <span class="doctag">@param</span> resource ID for an XML layout resource to load (e.g.,</div><div class="line">*        &lt;code&gt;R.layout.main_page&lt;/code&gt;)</div><div class="line">* <span class="doctag">@param</span> root Optional view to be the parent of the generated hierarchy.</div><div class="line">* <span class="doctag">@return</span> The root View of the inflated hierarchy. If root was supplied,</div><div class="line">*         this is the root View; otherwise it is the root of the inflated</div><div class="line">*         XML file.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(@LayoutRes <span class="keyword">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> inflate(resource, root, root != <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们传入了 <code>root</code> View，那么返回的就是root View， 如果不传，则返回根据布局文件生成的 View。而根据我上面的代码，显然被我错误的理解，无论传不传 <code>root</code> View，返回的都是根据布局文件生成的 View，而我就这么相安无事的用了好几年······</p>
<h2 id="0x03-你以为这就这样结束了"><a href="/1970/01/01/[Android]LayoutInflate遇到的坑/#0x03-你以为这就这样结束了" class="headerlink" title="0x03 你以为这就这样结束了"></a>0x03 你以为这就这样结束了</h2><p>如果你执行我的错误代码，你会看到下面这个图：</p>
<p><img src="http://img.blog.csdn.net/20170212223305559?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>这个这个图有两个信息：</p>
<ul>
<li>后面几个Item显示的名称是错误的</li>
<li>点击某个Item，其他几个Item的checkbox也被选择</li>
</ul>
<p>我们按照错误的代码执行的逻辑进行分析。首先：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VOICE_KEY.length; i++) &#123;</div><div class="line">  View view = inflater.inflate(R.layout.item_voice_name, viewMusicList);</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码会循环多次，将inflate后的布局添加到viewMusicList，这样viewMusicList下面就有多个 <code>item_voice_name</code> 因此最终给我们展现的结果就是看到有多个Item。</p>
<p>对于第一个问题，我们需要从 <code>view.findViewById()</code> 说起，从View中你会发现这两段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Look for a child view with the given id.  If this view has the given</div><div class="line">* id, return this view.</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> id The id to search for.</div><div class="line">* <span class="doctag">@return</span> The view that has the given id in the hierarchy or null</div><div class="line">*/</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> View <span class="title">findViewById</span><span class="params">(@IdRes <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> findViewTraversal(id);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* &#123;<span class="doctag">@hide</span>&#125;</div><div class="line">* <span class="doctag">@param</span> id the id of the view to be found</div><div class="line">* <span class="doctag">@return</span> the view of the specified id, null if cannot be found</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">findViewTraversal</span><span class="params">(@IdRes <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (id == mID) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是不是太简单，根本没找到我们期待的逻辑——ViewGroup中怎么处理，细心的你会发现ViewGroup重写了 <code>findViewTraversal()</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">findViewTraversal</span><span class="params">(@IdRes <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (id == mID) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">final</span> View[] where = mChildren;</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> len = mChildrenCount;</div><div class="line"></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">       View v = where[i];</div><div class="line"></div><div class="line">       <span class="keyword">if</span> ((v.mPrivateFlags &amp; PFLAG_IS_ROOT_NAMESPACE) == <span class="number">0</span>) &#123;</div><div class="line">           v = v.findViewById(id);</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">return</span> v;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从这段代码可以看出，在ViewGroup中根据ID查找，找到就返回，而找到的永远是最前面的View。这就解释了为什么第一个Item和其他的不同了。</p>
<p>（对于点击某个Item，其他Item也出现波纹效果，猜测可能是因为波纹效果是根据ID来实现的。TODO ）</p>
<h2 id="0x04-总结"><a href="/1970/01/01/[Android]LayoutInflate遇到的坑/#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>上面遇到的View inflate是我个人遇到的问题，主要是因为对基础知识掌握有问题。另外在使用inflate的时候，可能还会遇到LayoutParam设置无效的问题，这个可以通过套一个View的方式解决，仅此记录。 </p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-问题&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]LayoutInflate遇到的坑/#0x01-问题&quot; class=&quot;headerlink&quot; title=&quot;0x01 问题&quot;&gt;&lt;/a&gt;0x01 问题&lt;/h2&gt;&lt;figure class=
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
