<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ttdevs</title>
  <subtitle>你之所以觉得时间一年比一年过得快，是因为时间对你一年比一年重要</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ttdevs.github.io/"/>
  <updated>2017-05-21T11:07:57.000Z</updated>
  <id>https://ttdevs.github.io/</id>
  
  <author>
    <name>ttdevs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「Android-Bluetooth」0x01操作</title>
    <link href="https://ttdevs.github.io/2017/05/21/%5BAndroid-Bluetooth%5D0x02%E6%93%8D%E4%BD%9C/"/>
    <id>https://ttdevs.github.io/2017/05/21/[Android-Bluetooth]0x02操作/</id>
    <published>2017-05-20T16:00:00.000Z</published>
    <updated>2017-05-21T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-蓝牙（Bluetooth）"><a href="/2017/05/21/[Android-Bluetooth]0x02操作/#0x00-蓝牙（Bluetooth）" class="headerlink" title="0x00 蓝牙（Bluetooth）"></a>0x00 蓝牙（Bluetooth）</h2><p>这个小硬件已经是Android机器的标配了，由于平时不怎么用，因此到现在都没有去研究过。现在有一个简单的小需求：通过蓝牙连接一个串口设备读取其上面的数据，即从已配对的设备列表中选择我们的串口蓝牙设备（从），连接，然后读取数据。遂写此文。</p>
<h2 id="0x01-简单使用"><a href="/2017/05/21/[Android-Bluetooth]0x02操作/#0x01-简单使用" class="headerlink" title="0x01 简单使用"></a>0x01 简单使用</h2><p>蓝牙设备的详细使用，可以参考<a href="https://developer.android.google.cn/guide/topics/connectivity/bluetooth.html" target="_blank" rel="external">Android关于蓝牙的官方文档</a>。如果你和我一样，之前没有研究过蓝牙，估计看看完后也会有一堆问题存在：什么主设备、从设备、UUID是干嘛的，如何免密钥配对等等。不着急，我们慢慢来。</p>
<p>上面已经说到，我们的设备已经提前配对完成（怎么配对：网络设置中中找到蓝牙，然后搜索，找到你的设备，然后配对。这个时候可能会提示输入密码，默认密码比0000，1234等）。我们只需要连接即可。下面简述操作步骤：</p>
<ol>
<li><p>添加蓝牙权限</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH_ADMIN"</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>判断是否支持蓝牙</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initBluetooth</span><span class="params">()</span> </span>&#123;</div><div class="line">    mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == mBluetoothAdapter) &#123;</div><div class="line">        tvContent.setText(<span class="string">"BluetoothAdapter is null"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!mBluetoothAdapter.isEnabled()) &#123;</div><div class="line">        tvContent.setText(<span class="string">"BluetoothAdapter is disable, please open it"</span>);</div><div class="line"></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</div><div class="line">        startActivityForResult(intent, REQUEST_ENABLE_BT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tvContent.setText(<span class="string">"Bluetooth init success"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>首先是判断是否有蓝牙适配器，如果没有，`BluetoothAdapter.getDefaultAdapter()` 返回 `null`。然后判断蓝牙设备是否启用 `mBluetoothAdapter.isEnabled()` ，如果未启用，则发送一个 `Intent` 来让用户启用蓝牙，这个 `Intent` 是系统的，我们在 `onActivityResult` 中处理用户操作结果，如果用户顺利开启蓝牙，则会返回 `RESULT_OK`。
</code></pre><ol>
<li><p>获取设备列表</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Set&lt;BluetoothDevice&gt; pairedDevices = mBluetoothAdapter.getBondedDevices();</div><div class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != pairedDevices &amp;&amp; pairedDevices.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="keyword">for</span> (BluetoothDevice device : pairedDevices) &#123;</div><div class="line">      ......</div><div class="line">      String msg = String.format(<span class="string">"%s %s\n"</span>, device.getName(), device.getAddress());</div><div class="line">      ......</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>这个时候我们可以拿到 `BluetoothDevice` ，这个对象中保存了已配对蓝牙设备的信息，比如名称，MAC地址，状态，UUID等信息（但这些信息不一定都都），我们需要保存下来，在接下来连接的时候会使用。
</code></pre><ol>
<li><p>连接设备</p>
<p> 有了 <code>BluetoothDevice</code> 信息，我们就可以连接这个已经配对的蓝牙设备了。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> UUID DEFAULT_UUID = UUID.fromString(<span class="string">"00001101-0000-1000-8000-00805f9b34fb"</span>);</div><div class="line"></div><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == mSocket)&#123;</div><div class="line">        mSocket = mDevice.createRfcommSocketToServiceRecord(DEFAULT_UUID);</div><div class="line">    &#125;</div><div class="line">    mSocket.connect(); <span class="comment">// 阻塞的</span></div><div class="line"></div><div class="line">    mIn = mSocket.getInputStream();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>连接成功后，我们会得到一个 `BluetoothSocket` 对象，然后调用其阻塞的 `connect()` 方法，等待两台设备连接成功（所以这个时候必须在另外一个线程中进行）。当两台设备连接成功之后会继续向下执行。
</code></pre><ol>
<li><p>读取数据</p>
<p> 连接成功之后，我们可以通过 <code>mSocket.getInputStream()</code> 获得一个输入流，结下来的操作就是流的操作了，这个和普通 <code>socket</code> 中输入输出流的操作一样了。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">    mBytes = mIn.read(readBuffer);</div><div class="line">    System.arraycopy(readBuffer, <span class="number">0</span>, tempBuffer, mCount, mBytes);</div><div class="line">    mCount += mBytes;</div><div class="line">    <span class="keyword">if</span> (mCount &gt;= SIZE) &#123;</div><div class="line">        parseData(tempBuffer);</div><div class="line">        mCount = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="0x02-总结"><a href="/2017/05/21/[Android-Bluetooth]0x02操作/#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>Android蓝牙（主从）的操作：</p>
<ul>
<li>检查是否支持，是否启用（包括是否可见等）</li>
<li>扫描设备</li>
<li>配对</li>
<li>连接</li>
<li>数据交换</li>
<li>等等</li>
</ul>
<p>这里只讲了检查部分操作，涉及的扫描与配对可能是更复杂一些的，在接下来讲述。</p>
<p>最后，项目代码可参考这里<a href="https://github.com/ttdevs/android/tree/master/apps/air" target="_blank" rel="external">github/ttdevs/air</a>。</p>
<h2 id="0x03-Java线程的封装"><a href="/2017/05/21/[Android-Bluetooth]0x02操作/#0x03-Java线程的封装" class="headerlink" title="0x03 Java线程的封装"></a>0x03 Java线程的封装</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by ttdevs</div><div class="line"> * 2017-01-22 (android)</div><div class="line"> * https://github.com/ttdevs</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseWorkerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRunning = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.run();</div><div class="line">        isRunning = workerBefore();</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (isRunning) &#123;</div><div class="line">            workerCycle();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        workerAfter();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提前执行 true: 继续 false: 结束</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">workerBefore</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 工作方法，被循环调用</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> true: 继续 false: 结束</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">workerCycle</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 结束执行</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">workerAfter</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开始线程</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        isRunning = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            start();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            isRunning = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 结束线程</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        isRunning = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x04-参考"><a href="/2017/05/21/[Android-Bluetooth]0x02操作/#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><ul>
<li><a href="https://developer.android.google.cn/guide/topics/connectivity/bluetooth.html" target="_blank" rel="external">https://developer.android.google.cn/guide/topics/connectivity/bluetooth.html</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-蓝牙（Bluetooth）&quot;&gt;&lt;a href=&quot;/2017/05/21/[Android-Bluetooth]0x02操作/#0x00-蓝牙（Bluetooth）&quot; class=&quot;headerlink&quot; title=&quot;0x00 蓝牙（Bluetooth）
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
      <category term="Bluetooth" scheme="https://ttdevs.github.io/tags/Bluetooth/"/>
    
  </entry>
  
  <entry>
    <title>「Java」(==)与(equals)</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BJava%5D(==)%E4%B8%8E(equals)/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Java](==)与(equals)/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-两种比较方法"><a href="/1970/01/01/[Java](==)与(equals)/#0x01-两种比较方法" class="headerlink" title="0x01 两种比较方法"></a>0x01 两种比较方法</h2><ul>
<li><p><code>==</code></p>
<ul>
<li><p>基本类型</p>
<p>  对于基本类型，<code>==</code> 的功能是比较值。</p>
</li>
<li><p><code>Object</code></p>
<p>  比较对象在内存中的地址。</p>
</li>
</ul>
</li>
<li><p><code>equals</code></p>
<p>  基本类型无equals方法。Object对象默认equals的实现如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * ...</div><div class="line"> * <span class="doctag">@param</span>   obj   the reference object with which to compare.</div><div class="line"> * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if this object is the same as the obj</div><div class="line"> *          argument; &#123;<span class="doctag">@code</span> false&#125; otherwise.</div><div class="line"> * <span class="doctag">@see</span>     #hashCode()</div><div class="line"> * <span class="doctag">@see</span>     java.util.HashMap</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>有很长一段注释，最终的实现我们可以看到还是用的 `==` 来比较两个对象在内存中的地址。
</code></pre><h2 id="0x02-equals-amp-hashCode"><a href="/1970/01/01/[Java](==)与(equals)/#0x02-equals-amp-hashCode" class="headerlink" title="0x02 equals() &amp; hashCode()"></a>0x02 equals() &amp; hashCode()</h2><p>对于equals的默认实现——比较对象在内存中的地址——有时候可能并不是我们期望的，比如有一个Student类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">   <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</div><div class="line">       <span class="keyword">this</span>.id = id;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// ... getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当 Student.id 相同时，我们更愿意认为这是同一个学生，而下面这个测试是无法通过的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">equalsStudent</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">   Student st1 = <span class="keyword">new</span> Student(<span class="number">2333</span>);</div><div class="line">   Student st2 = <span class="keyword">new</span> Student(<span class="number">2333</span>);</div><div class="line">   assertEquals(st1, st2);</div><div class="line">   <span class="comment">// assertNotEquals(st1, st2);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了达到我们的目的——相同的学号就认为是同一个人——我们可以重写Student类的 equals 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">   <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.id = id;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">null</span> == o) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line">       Student std = (Student) o;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.id == std.id) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.equals(o);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// ... getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改之后上面的测试就可以通过了。Demo毕竟是简单的，当我们在实际的使用中需要重写equals方法时还是需要遵守它的生成规则，这里贴出来供参考：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public boolean equals(Object obj)</div><div class="line"></div><div class="line">    指示其他某个对象是否与此对象“相等”。</div><div class="line"></div><div class="line">    equals 方法在非空对象引用上实现相等关系：</div><div class="line"></div><div class="line">        自反性：对于任何非空引用值 x，x.equals(x) 都应返回 true。</div><div class="line">        对称性：对于任何非空引用值 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才应返回 true。</div><div class="line">        传递性：对于任何非空引用值 x、y 和 z，如果 x.equals(y) 返回 true，并且 y.equals(z) 返回 true，那么 x.equals(z) 应返回 true。</div><div class="line">        一致性：对于任何非空引用值 x 和 y，多次调用 x.equals(y) 始终返回 true 或始终返回 false，前提是对象上 equals 比较中所用的信息没有被修改。</div><div class="line">        对于任何非空引用值 x，x.equals(null) 都应返回 false。 </div><div class="line"></div><div class="line">    Object 类的 equals 方法实现对象上差别可能性最大的相等关系；即，对于任何非空引用值 x 和 y，当且仅当 x 和 y 引用同一个对象时，此方法才返回 true（x == y 具有值 true）。</div><div class="line"></div><div class="line">    注意：当此方法被重写时，通常有必要重写 hashCode 方法，以维护 hashCode 方法的常规协定，该协定声明相等对象必须具有相等的哈希码。</div><div class="line"></div><div class="line">    参数：</div><div class="line">        obj - 要与之比较的引用对象。 </div><div class="line">    返回：</div><div class="line">        如果此对象与 obj 参数相同，则返回 true；否则返回 false。</div><div class="line">    另请参见：</div><div class="line">        hashCode(), Hashtable</div><div class="line">``` </div><div class="line"></div><div class="line">事情还没有结束。看下面代码：</div><div class="line"></div><div class="line">``` java</div><div class="line">@Test</div><div class="line">public void studentSet() throws Exception &#123;</div><div class="line">   Student st1 = new Student(2333);</div><div class="line">   Student st2 = new Student(2333);</div><div class="line"></div><div class="line">   Set&lt;Student&gt; stds = new HashSet&lt;&gt;();</div><div class="line">   stds.add(st1);</div><div class="line">   stds.add(st2);</div><div class="line">   assertEquals(1, stds.size());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你会发现这段代码测试不通过。set不是重复对象只会保留一份吗，为什么不是 1 呢？</p>
<p>这里就要介绍 hashCode() 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public int hashCode()</div><div class="line"></div><div class="line">    返回该对象的哈希码值。支持此方法是为了提高哈希表（例如 java.util.Hashtable 提供的哈希表）的性能。</div><div class="line"></div><div class="line">    hashCode 的常规协定是：</div><div class="line"></div><div class="line">        在 Java 应用程序执行期间，在对同一对象多次调用 hashCode 方法时，必须一致地返回相同的整数，前提是将对象进行 equals 比较时所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。</div><div class="line">        如果根据 equals(Object) 方法，两个对象是相等的，那么对这两个对象中的每个对象调用 hashCode 方法都必须生成相同的整数结果。</div><div class="line">        如果根据 equals(java.lang.Object) 方法，两个对象不相等，那么对这两个对象中的任一对象上调用 hashCode 方法不 要求一定生成不同的整数结果。但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。 </div><div class="line"></div><div class="line">    实际上，由 Object 类定义的 hashCode 方法确实会针对不同的对象返回不同的整数。（这一般是通过将该对象的内部地址转换成一个整数来实现的，但是 JavaTM 编程语言不需要这种实现技巧。）</div><div class="line"></div><div class="line">    返回：</div><div class="line">        此对象的一个哈希码值。</div><div class="line">    另请参见：</div><div class="line">        equals(java.lang.Object), Hashtable</div></pre></td></tr></table></figure>
<p>当我们使用用哈希表实现的工具类时，这个方法的价值就体现了。由于之前我们没有重写这个方法，把Student对象存入HashSet时还是按照之前系统默认的方式计算他们的hash值，导致Set中存在两个Student对象。</p>
<p>下面做一个简单修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">   <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.id = id;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">null</span> == o) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// 有时候instanceof不合适的时候可以考虑用getClass()方法</span></div><div class="line">       <span class="keyword">if</span> (getClass() != o.getClass()) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Student) &#123;</div><div class="line">           Student std = (Student) o;</div><div class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.id == std.id) &#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.equals(o);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.id; </div><div class="line">       <span class="comment">// return super.hashCode();</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// ... getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再运行下面的测试，你会发现和我们期待的一致了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studentSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">   Student st1 = <span class="keyword">new</span> Student(<span class="number">2333</span>);</div><div class="line">   Student st2 = <span class="keyword">new</span> Student(<span class="number">2333</span>);</div><div class="line"></div><div class="line">   Set&lt;Student&gt; stds = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">   stds.add(st1);</div><div class="line">   stds.add(st2);</div><div class="line">   assertEquals(<span class="number">1</span>, stds.size());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Demo中直接将id作为hashcode返回不是一种好的生成方式，具体的生成规则请参考上面的注释。</p>
<h2 id="0x03-Demo"><a href="/1970/01/01/[Java](==)与(equals)/#0x03-Demo" class="headerlink" title="0x03 Demo"></a>0x03 Demo</h2><p>再来看一个demo：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">   String str1 = <span class="string">"abc"</span>;</div><div class="line">   String str2 = <span class="string">"abc"</span>;</div><div class="line">   String str3 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div><div class="line"></div><div class="line">   System.out.println(str1 == str2);</div><div class="line">   System.out.println(str1 == str3);</div><div class="line"></div><div class="line">   assertEquals(str1, str2);</div><div class="line">   assertEquals(str1, str3);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果会怎样？没错，测试通过，输出：true，false。</p>
<p>首先我们来看下String类重写的equals()和hashCOde():</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (other == <span class="keyword">this</span>) &#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (other <span class="keyword">instanceof</span> String) &#123;</div><div class="line">       String s = (String)other;</div><div class="line">       <span class="keyword">int</span> count = <span class="keyword">this</span>.count;</div><div class="line">       <span class="keyword">if</span> (s.count != count) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (hashCode() != s.hashCode()) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">           <span class="keyword">if</span> (charAt(i) != s.charAt(i)) &#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> hash = hashCode;</div><div class="line">   <span class="keyword">if</span> (hash == <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">           hash = <span class="number">31</span> * hash + charAt(i);</div><div class="line">       &#125;</div><div class="line">       hashCode = hash;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面可以看出，String类重写了这两个方法，equals()中的逻辑是比较字符串中每个字符是否相同。因此 str1, str2, str3相同就可以理解了。<br>对于 <code>str1 == str2</code> 和 <code>str1 != str3</code> 这涉及到不同字符串创建方法。</p>
<blockquote>
<p><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.md" target="_blank" rel="external">在开始这个例子之前，同学们需要知道JVM处理String的一些特性。Java的虚拟机在内存中开辟出一块单独的区域，用来存储字符串对象，这块内存区域被称为字符串缓冲池。当使用 String a = “abc”这样的语句进行定义一个引用的时候，首先会在字符串缓冲池中查找是否已经相同的对象，如果存在，那么就直接将这个对象的引用返回给a，如果不存在，则需要新建一个值为”abc”的对象，再将新的引用返回a。String a = new String(“abc”);这样的语句明确告诉JVM想要产生一个新的String对象，并且值为”abc”，于是就在堆内存中的某一个小角落开辟了一个新的String对象。</a> </p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-两种比较方法&quot;&gt;&lt;a href=&quot;/1970/01/01/[Java](==)与(equals)/#0x01-两种比较方法&quot; class=&quot;headerlink&quot; title=&quot;0x01 两种比较方法&quot;&gt;&lt;/a&gt;0x01 两种比较方法&lt;/h2&gt;&lt;ul&gt;

    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://ttdevs.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>「Android-SQLite」0x02从加载本地数据库开始</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid-SQLite%5D0x02%E4%BB%8E%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%A7%8B/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-引言"><a href="/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x00-引言" class="headerlink" title="0x00 引言"></a>0x00 引言</h2><blockquote>
<p>好久以前就写了，但是一直拖拖拉拉的，在草稿箱里放了两个星期还没写完，想想这样托下去又要废掉了，还是分开来吧，写多少是多少。</p>
</blockquote>
<p>Android的SQLite数据库简单使用一段时间了，现在想抽些时间总结下，不然总感觉很乱。</p>
<h2 id="0x01-SQLiteExpert"><a href="/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x01-SQLiteExpert" class="headerlink" title="0x01 SQLiteExpert"></a>0x01 SQLiteExpert</h2><p>先说一个工具，<code>SQLite Expert</code>，一款SQLite数据库管理工具，下载地址： <a href="http://www.sqliteexpert.com/" target="_blank" rel="external">http://www.sqliteexpert.com/</a>，Personal Edition是免费的，日常使用基本足够，需要专业版的可以自行网上找寻。当然，其他免费的工具还有很多，如：<code>SQLite Database Browser</code>、 <code>SQLiteManager</code> 等。<br><img src="http://img.blog.csdn.net/20130916222611000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="0x02-加载本地数据库"><a href="/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x02-加载本地数据库" class="headerlink" title="0x02 加载本地数据库"></a>0x02 加载本地数据库</h2><p>假设我们SDCard的根目录上已经存在一个数据库，名称为：ChinaCity.db。这时候我们可以这样操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readDataBaseFromSDCard</span><span class="params">()</span> </span>&#123;</div><div class="line">    String dbPath = Environment.getExternalStorageDirectory() + <span class="string">"/ChinaCity.db"</span>;</div><div class="line"></div><div class="line">    File dbFile = <span class="keyword">new</span> File(dbPath);</div><div class="line">    <span class="keyword">if</span> (!dbFile.exists()) &#123;</div><div class="line">        Toast.makeText(getApplicationContext(), <span class="string">"请先点击拷贝到SDCard"</span>, Toast.LENGTH_LONG).show();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    openOrCreateDatabase(dbPath, SQLiteDatabase.CREATE_IF_NECESSARY, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    SQLiteDatabase db = SQLiteDatabase.openDatabase(dbPath, <span class="keyword">null</span>, SQLiteDatabase.OPEN_READWRITE);</div><div class="line">    <span class="comment">// db = openOrCreateDatabase(dbPath, SQLiteDatabase.OPEN_READWRITE, null);</span></div><div class="line"></div><div class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">    Cursor cursor = db.rawQuery(<span class="string">"select * from china_provinces_code"</span>, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">        <span class="keyword">int</span> id = cursor.getInt(cursor.getColumnIndex(<span class="string">"_id"</span>));</div><div class="line">        String name = cursor.getString(cursor.getColumnIndex(<span class="string">"name"</span>));</div><div class="line">        sb.append(id + <span class="string">":"</span> + name + <span class="string">" \n"</span>);</div><div class="line">    &#125;</div><div class="line">    System.out.println(sb.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先用SQLiteDatabase的一个静态方法openDatabase打开一个数据库，第一个参数为数据库文件路径，第二个参数一般为null，第三个参数为打开数据库的方式，由于只需要读取数据，所以我们选择 <code>SQLiteDatabase.OPEN_READONLY</code>，此种方式的好处是数据库存在的话就不会出错；另外一种为 <code>SQLiteDatabase.OPEN_READWRITE</code>，以读写的方式打开。执行上面代码，我们会看与上图信息相同的：</p>
<p><img src="http://img.blog.csdn.net/20130916225300890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<p>开发的时候，我们可能会需要一些初始化数据，比如城市代码信息，这样我们就可以事先创建好一个数据库，写入初始数据，将其放入自己的apk中一起分发。这个时候我们就可以直接从资源文件中读取这个数据库文件写入到应用的数据库目录或者SDCard中，然后就可以对其操作，拷贝可以这样操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 拷贝资源中数据库</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> where 1SDCARD,2LOCAL</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyDataBase</span><span class="params">(<span class="keyword">int</span> where)</span> </span>&#123;</div><div class="line">    <span class="comment">// 每个应用都有一个数据库目录，他位于 /data/data/packagename/databases/目录下</span></div><div class="line">    String packageName = <span class="string">"com.ttdevs.citydata"</span>; <span class="comment">// xml中配置的</span></div><div class="line">    String dbName = <span class="string">"ChinaCity.db"</span>;</div><div class="line">    String dbPath = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (where == <span class="number">1</span>) &#123; <span class="comment">// sdcard</span></div><div class="line">        dbPath = Environment.getExternalStorageDirectory() + File.separator + dbName;</div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// local, TODO Environment.getDataDirectory()</span></div><div class="line">        dbPath = <span class="string">"/data/data/"</span> + packageName + <span class="string">"/databases/"</span> + dbName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (where == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">new</span> File(<span class="string">"/data/data/"</span> + packageName + <span class="string">"/databases/"</span>).mkdirs();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (where == <span class="number">1</span> &amp;&amp; !Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) &#123;</div><div class="line">        <span class="keyword">return</span>; <span class="comment">// 未挂载外部存储，拷贝到内部不用判断</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    File dbFile = <span class="keyword">new</span> File(dbPath);</div><div class="line">    <span class="keyword">if</span> (dbFile.exists()) &#123;</div><div class="line">        dbFile.delete();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        dbFile.createNewFile();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e1) &#123;</div><div class="line">        e1.printStackTrace();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        InputStream is = getResources().getAssets().open(dbName);</div><div class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(dbPath);</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> ((length = is.read(buffer)) &gt; <span class="number">0</span>) &#123;</div><div class="line">            os.write(buffer, <span class="number">0</span>, length);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        os.flush();</div><div class="line">        os.close();</div><div class="line">        is.close();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    Toast.makeText(getApplicationContext(), <span class="string">"拷贝成功"</span>, Toast.LENGTH_LONG).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码不是很严谨，凑活着看哈。经过以上步骤，我们就可以开始使用数据库，数据库的常用操作，在接下来的介绍中继续。</p>
<h2 id="0x03-下载"><a href="/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x03-下载" class="headerlink" title="0x03 下载"></a>0x03 下载</h2><p>ChinaCity.db数据库： <a href="http://download.csdn.net/detail/ttdevs/6332431" target="_blank" rel="external">下载</a></p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-引言&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x00-引言&quot; class=&quot;headerlink&quot; title=&quot;0x00 引言&quot;&gt;&lt;/a&gt;0x00 引言&lt;/h2&gt;&lt;blockquot
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
      <category term="SQLite" scheme="https://ttdevs.github.io/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>「Android-SQLite」0x01创建自己的数据库</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid-SQLite%5D0x01%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android-SQLite]0x01创建自己的数据库/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-创建自己的数据库"><a href="/1970/01/01/[Android-SQLite]0x01创建自己的数据库/#0x01-创建自己的数据库" class="headerlink" title="0x01 创建自己的数据库"></a>0x01 创建自己的数据库</h2><p>大多数情况，我们还是需要自己去维护一个数据库，常见的包括数据库的创建，升级，销毁等操作。 android提供了SQLiteOpenHelper抽象类，我们创建SQLiteOpenHelper的实现类，重写他的onCreate(), onUpgrade() 或者 onOpen()方法，对数据库进行管理。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_NAME = <span class="string">"ChinaCity.db"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DATABASE_VERSION = <span class="number">1</span>; <span class="comment">// Version must be &gt;= 1</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataBaseOpenHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, DATABASE_NAME, <span class="keyword">null</span>, DATABASE_VERSION);</div><div class="line">        System.out.println(<span class="string">"DataBaseOpenHelper"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataBaseOpenHelper</span><span class="params">(Context context, <span class="keyword">int</span> version)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, DATABASE_NAME, <span class="keyword">null</span>, version);</div><div class="line">        System.out.println(<span class="string">"DataBaseOpenHelper version"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!db.isReadOnly()) &#123;</div><div class="line">            db.execSQL(<span class="string">"PRAGMA foreign_keys = ON;"</span>); <span class="comment">// Enable foreign key constraints </span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// create table test(id integer references students(id),score integer check (score&lt;=100 and score&lt;=0),primary key(id,score))</span></div><div class="line">        <span class="keyword">super</span>.onOpen(db);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        CityData.createTable(db);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">        CityData.dropTable(db);</div><div class="line">        CityData.createTable(db);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CityData</span> <span class="keyword">implements</span> <span class="title">BaseColumns</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_TEXT = <span class="string">" text "</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_INTEGER = <span class="string">" integer "</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMMA_SEP = <span class="string">","</span>;</div><div class="line"></div><div class="line">        <span class="comment">// *******************************china_city_code***********************************</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_NAME_CITY = <span class="string">"china_city_code"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_PROVINCE = <span class="string">"province"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_CITY = <span class="string">"city"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_COUNTY = <span class="string">"county"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_CODE = <span class="string">"code"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_CREATE_CITY = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + TABLE_NAME_CITY + <span class="string">" ("</span> +</div><div class="line">                _ID + TYPE_INTEGER + <span class="string">" PRIMARY KEY AUTOINCREMENT, "</span> +</div><div class="line">                COLUMN_NAME_PROVINCE + TYPE_TEXT + COMMA_SEP +</div><div class="line">                COLUMN_NAME_CITY + TYPE_TEXT + COMMA_SEP +</div><div class="line">                COLUMN_NAME_COUNTY + TYPE_TEXT + COMMA_SEP +</div><div class="line">                COLUMN_NAME_CODE + TYPE_INTEGER</div><div class="line">                + <span class="string">" )"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_CREATE_CITY_INDEX = <span class="string">"CREATE UNIQUE INDEX IF NOT EXISTS "</span> + COLUMN_NAME_CODE + <span class="string">" ON "</span> + TABLE_NAME_CITY + <span class="string">"("</span> + COLUMN_NAME_CODE + <span class="string">")"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_DELETE_CITY = <span class="string">"DROP TABLE IF EXISTS "</span> + TABLE_NAME_CITY;</div><div class="line"></div><div class="line">        <span class="comment">// *******************************china_provinces_code*******************************</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_NAME_PROVINCE = <span class="string">"china_provinces_code"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_ID = <span class="string">"id"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_NAME = <span class="string">"name"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_CREATE_PROVINCE = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + TABLE_NAME_PROVINCE + <span class="string">" ("</span> +</div><div class="line">                _ID + TYPE_INTEGER + <span class="string">" PRIMARY KEY AUTOINCREMENT, "</span> +</div><div class="line">                COLUMN_NAME_ID + TYPE_INTEGER + COMMA_SEP +</div><div class="line">                COLUMN_NAME_NAME + TYPE_TEXT</div><div class="line">                + <span class="string">" )"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_DELETE_PROVINCE = <span class="string">"DROP TABLE IF EXISTS "</span> + TABLE_NAME_PROVINCE;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">            db.execSQL(SQL_CREATE_PROVINCE);</div><div class="line">            db.execSQL(SQL_CREATE_CITY);</div><div class="line">            db.execSQL(SQL_CREATE_CITY_INDEX);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dropTable</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">            db.execSQL(SQL_DELETE_PROVINCE);</div><div class="line">            db.execSQL(SQL_DELETE_CITY);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造函数中我们需要传入四个参数，第一个参数为上下文，第二个为数据库名称，第三个参数一般为null，第四个为数据库的版本。onCreate()方法中主要执行数据库的创建操作。onUpgrade()方法主要在数据库升级时调用，源码 <code>android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean writable)</code> 中这样描述：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> SQLiteDatabase <span class="title">getDatabaseLocked</span><span class="params">(<span class="keyword">boolean</span> writable)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (mDatabase != <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">if</span> (!mDatabase.isOpen()) &#123;</div><div class="line">           <span class="comment">// Darn!  The user closed the database by calling mDatabase.close().</span></div><div class="line">           mDatabase = <span class="keyword">null</span>;</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!writable || !mDatabase.isReadOnly()) &#123;</div><div class="line">           <span class="comment">// The database is already open for business.</span></div><div class="line">           <span class="keyword">return</span> mDatabase;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (mIsInitializing) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"getDatabase called recursively"</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   SQLiteDatabase db = mDatabase;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">       mIsInitializing = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (db != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (writable &amp;&amp; db.isReadOnly()) &#123;</div><div class="line">               db.reopenReadWrite();</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mName == <span class="keyword">null</span>) &#123;</div><div class="line">           db = SQLiteDatabase.create(<span class="keyword">null</span>);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               <span class="keyword">if</span> (DEBUG_STRICT_READONLY &amp;&amp; !writable) &#123;</div><div class="line">                   <span class="keyword">final</span> String path = mContext.getDatabasePath(mName).getPath();</div><div class="line">                   db = SQLiteDatabase.openDatabase(path, mFactory,</div><div class="line">                           SQLiteDatabase.OPEN_READONLY, mErrorHandler);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   db = mContext.openOrCreateDatabase(mName, mEnableWriteAheadLogging ?</div><div class="line">                           Context.MODE_ENABLE_WRITE_AHEAD_LOGGING : <span class="number">0</span>,</div><div class="line">                           mFactory, mErrorHandler);</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">catch</span> (SQLiteException ex) &#123;</div><div class="line">               <span class="keyword">if</span> (writable) &#123;</div><div class="line">                   <span class="keyword">throw</span> ex;</div><div class="line">               &#125;</div><div class="line">               Log.e(TAG, <span class="string">"Couldn't open "</span> + mName</div><div class="line">                       + <span class="string">" for writing (will try read-only):"</span>, ex);</div><div class="line">               <span class="keyword">final</span> String path = mContext.getDatabasePath(mName).getPath();</div><div class="line">               db = SQLiteDatabase.openDatabase(path, mFactory,</div><div class="line">                       SQLiteDatabase.OPEN_READONLY, mErrorHandler);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       onConfigure(db);</div><div class="line"></div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> version = db.getVersion();</div><div class="line">       <span class="keyword">if</span> (version != mNewVersion) &#123;</div><div class="line">           <span class="keyword">if</span> (db.isReadOnly()) &#123;</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> SQLiteException(<span class="string">"Can't upgrade read-only database from version "</span> +</div><div class="line">                       db.getVersion() + <span class="string">" to "</span> + mNewVersion + <span class="string">": "</span> + mName);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           db.beginTransaction();</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               <span class="keyword">if</span> (version == <span class="number">0</span>) &#123;</div><div class="line">                   onCreate(db);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="keyword">if</span> (version &gt; mNewVersion) &#123;</div><div class="line">                       onDowngrade(db, version, mNewVersion);</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       onUpgrade(db, version, mNewVersion);</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">               db.setVersion(mNewVersion);</div><div class="line">               db.setTransactionSuccessful();</div><div class="line">           &#125; <span class="keyword">finally</span> &#123;</div><div class="line">               db.endTransaction();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       onOpen(db);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (db.isReadOnly()) &#123;</div><div class="line">           Log.w(TAG, <span class="string">"Opened "</span> + mName + <span class="string">" in read-only mode"</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       mDatabase = db;</div><div class="line">       <span class="keyword">return</span> db;</div><div class="line">   &#125; <span class="keyword">finally</span> &#123;</div><div class="line">       mIsInitializing = <span class="keyword">false</span>;</div><div class="line">       <span class="keyword">if</span> (db != <span class="keyword">null</span> &amp;&amp; db != mDatabase) &#123;</div><div class="line">           db.close();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当当前版本小于新版本时，会调用onUpgrade()方法。所以上面SQLiteOpenHelper的实现思路为：构造方法中初始化一下数据库的必要参数，如数据库版本，数据库名等；在onCreate()方法中创建数据库的表；当我们需要对数据库进行升级的时候，修改数据库的版本号，这样就可以触发onUpgrade()方法，这里我们做最简单的处理：drop掉所有表然后重新创建。当然我们还可以在onOpen()方法中做一下数据库的设置操作，如设置外键生效。这样我们的数据库管理类就实现了。</p>
<h2 id="0x02-拿到数据库对象"><a href="/1970/01/01/[Android-SQLite]0x01创建自己的数据库/#0x02-拿到数据库对象" class="headerlink" title="0x02 拿到数据库对象"></a>0x02 拿到数据库对象</h2><p>有了数据库管理类，对数据库进行操作我们最好封装一个操作类，在这个类中对数据库中的表进行操作。下面的代码也是网上比较常见的（对于数据库对象，也有处理成单例）。先看代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DataBaseOpenHelper dbHelper;</div><div class="line">    <span class="keyword">private</span> SQLiteDatabase db;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataBaseManager</span><span class="params">(Context context)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dbHelper = <span class="keyword">new</span> DataBaseOpenHelper(context);</div><div class="line">        <span class="keyword">this</span>.db = dbHelper.getWritableDatabase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CopyOfDataBaseManager</span><span class="params">(Context context, <span class="keyword">int</span> version)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dbHelper = <span class="keyword">new</span> DataBaseOpenHelper(context, version);</div><div class="line">        <span class="keyword">this</span>.db = dbHelper.getWritableDatabase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeDataBase</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (db != <span class="keyword">null</span> &amp;&amp; db.isOpen()) &#123;</div><div class="line">            db.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInitData</span><span class="params">(String tableName)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        String sql = <span class="string">"select count(*) from "</span> + tableName;</div><div class="line">        Cursor cursor = db.rawQuery(sql, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</div><div class="line">            count = cursor.getInt(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearTable</span><span class="params">(String tableName)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"delete from "</span> + tableName + <span class="string">";"</span>;</div><div class="line">        sql += <span class="string">"update sqlite_sequence set seq = 0 where name = "</span> + tableName + <span class="string">";"</span>;</div><div class="line">        db.execSQL(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertProvinceData</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"insert into "</span> + CityData.TABLE_NAME_PROVINCE + <span class="string">" ("</span> + CityData.COLUMN_NAME_ID + <span class="string">","</span></div><div class="line">                + CityData.COLUMN_NAME_NAME + <span class="string">") VALUES("</span> + id + <span class="string">",'"</span> + name + <span class="string">"');"</span>;</div><div class="line">        db.execSQL(sql);</div><div class="line">        System.out.println(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// TODO其他一下对表进行的操作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先我们创建一个DataBaseOpenHelper的实例，然后通过它拿到SQLiteDatabase对象，这样我们就可以对数据库进行操作了。DataBaseOpenHelper有两种get方法：<code>getWritableDatabase()</code> 和 <code>getReadableDatabase()</code>，大家都应该知道着两种方法的含义，<code>getReadableDatabase()</code> 拿到的数据库对象不可以进行插入修改等写操作。在这两种方法的说明在我们可能需要注意几点：</p>
<ul>
<li>当我们没有申请数据库操作的权限或者磁盘已满，会报错</li>
<li>数据库的更新可能需要很长时间，因此我们不能在主线程中调用</li>
<li>当我们不再对数据库进行操作时，别忘记关闭数据库</li>
</ul>
<p>接下来就是数据库的常用操作了</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-创建自己的数据库&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android-SQLite]0x01创建自己的数据库/#0x01-创建自己的数据库&quot; class=&quot;headerlink&quot; title=&quot;0x01 创建自己的数据库&quot;&gt;&lt;/a&gt;0x01 创
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
      <category term="SQLite" scheme="https://ttdevs.github.io/tags/SQLite/"/>
    
  </entry>
  
  <entry>
    <title>「Android」0x01本地数据安全尝试SQLCipher</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5D0x01%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%B0%9D%E8%AF%95SQLCipher/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>先纪念下，从今天开始，又开始写博客啦啦啦啦。话说基本上一年多没好好写博客了。回想起来，和之前写博客时相比，还是差距好大。好吧，废话不说了，进入正题。</p>
<p>首先，开篇打算跟大家分享下你遇到的或者将来可能遇到的问题：本地数据的安全问题。多数情况，我们可能没有去考虑app的本地数据安全问题，一来公司没这样的要求，二来我们可能也没有非常需要保密的数据。那现在思考一下为将来做储备。</p>
<p>面试的时候，可能常常会被问到这样一个问题：Android的数据存储有哪几种方式？ 对于这个问题，<a href="http://developer.android.com/guide/topics/data/data-storage.html" target="_blank" rel="external">Android的官方文档</a> 有回答：</p>
<ul>
<li>Shared Preferences</li>
<li>Internal Storage</li>
<li>External Storage</li>
<li>SQLite Databases</li>
<li>Network Connection</li>
</ul>
<p>这几种方式就不用多说了。第一种以key-value的方式存储在我们的设备内部；第二种第三种简单理解为文件存储；第四种本地数据库存储（这四种都属本地存储）。最后一种方式（暂且算是一种方式吧）不在我们考虑范围之内。现在假设一个最坏的环境：设备已经root，任何本地数据都可以被直接或者间接拿到。这时候我们自然想到的就是对我们的数据进行加密。</p>
<h2 id="0x01"><a href="/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>以上是开场，下面进入第一部分：本地数据库加密。<br>先回顾下本地数据库，root以后，我们可以在下面的位置找到它：<code>/data/data/you.package/databases</code>，例如我们demo的数据库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@t03g:/data/data/com.ttdevs.demo/databases # ls</div><div class="line">normal_user.db</div><div class="line">normal_user.db-journal</div><div class="line">user.db</div><div class="line">root@t03g:/data/data/com.ttdevs.demo/databases #</div><div class="line">``` </div><div class="line"></div><div class="line">知道了它的位置，接下来我们就可以直接将这些数据库文件拷贝出来，然后使用SQLite浏览器浏览。</div><div class="line">我们选用网上一个开源的方案：[SQLCipher][2]（[GitHub地址][3]）。SQLCipher是在SQLite的基础上封装了加密功能，使用上和直接使用SQLite基本相同。</div><div class="line"></div><div class="line"></div><div class="line">## 0x02</div><div class="line"></div><div class="line">首先，按照说明，我们引入SQLCipher：</div><div class="line"></div><div class="line">``` gradle</div><div class="line">compile &apos;net.zetetic:android-database-sqlcipher:3.3.1-2@aar&apos;</div></pre></td></tr></table></figure>
<p>接下来就是编写我们的数据库代码了。先创建一个DatabaseHelper：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> net.sqlcipher.database.SQLiteDatabase;</div><div class="line"><span class="keyword">import</span> net.sqlcipher.database.SQLiteOpenHelper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_NAME = <span class="string">"user.db"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DATABASE_VERSION = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE = <span class="string">"user_info"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"name"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AGE = <span class="string">"age"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ICON = <span class="string">"icon"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN = <span class="string">"token"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatabaseOpenHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, DATABASE_NAME, <span class="keyword">null</span>, DATABASE_VERSION);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"create table "</span> + TABLE +</div><div class="line">                <span class="string">" (_id integer primary key autoincrement, "</span> +</div><div class="line">                NAME + <span class="string">" text, "</span> +</div><div class="line">                AGE + <span class="string">" integer, "</span> +</div><div class="line">                ICON + <span class="string">" blob, "</span> +</div><div class="line">                TOKEN + <span class="string">" text not null);"</span>;</div><div class="line">        Log.d(<span class="string">"EventsData"</span>, <span class="string">"onCreate: "</span> + sql);</div><div class="line">        db.execSQL(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (oldVersion &lt; newVersion) &#123;</div><div class="line">            <span class="comment">// TODO</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>注意，此处的SQLiteOpenHelper和SQLiteDatabase都来自net.sqlcipher.database包。</code></p>
<p>为了便于对比，我又写了一个相同逻辑使用<code>android.database.sqlite.SQLiteOpenHelper</code>的Helper作对比。接下来使用编写数据库操作逻辑。使用中SQLiteCipher区别是打开数据库的时候需要传入用于加密的KEY。下面是测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlcipherActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"&gt;&gt;&gt;&gt;&gt;"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CIPHER_KEY = <span class="string">"123abc_!@#$%^&amp;*"</span>;</div><div class="line">    <span class="keyword">private</span> DatabaseOpenHelper mOpenHelper;</div><div class="line">    <span class="keyword">private</span> NormalDatabaseOpenHelper mNormalHelper;</div><div class="line">...</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeData</span><span class="params">(<span class="keyword">boolean</span> isCipher)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isCipher) &#123;</div><div class="line">            log(<span class="string">"Cipher:101:"</span> + System.currentTimeMillis());</div><div class="line">            SQLiteDatabase db = mOpenHelper.getWritableDatabase(PASSWORD_KEY);</div><div class="line">            log(<span class="string">"Cipher:102:"</span> + System.currentTimeMillis());</div><div class="line">            String name = <span class="string">"Cipher"</span> + (++mIndex);</div><div class="line">            ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">            values.put(DatabaseOpenHelper.NAME, name);</div><div class="line">            values.put(DatabaseOpenHelper.AGE, mIndex);</div><div class="line">            values.put(DatabaseOpenHelper.TOKEN, PASSWORD_KEY);</div><div class="line">            values.put(DatabaseOpenHelper.ICON, name.getBytes());</div><div class="line">            log(<span class="string">"Cipher:11:"</span> + System.currentTimeMillis());</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                db.beginTransaction();</div><div class="line">                db.insert(DatabaseOpenHelper.TABLE, <span class="keyword">null</span>, values);</div><div class="line">                db.setTransactionSuccessful();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                db.endTransaction();</div><div class="line">            &#125;</div><div class="line">            log(<span class="string">"Cipher:12:"</span> + System.currentTimeMillis());</div><div class="line">            db.close();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readData</span><span class="params">(<span class="keyword">boolean</span> isCipher)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isCipher) &#123;</div><div class="line">            SQLiteDatabase db = mOpenHelper.getReadableDatabase(PASSWORD_KEY);</div><div class="line">            Cursor cursor = db.query(DatabaseOpenHelper.TABLE, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">                String name = cursor.getString(cursor.getColumnIndex(DatabaseOpenHelper.NAME));</div><div class="line">                <span class="keyword">int</span> age = cursor.getInt(cursor.getColumnIndex(DatabaseOpenHelper.AGE));</div><div class="line">                String token = cursor.getString(cursor.getColumnIndex(DatabaseOpenHelper.TOKEN));</div><div class="line">                String result = String.format(<span class="string">"Cipher&gt;&gt;&gt;&gt; name:%s, age:%d, token:%s"</span>, name, age, token);</div><div class="line">                log(result);</div><div class="line">            &#125;</div><div class="line">            db.close();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            android.database.sqlite.SQLiteDatabase ndb = mNormalHelper.getReadableDatabase();</div><div class="line">            android.database.Cursor cursor = ndb.query(NormalDatabaseOpenHelper.TABLE, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">                String name = cursor.getString(cursor.getColumnIndex(DatabaseOpenHelper.NAME));</div><div class="line">                <span class="keyword">int</span> age = cursor.getInt(cursor.getColumnIndex(DatabaseOpenHelper.AGE));</div><div class="line">                String token = cursor.getString(cursor.getColumnIndex(DatabaseOpenHelper.TOKEN));</div><div class="line">                String result = String.format(<span class="string">"Normal&gt;&gt;&gt;&gt; name:%s, age:%d, token:%s"</span>, name, age, token);</div><div class="line">                log(result);</div><div class="line">            &#125;</div><div class="line">            ndb.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，跑一下我们的测试代码，得到下面的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">02-19 13:49:41.596 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: &gt;&gt;&gt;&gt;&gt; Cipher &gt;&gt;&gt;&gt;&gt;</div><div class="line">02-19 13:49:41.596 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher:101:1455860981597</div><div class="line">02-19 13:49:41.971 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher:102:1455860981974</div><div class="line">02-19 13:49:41.971 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher:11:1455860981974</div><div class="line">02-19 13:49:41.981 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher:12:1455860981983</div><div class="line">02-19 13:49:42.201 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher&gt;&gt;&gt;&gt; name:Cipher1, age:1, token:123abc_!@#$%^&amp;*</div><div class="line">02-19 13:49:42.201 24884-24884/com.ttdevs.demo I/Choreographer: Skipped 35 frames!  The application may be doing too much work on its main thread.</div><div class="line">02-19 13:49:49.471 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: &gt;&gt;&gt;&gt;&gt; Noremal &gt;&gt;&gt;&gt;&gt;</div><div class="line">02-19 13:49:49.476 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal:101:1455860989477</div><div class="line">02-19 13:49:49.521 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal:102:1455860989525</div><div class="line">02-19 13:49:49.521 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal:11:1455860989525</div><div class="line">02-19 13:49:49.531 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal:12:1455860989535</div><div class="line">02-19 13:49:49.541 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal&gt;&gt;&gt;&gt; name:Normal2, age:2, token:123abc_!@#$%^&amp;*</div></pre></td></tr></table></figure>
<p>通过简单的对比，我们发现，SQLCipher在打开写数据库的时候花费了375ms，时间大概是SQLite 45ms的8~9倍，所以我们在log中看到丢帧的提示。这就提示我们，简单的数据库操作，使用SQLite我们也可能需要考虑将其放在新的线程中。当然，这个测试对比不够完善，比如大文件写入，大量数据插入，事务等等，因此还需要更多、更详细的测试来检测SQLCipher的性能等，这里就暂不讨论了。</p>
<p>跑完上面的代码，我们来看看我们本地数据库中都创建了哪些东西：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@t03g:/data/data/com.ttdevs.demo/databases # ls</div><div class="line">normal_user.db</div><div class="line">normal_user.db-journal</div><div class="line">user.db</div><div class="line">root@t03g:/data/data/com.ttdevs.demo/databases #</div></pre></td></tr></table></figure>
<p>我们把这两个db文件拷贝到我们的电脑，看看里面有哪些东西。这里推荐一个工具：<a href="http://sqlitebrowser.org/" target="_blank" rel="external">sqlitebrowser</a>。打开他们的网站你会发现它有两个版本的：Standard和SQLCipher的。是的，你没看错，就是针对SQLCipher的。如果你使用Standard版本，你会发现无法打开我们加密后的user.db（当然你也可是试试其他方法）。使用SQLCipher版的，打开之前会要求输入我们加密的KEY，就是我们上面的<code>123abc_!@#$%^&amp;*</code>。这时候我们就可以看到原始的数据了，如下图：</p>
<p><img src="http://img.blog.csdn.net/20160219151008300" alt="Browser SQLCipher Data"></p>
<h2 id="0x03"><a href="/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>到这里，我们基本上已经见到了SQLCipher的使用。还没有结束，再来看一个问题：在创建项目开始，我尝试跑了下项目，apk的大小是1.4MB，在Gradle中引入SQLCipher之后，体积一下子飙到了8.7MB。呵呵呵~~ 这个体积的增加还是值得我们慎重的思考一下下的。</p>
<h2 id="0x04"><a href="/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>说了这么多，我们可以得到这样一个结论，使用SQLiteCipher可以对我们客户端的本地数据库进行加密，但是我们需要自己存一个加密KEY，如果我们能保存好这个KEY，那我们的数据基本是安全的。但是同时，我们可能需要考虑数据库加密过程中引入的新的问题，比如：apk体积的暴增，加密对性能的影响，加密KEY的保存等等。这些问题考虑好之后，我们就可以决定是否引入SQLCipher。</p>
<p>如果你对引入SQLiteCiper引起的新问题心存芥蒂，那接下来给大家推荐下一种方法。敬请期待：<a href="http://blog.csdn.net/ttdevs/" target="_blank" rel="external">Android本地数据安全尝试(中)</a></p>
<p>PS：<a href="https://github.com/ttdevs/Demo" target="_blank" rel="external">Github Demo</a></p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;先纪念下，从今天开始，又开始写博客啦啦
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」0x02本地数据安全尝试Conceal</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5D0x02%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%B0%9D%E8%AF%95Conceal/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]0x02本地数据安全尝试Conceal/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>上一篇我们提到使用SQLCipher对本地的数据进行加密。在保证数据安全的同时，我们又引入了一些新的问题，比如安装包体积的增加，数据存储过程中耗时增加，数据加密的粒度不可控等等。如果你接受不了这些问题，那我们还需寻找其他的加密方法。这里给大家推荐<a href="https://github.com/facebook/conceal" target="_blank" rel="external">Conceal</a></p>
<h2 id="0x01"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x01" class="headerlink" title="0x01"></a>0x01</h2><p><a href="https://github.com/facebook/conceal" target="_blank" rel="external">Conceal</a>是Facebook的一个开源项目，它可以高效的对大文件进行加密（当然对小数据加密也不是问题），同时对设备的性能和系统版本要求比较低。更具体的信息可参考<a href="https://facebook.github.io/conceal/" target="_blank" rel="external">这里</a>。</p>
<blockquote>
<p>Conceal doesn’t implement any crypto, but instead, it uses specific cryptographics algorithms from OpenSSL. Conceal attempts to manage memory efficiently between the native and Java heap. Conceal also uses fast modes like AES-GCM and HMAC-SHA1 by default.<br>OpenSSL is a very large library, and would increase the size of apps. Conceal ships with only a select number of encryption algorithms from OpenSSL which make it much smaller (85KB). </p>
</blockquote>
<h2 id="0x02"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x02" class="headerlink" title="0x02"></a>0x02</h2><h3 id="引用"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#引用" class="headerlink" title="引用"></a>引用</h3><p><code>compile &#39;com.facebook.conceal:conceal:1.0.1@aar&#39;</code></p>
<h3 id="关键代码"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><p>我们可以用其加密常见的数据类型，比如字符串，图片等。</p>
<ul>
<li>字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 加密</span></div><div class="line"><span class="keyword">byte</span>[] cipherText = mCrypto.encrypt(plainText, mEntity);</div><div class="line"><span class="comment">// 解密</span></div><div class="line"><span class="keyword">byte</span>[] plainText = mCrypto.decrypt(cipherText, mEntity);</div></pre></td></tr></table></figure>
<ul>
<li>大文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">OutputStream out = mCrypto.getCipherOutputStream(fileOS, mEntity);</div><div class="line"><span class="keyword">int</span> read = <span class="number">0</span>;</div><div class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line"><span class="keyword">while</span> ((read = sourceFile.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">    out.write(buffer, <span class="number">0</span>, read);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENTITY = <span class="string">"ttdevs"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == mCrypto) &#123;</div><div class="line">        mCrypto = <span class="keyword">new</span> Crypto(<span class="keyword">new</span> SharedPrefsBackedKeyChain(context), <span class="keyword">new</span> SystemNativeCryptoLibrary());</div><div class="line">        mEntity = <span class="keyword">new</span> Entity(ENTITY);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上三部分是我们使用Conceal的关键代码。首先，我们需要构造一个Crypto对象，这个对象需要传入两个参数，第一个是KeyChain，第二个是NativeCryptoLibrary。NativeCryptoLibrary我们使用系统默认的。KeyChain顾名思义，就是我们的加密key。例子中我们使用了SharedPrefsBackedKeyChain，通过查看源码，我们发现，它是将加密的key保存到SharedPreferences中的一个KeyChain的实现。</p>
<h3 id="测试"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#测试" class="headerlink" title="测试"></a>测试</h3><p>接下来我们来看看Conceal的表现如何。我写了一个简单的测试代码，由于比较长，就不贴了，具体可以参考<a href="https://github.com/ttdevs/Demo" target="_blank" rel="external">这里</a>，主要有三个部分：</p>
<ul>
<li>测试字符串加解密</li>
<li>测试加密数据的数据库读写</li>
<li>测试本地文件加解密</li>
</ul>
<p>界面如下：</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/app/image-conceal-string.png" alt="测试界面"></p>
<ul>
<li>字符串加解密</li>
</ul>
<p>字符串的读写如上图，加解密字符串<code>Hello world!</code>耗时都在3ms左右，这个时间应该是我们可以接受的。</p>
<p><code>PS:强势插入一个2B问题</code></p>
<blockquote>
<p>细心的你可能会想如果我们不用数据库，只是加密几个简单的数据，能不能将密文直接写入SharedPreferences中呢？告诉你我也是这么想的，而且去测试了，但是死活不成功，不成功，不成功……<br>我的思路是这样的：由于加密、加密结果、解密 三个操作参数都是byte，而SharedPreferences接受的参数是String类型，因此我们需要进行转换，<code>new String(bytes, &quot;utf-8&quot;)</code> 和 <code>string.getBytes(&quot;utf-8&quot;)</code> ， 当你这么做的时候，你会发现解密死活不成功。经历过无数个不眠之夜后，终于恍然大悟，原来这么转换是错误的！原因很简单，一个utf-8编码汉字是2bytes，如果我们的加密结果不足2byte，我们强转时不足部分就会被补齐，当再转换回来的时候就和原来的不一一样了。最后怎么解决呢？也很简单，用Base64对byte数组进行编码，具体怎么做可以参考Conceal源码中的SharedPrefsBackedKeyChain。</p>
</blockquote>
<ul>
<li>数据库读写</li>
</ul>
<p>这个时间就不做过多解读，数据库操作时间加加解密时间。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1456500607857: Begin transaction </div><div class="line">1456500607861: Insert: Hello world! </div><div class="line">1456500607865: Read: name:Hello world! token:Hello world! </div><div class="line">1456500607868: Read: name:Hello world! token:Hello world! </div><div class="line">1456500607871: Read: name:Hello world! token:Hello world! </div><div class="line">1456500607885: End transaction</div></pre></td></tr></table></figure>
<ul>
<li>文件加解密</li>
</ul>
<p>这个比较重要，如果我们有大文件加密的需求（比如前段时间微信的红包图片），对性能和效率要求就比较高了。</p>
<p>某一次加密数据：</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/app/image-conceal-file.png" alt="测试界面"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Encrpyt 1.png 1014KB 163ms</div><div class="line">Encrpyt 2.jpg 2078KB 336ms</div><div class="line">Encrpyt 3.jpg 3043KB 477ms</div><div class="line">Encrpyt 4.JPG 3811KB 560ms</div><div class="line">Encrpyt 5.JPG 4772KB 699ms</div><div class="line">Encrpyt 10.apk 10268KB 1281ms</div><div class="line">Encrpyt 10.gif 10421KB 671ms</div><div class="line">Encrpyt 21.apk 20962KB 1323ms</div></pre></td></tr></table></figure>
<p>某一次解密数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Decrpyt encrypt_1.png 1014KB 108ms</div><div class="line">Decrpyt encrypt_2.jpg 2078KB 177ms</div><div class="line">Decrpyt encrypt_3.jpg 3043KB 221ms</div><div class="line">Decrpyt encrypt_4.JPG 3811KB 270ms</div><div class="line">Decrpyt encrypt_5.JPG 4772KB 340ms</div><div class="line">Decrpyt encrypt_10.apk 10268KB 732ms</div><div class="line">Decrpyt encrypt_10.gif 10421KB 764ms</div><div class="line">Decrpyt encrypt_21.apk 20962KB 1468ms</div></pre></td></tr></table></figure>
<p>从上面的数据我们可以看到，加密多张大图并没有导致内存的增加，只是CPU使用率有所变化。加密1MB图片耗时160ms，加密20MB文件耗时1300ms多。解密数据的性能消耗类似。</p>
<h2 id="0x03"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x03" class="headerlink" title="0x03"></a>0x03</h2><h3 id="分析"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#分析" class="headerlink" title="分析"></a>分析</h3><p>了解了Conceal的基本情况，我们来对比下上面提到的使用SQLCipher遇到的问题。首先，Conceal只有85KB，这个大小是我们完全可以接受的，然后就是加密粒度，无论是数据库还是文件，我们都可以只真对需要的那部分加密，最后即使你选择将文件存入数据库，它的时间也只有正常数据库操作时间加Conceal的加解密时间。综上所述，Conceal应该是一个不错的选择。</p>
<h3 id="总结"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#总结" class="headerlink" title="总结"></a>总结</h3><p>我们再来想想这两篇文章中提到的加密方法：无论你选择哪一种，由于他们都采用了对称加密算法，虽然数据部分加密了，但是我们却需要维护一个秘钥，这个秘钥放在那里？SharedPreferences？数据库？本地文件？貌似进入了一个死循环，问题又回到了起点。分析了这么多，如果没有办法解决秘钥的问题，也都是白搭。怎么办？下一篇在进一步分析。敬请期待。</p>
<p><code>PS: 所有测试机器 魅族 MX4PRO 性能均衡模式</code></p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;上一篇我们提到使用SQLCipher对本地
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」0x03本地数据安全尝试JNI</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5D0x03%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%B0%9D%E8%AF%95JNI/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]0x03本地数据安全尝试JNI/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两篇，我们谈到了使用SQLCipher和Conceal对本地数据进行加密。由于都两种方法都采用了对称加密，因此我们需要自己管理加密的秘钥。这时你会发现，虽然对我们的数据进行了加密，但是我们却引入了新的问题。我们的加密方法很容易通过反编译apk获取到，那么，我们就需要安全的维护这个秘钥了。但遗憾的是，本地数据存储方式我们都已经讲述，并没有一种一劳永逸的安全保存方法，那么，我们的秘钥存在哪里合适呢？这个时候你可能会想到本地不行那我们存到服务器上吧，通过https进行传输。这样当然可以，通过一定的算法为每个人配置一个秘钥，需要的时候请求网络获取，然后对本地数据进行解密。但是这样也存在一个问题：本地保存的数据如果不联网就无法打开。那么，还有更好的方案吗？今天给大家介绍JNI。</p>
<h2 id="0x01"><a href="/1970/01/01/[Android]0x03本地数据安全尝试JNI/#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>NDK，JNI对于刚接触android开发的攻城狮来说是有较大的门槛的，但是为了实现我们更安全的保存数据，他可能是不错的选择。反编译过别人家app的你可能都遇到过这样的情况：一个个没无法查看代码逻辑的so文件。这些文件我们可以使用java代码调用，实现一些我们不知道内部逻辑但是会给我们一个结果功能。那么，我们把密码放到这些so中就可以更进一步提高我们本地数据的安全级别。</p>
<p>下面通过一个加单的demo来看看JNI的实现。</p>
<p>首先创建一个工具类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CipherUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"Cipher"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getCipherKey</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个类文件上点击右键，使用我们之前配置的javah工具生成头文件。之后我们会在和java目录同级的jni文件下看到一个.h文件，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="comment">/* Header for class com_ttdevs_ndk_CipherUtil */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_com_ttdevs_ndk_CipherUtil</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_com_ttdevs_ndk_CipherUtil</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     com_ttdevs_ndk_CipherUtil</div><div class="line"> * Method:    getCipherKey</div><div class="line"> * Signature: ()Ljava/lang/String;</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_ttdevs_ndk_CipherUtil_getCipherKey</span></span></div><div class="line">  <span class="params">(JNIEnv *, jclass)</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>然后在h文件的同级新建一个C++文件（右键&gt;New&gt;C/C++ Source file）,内容如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"QiniuConfig.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG <span class="meta-string">"System.out"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_ttdevs_ndk_CipherUtil.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_ttdevs_ndk_CipherUtil_getCipherKey</span><span class="params">(JNIEnv *env, jclass)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> (*env).NewStringUTF(<span class="string">"Hello World! getCipherKey"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们还需要创建两个文件，一个叫Android.mk，另一个叫Application.mk，他们都在jni目录下。</p>
<ul>
<li>Android.mk:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># http://developer.android.com/intl/zh-tw/ndk/guides/android_mk.html</div><div class="line"></div><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE := Cipher</div><div class="line">LOCAL_SRC_FILES := Cipher.cpp</div><div class="line">LOCAL_LDLIBS += -llog</div><div class="line"></div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>
<ul>
<li>Application.mk</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># http://developer.android.com/intl/zh-tw/ndk/guides/application_mk.html</div><div class="line"></div><div class="line"># APP_STL := stlport_static</div><div class="line">APP_STL := gnustl_static</div><div class="line">APP_CPPFLAGS := -frtti -std=c++11</div><div class="line">APP_CFLAGS += -Wno-error=format-security</div><div class="line"></div><div class="line">APP_ABI := all</div></pre></td></tr></table></figure>
<p>还没有完，我们还需要修改当前Project或者Module的gradle.build文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion 23</div><div class="line">    buildToolsVersion &quot;23.0.2&quot;</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion 16</div><div class="line">        targetSdkVersion 23</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line"></div><div class="line">        ndk &#123;</div><div class="line">            moduleName &quot;ndkutil&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sourceSets.main &#123;</div><div class="line">        jni.srcDirs = []</div><div class="line">        jniLibs.srcDir &quot;libs&quot;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完成这些，我们就可以进行编译了。在当前Project（Module）上点击右键，使用之前配置的ndk-build工具进行编译，如果没有问题，我们会在libs目录下看到生产的so文件。好了，最后我们可以编写测试代码了：在java直接调用刚才创建的CipherUtil即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span>, CipherUtil.getCipherKey());</div></pre></td></tr></table></figure>
<p>运行上面代码，我们可以在log中看到输出的字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello World! getCipherKey</div></pre></td></tr></table></figure>
<h2 id="0x02"><a href="/1970/01/01/[Android]0x03本地数据安全尝试JNI/#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>上述demo中，我们只是简单的返回一个字符串，要实现更安全，我们可以将此方法写的更复杂，比如获取app的签名，获取设备的硬件信息进行复杂的组合，以保障最终生成的秘钥的唯一性和安全性（更难伪造），这里有一个<a href="https://github.com/MasonLiuChn/AndroidUltimateEncrypt" target="_blank" rel="external">demo</a>可以参考。</p>
<p>写到这里，可能又有人会问到：其实so文件也不是很全，可以通过对汇编的分析得到里面的代码逻辑。当然，高手是可以做到对so文件进行分析的，但是so还是可以阻隔大部分的反编译人员。如果我们能把getCipherKey实现的更好，也会增加破解的成本。另外，so还有一个被盗用的问题，就是别人直接调用我们的so，这个问题也可以通过一定的代码逻辑来避免。之后会继续讲解。</p>
<p>最后再说一点，对于秘钥，我们最终还会被载入我们的内存，如果直接dump我们的内存，会是一个人什么样的结果呢？</p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两篇，我们谈到了使用SQLCipher和Conceal对本地数据进行加密。由于都两种方法都采用了对称加密，因此我们需要自己管理加密的秘钥。这时你会发现，虽然对我们的数据进行了加密，但是我们却引入了新的问题。我们的加密方法很容易通过反编译apk获取到，那么，我们就需要安全的
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」Android Studio 1.x NDK环境搭建</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DAndroid%20Studio%201.x%20NDK%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载NDK"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#下载NDK" class="headerlink" title="下载NDK"></a>下载NDK</h2><h3 id="下载"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="http://developer.android.com/ndk/downloads/index.html" target="_blank" rel="external">NDK Download</a></p>
<p><a href="http://dl.google.com/android/ndk/android-ndk-r10e-linux-x86.bin" target="_blank" rel="external">mac: android-ndk-r10e-linux-x86.bin</a></p>
<h3 id="安装"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ndk ls</div><div class="line">android-ndk-r10e-darwin-x86_64.bin</div><div class="line">➜  ndk chmod a+x android-ndk-r10e-darwin-x86_64.bin</div><div class="line">➜  ndk ./android-ndk-r10e-darwin-x86_64.bin</div></pre></td></tr></table></figure>
<h2 id="配置环境"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="gradle-properties"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h3><p>在末尾添加一行： <code>android.useDeprecatedNdk=true</code></p>
<h3 id="添加build工具"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#添加build工具" class="headerlink" title="添加build工具"></a>添加build工具</h3><p>AS &gt; Preferences &gt; Tools &gt; External Tools</p>
<h4 id="add-javah"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#add-javah" class="headerlink" title="add javah"></a>add javah</h4><ul>
<li>Name: javah</li>
<li>Group: default(External Tools)</li>
<li>Description: generate C header</li>
<li>Options: select all</li>
<li>Show in: select all</li>
<li>Tools Settings:<ul>
<li>Program:  <code>$JDKPath$/bin/javah</code></li>
<li>Parameters:  <code>-v -d $ModuleFileDir$/src/main/jni -jni $FileClass$</code></li>
<li>Parameters:  <code>-bootclasspath $ModuleSdkPath$/platforms/android-23/android.jar -v -d $ModuleFileDir$/src/main/jni -jni $FileClass$</code> (if you need android object)</li>
<li>Working directory:  <code>$SourcepathEntry$</code></li>
</ul>
</li>
</ul>
<p>(PS: Right click on the class)</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/ndkutil/image-javah.png" alt="项目结构"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  ~ javah</div><div class="line">用法:</div><div class="line">  javah [options] &lt;classes&gt;</div><div class="line">其中, [options] 包括:</div><div class="line">  -o &lt;file&gt;                输出文件 (只能使用 -d 或 -o 之一)</div><div class="line">  -d &lt;dir&gt;                 输出目录</div><div class="line">  -v  -verbose             启用详细输出</div><div class="line">  -h  --help  -?           输出此消息</div><div class="line">  -version                 输出版本信息</div><div class="line">  -jni                     生成 JNI 样式的标头文件 (默认值)</div><div class="line">  -force                   始终写入输出文件</div><div class="line">  -classpath &lt;path&gt;        从中加载类的路径</div><div class="line">  -bootclasspath &lt;path&gt;    从中加载引导类的路径</div><div class="line">&lt;classes&gt; 是使用其全限定名称指定的</div><div class="line">(例如, java.lang.Object)。</div></pre></td></tr></table></figure>
<h4 id="add-ndkBuild"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#add-ndkBuild" class="headerlink" title="add ndkBuild"></a>add ndkBuild</h4><ul>
<li>Name: ndkBuild</li>
<li>Group: default(External Tools)</li>
<li>Description: ndk build</li>
<li>Options: select all</li>
<li>Show in: select all</li>
<li>Tools Settings:<ul>
<li>Program:  <code>/Users/ttdevs/android/android-ndk-r10e/ndk-build</code></li>
<li>Parameters:  <code>NDK_LIBS_OUT=$ModuleFileDir$/libs</code></li>
<li>Working directory:  <code>$ModuleFileDir$/src/main</code></li>
</ul>
</li>
</ul>
<p>(PS: Right click on the module name)</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/ndkutil/image-ndkbuild.png" alt="项目结构"></p>
<h2 id="编写代码"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><h3 id="新建一个Module：ndkutil"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#新建一个Module：ndkutil" class="headerlink" title="新建一个Module：ndkutil"></a>新建一个Module：ndkutil</h3><h3 id="修改ndkutil的build-gradle"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#修改ndkutil的build-gradle" class="headerlink" title="修改ndkutil的build.gradle"></a>修改ndkutil的build.gradle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    defaultConfig &#123;</div><div class="line">        ...</div><div class="line">        ndk &#123;</div><div class="line">            moduleName <span class="string">"ndkutil"</span></div><div class="line">//            abiFilters <span class="string">"armeabi-v7a"</span>, <span class="string">"x86"</span></div><div class="line">//            stl <span class="string">"gnustl_static"</span></div><div class="line">//            cFlags <span class="string">"-std=c++11 -Wall"</span></div><div class="line">//            ldLibs <span class="string">"log"</span>, <span class="string">"jnigraphics"</span>, <span class="string">"EGL"</span>, <span class="string">"GLESv3"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sourceSets.main &#123;</div><div class="line">        jni.srcDirs = []</div><div class="line">        jniLibs.srcDir <span class="string">"libs"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建工具类CipherUtil"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#创建工具类CipherUtil" class="headerlink" title="创建工具类CipherUtil"></a>创建工具类CipherUtil</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ttdevs.ndk;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CipherUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"Cipher"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getCipherKey</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成头文件com-ttdevs-ndk-CipherUtil-h"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#生成头文件com-ttdevs-ndk-CipherUtil-h" class="headerlink" title="生成头文件com_ttdevs_ndk_CipherUtil.h"></a>生成头文件com_ttdevs_ndk_CipherUtil.h</h3><p>在刚才创建的CipherUtil.java上点击右键 &gt; External Tools &gt; javah<br>此时会在main目录下生成: jni/com_ttdevs_ndk_CipherUtil.h</p>
<h3 id="编写代码-1"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#编写代码-1" class="headerlink" title="编写代码"></a>编写代码</h3><p>都是在ndkutil/src/main/jni目录下</p>
<ul>
<li>创建C源码:Cipher.cpp</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_ttdevs_ndk_CipherUtil.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_ttdevs_ndk_CipherUtil_getCipherKey</span><span class="params">(JNIEnv *env, jclass)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (*env).NewStringUTF(<span class="string">"Hello World!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建Android.mk</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE := Cipher</div><div class="line">LOCAL_SRC_FILES := Cipher.cpp</div><div class="line"></div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>
<ul>
<li>创建Application.mk</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">APP_MODULE := Cipher</div><div class="line">APP_ABI := all</div></pre></td></tr></table></figure>
<h3 id="编译生成so文件"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#编译生成so文件" class="headerlink" title="编译生成so文件"></a>编译生成so文件</h3><p>在module（ndkutil）上点击右键 &gt; External Tools &gt; ndkBuild ，可以看到如下log：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/Users/ttdevs/android/android-ndk-r10d/ndk-build NDK_LIBS_OUT=/Users/ttdevs/android/workspace/Demo/ndkutil/libs</div><div class="line">[arm64-v8a] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[arm64-v8a] SharedLibrary  : libCipher.so</div><div class="line">[arm64-v8a] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/arm64-v8a/libCipher.so</div><div class="line">[x86_64] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[x86_64] SharedLibrary  : libCipher.so</div><div class="line">[x86_64] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/x86_64/libCipher.so</div><div class="line">[mips64] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[mips64] SharedLibrary  : libCipher.so</div><div class="line">[mips64] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/mips64/libCipher.so</div><div class="line">[armeabi-v7a] Compile++ thumb: Cipher &lt;= Cipher.cpp</div><div class="line">[armeabi-v7a] SharedLibrary  : libCipher.so</div><div class="line">[armeabi-v7a] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/armeabi-v7a/libCipher.so</div><div class="line">[armeabi] Compile++ thumb: Cipher &lt;= Cipher.cpp</div><div class="line">[armeabi] SharedLibrary  : libCipher.so</div><div class="line">[armeabi] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/armeabi/libCipher.so</div><div class="line">[x86] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[x86] SharedLibrary  : libCipher.so</div><div class="line">[x86] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/x86/libCipher.so</div><div class="line">[mips] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[mips] SharedLibrary  : libCipher.so</div><div class="line">[mips] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/mips/libCipher.so</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
<p>此时我们可以发现在ndkutil/libs/目录下生成的so文件。</p>
<h3 id="测试代码"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String cipher = CipherUtil.getCipherKey();</div></pre></td></tr></table></figure>
<h2 id="项目结构"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/ndkutil/image-dir.png" alt="项目结构"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载NDK&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#下载NDK&quot; class=&quot;headerlink&quot; title=&quot;下载NDK&quot;&gt;&lt;/a&gt;下载NDK&lt;/h2&gt;&lt;h3 id=&quot;下载&quot;&gt;&lt;
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」Android Studio 2.0 NDK开发环境搭建</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DAndroid%20Studio%202.0%20NDK%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前情回顾"><a href="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x00-前情回顾" class="headerlink" title="0x00 前情回顾"></a>0x00 前情回顾</h2><p>前不久写了一篇环境搭建，虽然可以跑一个demo，但是如果你跟着做的话就会发现，仅仅是可以跑一个Demo，真做起来很是蛋疼。编写源码，生成so，跑App，改一点代码，再生成so，跑app。而且编写代码没有提示，不能格式化，各种不能，就是最基本的文本开发。经过一段时间折腾和Android Studio 2.0的 release，发现有更完美的方式，而且不用编写Android.mk和Application.mk。看在我刚开始学的份上，容我再来写一遍。看完这篇，你会发现JNI的开发也是如此的so easy。</p>
<h2 id="0x01-环境搭建"><a href="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>所需环境：</p>
<ol>
<li>Android Studio 2.0</li>
<li>Gradle 2.10（最低要求）</li>
<li>NDK：ndk-r11c（目前最新版：2016-04-16）</li>
<li>LLDB：2.1（目前最新版：2016-04-16）</li>
</ol>
<p>下面开始正式操作：</p>
<ul>
<li><p>安装Android Studio 2.0</p>
<p>  这个就不细说了。</p>
</li>
<li><p>配置Gradle</p>
<p>  最低要求Gradle版本为2.10，目前最新版本为2.12。修改方法：</p>
<p>  <code>项目根目录/gradle/wrapper/gradle-wrapper.properties</code></p>
<p>  将最下面的一行改成你要的版本，如：</p>
<p>  <code>distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip</code></p>
</li>
<li><p>安装NDK</p>
<p>  安装NDK有两种方式，一种是直接下载最新的NDK安装文件进行安装，另一种是通过SDK安装：</p>
<ol>
<li><p>NDK安装文件</p>
<p> 下载参考<a href="http://developer.android.com/ndk/downloads/index.html" target="_blank" rel="external">这里</a>。根据你的操作系统下载不同版本。</p>
</li>
<li><p>通过SDK安装</p>
<p> <code>Android Studio &gt; Preferences &gt; Appearance &amp; Behavior &gt; Syetem Settings &gt; Android SDK &gt; SDK Tools</code></p>
<p> 在这个Tab中找到 <code>Android NDK</code>，选中安装即可。安装之后我们可以在 Android SDK 的目录下看到一个 <code>ndk-bundle</code> 目录，这个就是我们的NDK目录。</p>
<p><img src="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/image.png" alt="ndk_lldb"></p>
</li>
</ol>
</li>
<li><p>LLDB</p>
<p>  和 GDB 类似，<a href="http://lldb.llvm.org/" target="_blank" rel="external">LLDB</a>  是一款调试器，可以调试我们的JNI代码。同上打开SDK设置界面：</p>
<p>  <code>Android Studio &gt; Preferences &gt; Appearance &amp; Behavior &gt; Syetem Settings &gt; Android SDK &gt; SDK Tools</code></p>
<p>  在这个Tab中找到 <code>LLDB</code>，选中安装即可。安装之后我们可以在 Android SDK 的目录下看到一个 <code>lldb</code> 目录，这个就是我们的 LLDB 目录。LLDB的更多信息可参考<a href="http://lldb.llvm.org/" target="_blank" rel="external">这里</a>。</p>
</li>
</ul>
<p>通过上面的配置，接下来就可以开始我们的JNI的开发了。 可能你会问之前我有介绍过一篇开发环境的搭建，这个有什么不同呢？如果你使用之前的方法，你需要配置 Android.mk、Application.mk，无代码自动完成，不能代码个时候，运行调试麻烦，等等。这些问题在这里都不存在了，让我们把更多的精力放到代码编写中。</p>
<h2 id="0x02-测试Demo"><a href="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x02-测试Demo" class="headerlink" title="0x02 测试Demo"></a>0x02 测试Demo</h2><p>新建java代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CipherUtils</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"CipherUtils"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成对应的C++代码：</p>
<p>令人兴奋的是，Android Studio可以帮我们自动生成 C 代码。点击 <code>add</code> 方法，Option ＋ Return 即可生成一个 <code>CipherUtils.c</code>文件，由于我打算使用C++，因此将扩展名改为 <code>cpp</code> ，同时添加头文件，最终如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utils/log.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_ttdevs_jniutils_CipherUtils_add</span><span class="params">(JNIEnv *env, jclass type, jint x, jint y)</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">input_str</span><span class="params">(<span class="string">"Test add two number!"</span>)</span></span>;</div><div class="line">    LOGE(<span class="string">"%s"</span>, input_str.c_str());</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>PS：如果报错，可是将错误的 cpp文件拷贝出来再考吧回去。</code></p>
<p>build.gradle 配置</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ......</div><div class="line">        defaultConfig &#123;</div><div class="line">        ......</div><div class="line">        ndk &#123;</div><div class="line">            moduleName <span class="string">"CipherUtils"</span></div><div class="line">            stl <span class="string">"gnustl_static"</span> <span class="comment">// stlport_static</span></div><div class="line">            abiFilters <span class="string">"armeabi"</span>, <span class="string">"armeabi-v7a"</span></div><div class="line">            ldLibs <span class="string">"log"</span>, <span class="string">"android"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">sourceSets</span>.main &#123;</div><div class="line">        <span class="comment">// 如果不写(jni.srcDirs = ['src/main/jni/'])</span></div><div class="line">        <span class="comment">// Android展示模式没有jni目录</span></div><div class="line">        <span class="comment">// this file has been added after the last project sync with gradle</span></div><div class="line">        <span class="comment">// 必须有值,如: 'src/main/jni/'</span></div><div class="line">        jni.srcDirs = [<span class="string">'src/main/jni/'</span>]</div><div class="line">        <span class="comment">// jniLibs.srcDir "libs"</span></div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接点击运行按钮，即可跑我们的测试程序了。就这么简单。</p>
<h2 id="0x03-JNI层的Debug"><a href="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x03-JNI层的Debug" class="headerlink" title="0x03 JNI层的Debug"></a>0x03 JNI层的Debug</h2><p>这个同样简单。首先需要在外面的build.gradle中配置一下：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ......</div><div class="line">    buildTypes &#123;</div><div class="line">        debug &#123;</div><div class="line">            jniDebuggable = <span class="keyword">true</span></div><div class="line">        &#125;</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>C/C++</code> 源文件上添加断点，点击debug，就可以像debug我们的java代码一样调试我们的原生代码了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前情回顾&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x00-前情回顾&quot; class=&quot;headerlink&quot; title=&quot;0x00 前情回顾&quot;&gt;&lt;/a&gt;0x00 前情回顾
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」Android你可能要用到的自定义View分享</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DAndroid%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%A6%81%E7%94%A8%E5%88%B0%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%88%86%E4%BA%AB/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]Android你可能要用到的自定义View分享/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-main"><a href="/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x00-main" class="headerlink" title="0x00 main"></a>0x00 main</h2><p>进步、创新都是在不断变化的需求中诞生的。<br>                        －－ By ttdevs</p>
<p>这不，新的需求又来了。废话不多说，先上设计稿：</p>
<p><img src="http://img.blog.csdn.net/20160619220030319" alt="boohee design"></p>
<p>简单分析上图包括三部分：最上面的类Progressbar，中间两个指示盘和最下面的指示盘。第一个类Progressbar我们项目之前有实现过，但是和这个需求有一些差异，因此决定重新实现一遍。另外两个圆形指示盘本想通过在一张背景图片上放一张指针图，控制指针图的旋转来实现，但是考虑到这样不够灵活，因此也决定自己来画。So，我们接下来实现这三个View。</p>
<p>正式开始之前，先看看我们最终效果图（当然，指针是可以动的）：</p>
<p><img src="http://img.blog.csdn.net/20160629135550259" alt="Indicator view"></p>
<h2 id="0x01-分析"><a href="/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><ul>
<li><p>LineIndicator （第一个，类Progressbar）</p>
<p>  主要包括三部分：左侧的提示和内容，右侧的提示和内容，中间的类Progressbar。两侧的文字比较容易处理，掌握了文字的基本绘制，画起来是很容易的。中间的类Progressbar由于打算自己画，所以不会直接贴个Progressbar在上面。我的思路是画一条长的直线作为背景，中间的指示也是直线，比背景直线粗，直线的Paint设置 <code>StrokeCap</code> 为 <code>Paint.Cap.ROUND</code> 即 <code>paint.setStrokeCap(Paint.Cap.ROUND);</code>，这样就可以有两头半圆的效果；中间的指示数字直接画在粗的指示直线上面即可。这里可能遇到的问题有下面两个：</p>
<ul>
<li><p><code>StrokeCap</code> 设置 为 <code>Paint.Cap.ROUND</code>时的位置关系</p>
<p>  <code>StrokeCap</code> 设置 为 <code>Paint.Cap.ROUND</code>，直线两侧的半圆是不算在直线的长度里的。简单来说，如果view的长度和我画的直线长度一致，那么这个直线就是矩形而不是期待的两侧都是半圆的椭圆。</p>
</li>
<li><p>当进度为0或者为100％时的展示</p>
<p>  如果我们背景直线和指示直线起点终点位置一致，那么最终效果就是当进度为0或者100%的时候，指示直线是显示不全的，因此我们需要对这两个位置进行矫正。我的矫正方法比较简单，在0～x和y～100%进度的时候分别显示x和y（本以为自己的思路很屌，后来发现别人也是这么干的）。</p>
</li>
</ul>
</li>
<li><p>CircleIndicator （中间的多种颜色环）</p>
<p>  这个View我将其分解为四部分，从上层到下层：中间指针，刻度环，显示的内容，圆环背景和外层指示文字。每一部分再做分解：</p>
<ul>
<li><p>中间指针</p>
<p>  这个又分解为六个部分：最下层大圆，两个圆形半圆，两个三角形和上层小圆。</p>
</li>
<li><p>刻度环</p>
<p>  由于是圆环，所以必须画弧线了。但是这个弧线又有点特殊，两侧带圆角，中间圆环直角，这个没想到啥好办法，用了很一般的思路：先用 <code>Paint.Cap.ROUND</code> 画两侧的弧，然后 <code>Paint.Style.STROKE</code> 画中间的部分。</p>
</li>
<li><p>显示的内容</p>
<p>  这个就比较简单了，主要在于计算文字的显示位置。</p>
</li>
<li><p>圆环背景和外层文字</p>
<p>  最简单的一个圆，加一个以圆为路径画的文字。</p>
</li>
</ul>
</li>
</ul>
<pre><code>最后我们画的顺序正好与上面所述顺序相反。
</code></pre><ul>
<li><p>ProgressIndicator （最下面的两种颜色环）</p>
<p>  这个相较 CircleIndicator 就简单了一些。在画圆环的时候，我们只需要先画一个灰色背景，然后再画一个绿色圆弧即可。</p>
</li>
</ul>
<h2 id="0x02-实现"><a href="/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x02-实现" class="headerlink" title="0x02 实现"></a>0x02 实现</h2><p>View的绘制我们应该都比较熟悉，主要有下面三个过程： onMeasure（测量）、onLayout（布局）、onDraw（绘制）。针对上述三个View：LineIndicator，我们根据实际的内容来计算View的高度，宽度用户设定；CircleIndicator和ProgressIndicator的宽度用户设定，高度自定计算与宽度相同。onLayout我们不需要。最后的根据实际的展示内容来绘制。</p>
<p>另外，由于CircleIndicator和ProgressIndicator和相似度高，很多代码可以拿来重用，因此，我写了一个基类来完成公共的部分，特殊部分每个 子类自己完成。最后再子类地onDraw方法中按照顺序调用即可。</p>
<p>由于主要是计算各种坐标位置，代码还是不少的，这里就不贴代码。最后的实现请移步我的 <a href="https://github.com/ttdevs/android/tree/master/modules/indicator" target="_blank" rel="external">github</a>。三个View的代码已经整理完LineIndicator，其它的两个还需要点时间（2016-06-19）。</p>
<h2 id="0x03-知识点"><a href="/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x03-知识点" class="headerlink" title="0x03 知识点"></a>0x03 知识点</h2><ul>
<li><p>自定义View的思路</p>
<ul>
<li>创建类，继承自View或者ViewGroup或者其它ViewGroup</li>
<li>定义View的可配置参数，如果你需要的话</li>
<li><p>实现View的具体逻辑</p>
<p>这个太粗略了，各位可以参考具体源码。</p>
</li>
</ul>
</li>
<li><p>文字位置的计算</p>
<p>  如果你没有自己画过文字，那你肯定不可能一下子明白文字的画法，或多或少的出现偏移。这里直接给大家推荐一篇讲的非常详细的文章：<a href="http://blog.csdn.net/aigestudio/article/details/41447349" target="_blank" rel="external">http://blog.csdn.net/aigestudio/article/details/41447349</a></p>
</li>
<li><p>位置、半径、弧长等的计算</p>
<p>  这里会涉及到简单的三角函数和圆的周长弧度的计算，可能要说的就是三角函数的参数是弧度制度。</p>
</li>
<li><p>ObjectAnimator</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置内容的颜色值（非resource的id）</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> contentColor 内容的颜色值</div><div class="line"> * <span class="doctag">@param</span> unitColor    单位的颜色值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentColor</span><span class="params">(<span class="keyword">int</span> contentColor, <span class="keyword">int</span> unitColor)</span> </span>&#123;</div><div class="line">    mContentColor = contentColor;</div><div class="line">    mUnitColor = unitColor;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置进度</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> indicator 进度值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndicator</span><span class="params">(<span class="keyword">float</span> indicator)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (indicator &lt;= mStartIndicator) &#123;</div><div class="line">        mIndicator = mStartIndicator;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (indicator &gt; mEndIndicator) &#123;</div><div class="line">        mIndicator = mEndIndicator;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mIndicator = indicator;</div><div class="line">    &#125;</div><div class="line">    postInvalidate();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取进度</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> 当前进度值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getIndicator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mStartIndicator;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">animateIndicator</span><span class="params">(<span class="keyword">float</span> indicator)</span> </span>&#123;</div><div class="line">    Interpolator interpolator = <span class="keyword">new</span> AnticipateOvershootInterpolator(<span class="number">1.8f</span>);</div><div class="line">    ObjectAnimator animation = ObjectAnimator.ofFloat(<span class="keyword">this</span>, <span class="string">"indicator"</span>, indicator);</div><div class="line">    animation.setDuration(<span class="number">2000</span>);</div><div class="line">    animation.setInterpolator(interpolator);</div><div class="line">    animation.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>处理屏幕的旋转</p>
<p>  由于时间比较紧，这个我还没做。主要在View的以下两个方法中实现：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Parcelable <span class="title">onSaveInstanceState</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">super</span>.onSaveInstanceState();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(Parcelable state)</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onRestoreInstanceState(state);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>最后欢迎各位吐槽并提供更好的建议～～</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-main&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x00-main&quot; class=&quot;headerlink&quot; title=&quot;0x00 main&quot;&gt;&lt;/a&gt;0x00 main&lt;/h2&gt;
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」Android闹钟遇到的那些坑</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DAndroid%E9%97%B9%E9%92%9F%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]Android闹钟遇到的那些坑/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-做过闹钟的话你才会理解的坑"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x00-做过闹钟的话你才会理解的坑" class="headerlink" title="0x00 做过闹钟的话你才会理解的坑"></a>0x00 做过闹钟的话你才会理解的坑</h2><p>第一次做闹钟程序是在2012年，那时候android最新版本是2.2，2.3发布在即，做了一个整点提醒的小工具，记得很清楚，主要的问题是锁屏之后闹钟不能准时被唤醒，总会晚那么几秒钟，后来没办法把闹钟提前设置几秒钟。不过那时候环境还好，没有遇到攻克不了的问题，重启也可以唤起闹钟的。</p>
<p>但是随着android版本的进化，开发者节操的丢失，问题就越来越难做了。闹钟明明设置了却不能到来；不再设置的时间到来，晚了好久才到；重启之后闹钟就没了等等。当然，还有好多好多，总之很多东西不按照自己期待的来。</p>
<p>项目上线，踩过之后挑一些做总结。</p>
<p>由于时间关系，项目比较赶，所以没有去考虑闹钟无法及时触发的问题，假设了一个最理想的环境。（更多的信息可以参考下面的文章）</p>
<h2 id="0x01-闹钟的创建"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x01-闹钟的创建" class="headerlink" title="0x01 闹钟的创建"></a>0x01 闹钟的创建</h2><p>这里涉及到不同版本设置闹钟的方法，下面的参考文章中已经提到：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startAlarm</span><span class="params">(Calendar calendar, PendingIntent pendingIntent)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">       <span class="comment">// mManager.setWindow(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), 1000* 5, mFirstPIntent);</span></div><div class="line">       mManager.setExact(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), pendingIntent);</div><div class="line">       <span class="comment">// mManager.set(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), mSecondPIntent);</span></div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       mManager.set(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), pendingIntent);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x02-闹钟的取消"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x02-闹钟的取消" class="headerlink" title="0x02 闹钟的取消"></a>0x02 闹钟的取消</h2><p>有的时候可能需要去取消一个闹钟。我们可以通过两种方式来取消：</p>
<ul>
<li><p>通过 <code>PendingIntent.cancel();</code> 来取消</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Cancel a currently active PendingIntent.  Only the original application</div><div class="line"> * owning a PendingIntent can cancel it.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ActivityManagerNative.getDefault().cancelIntentSender(mTarget);</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>这种方式只有能拿到 `PendingIntent` 才可以。
</code></pre><ul>
<li><p>通过 <code>AlarmManager.cancel(PendingIntent);</code> 来取消</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Remove any alarms with a matching &#123;<span class="doctag">@link</span> Intent&#125;.</div><div class="line"> * Any alarm, of any type, whose Intent matches this one (as defined by</div><div class="line"> * &#123;<span class="doctag">@link</span> Intent#filterEquals&#125;), will be canceled.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> operation IntentSender which matches a previously added</div><div class="line"> * IntentSender.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@see</span> #set</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">(PendingIntent operation)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        mService.remove(operation);</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="0x03-闹钟的查看"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x03-闹钟的查看" class="headerlink" title="0x03 闹钟的查看"></a>0x03 闹钟的查看</h2><p>又个adb命令可以用来查看当前系统中存在的闹钟：</p>
<p><code>adb shell dumpsys alarm</code></p>
<p><img src="http://img.blog.csdn.net/20170224183136089?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>不是在所有的设备上都好使，比如在我的魅族设备上可以正常使用，而在另一台 OPPO R7C上就不可以。</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ul>
<li><a href="http://www.jianshu.com/p/1f919c6eeff6" target="_blank" rel="external">http://www.jianshu.com/p/1f919c6eeff6</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-做过闹钟的话你才会理解的坑&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x00-做过闹钟的话你才会理解的坑&quot; class=&quot;headerlink&quot; title=&quot;0x00 做过闹钟的话你才会理解的坑&quot;
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」DataBinding给Button设置背景无效</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DDataBinding%E7%BB%99Button%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E6%97%A0%E6%95%88/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]DataBinding给Button设置背景无效/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-问题"><a href="/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x00-问题" class="headerlink" title="0x00 问题"></a>0x00 问题</h2><p>通过Data Binding给Button设置背景无效。<br>具体表现为给Button设置不同的背景图片，但是无论怎样背景只会显示不同的颜色，而不是显示期望的图片。</p>
<h2 id="0x01-分析"><a href="/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>由于对Data Binding不是很熟悉，所以很奇怪为什么。不管怎样先打印下这个资源的值，发现在布局文件中打印资源值是有的。根据经验，设置不同的背景图片，背景会显示不同的颜色，那这个值可能被解析成了颜色值。</p>
<h2 id="0x02-解决"><a href="/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x02-解决" class="headerlink" title="0x02 解决"></a>0x02 解决</h2><p>在网上搜了一下（容我忘记了具体网址），需要通过不同的方式来设置背景：<br>之前的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">      <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">      <span class="attr">android:onClick</span>=<span class="string">"@&#123;(view) -&gt; handler.onStartClick(view)&#125;"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"@string/button_start"</span></div><div class="line">      <span class="attr">android:textColor</span>=<span class="string">"@color/blueColor"</span></div><div class="line">      <span class="attr">android:textSize</span>=<span class="string">"@dimen/global_font_large"</span></div><div class="line">      <span class="attr">android:background</span>=<span class="string">"@&#123;handler.startButtonBg&#125;"</span></div><div class="line">      <span class="attr">tools:background</span>=<span class="string">"@drawable/btn_main_circle_start"</span> /&gt;</div></pre></td></tr></table></figure>
<p>修改之后：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">      <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">      <span class="attr">android:onClick</span>=<span class="string">"@&#123;(view) -&gt; handler.onStartClick(view)&#125;"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"@string/button_start"</span></div><div class="line">      <span class="attr">android:textColor</span>=<span class="string">"@color/blueColor"</span></div><div class="line">      <span class="attr">android:textSize</span>=<span class="string">"@dimen/global_font_large"</span></div><div class="line">      <span class="attr">app:backgroundResource</span>=<span class="string">"@&#123;handler.startButtonBg&#125;"</span></div><div class="line">      <span class="attr">tools:background</span>=<span class="string">"@drawable/btn_main_circle_start"</span> /&gt;</div></pre></td></tr></table></figure>
<p>也就是将之前的 <code>android:background</code> 换成 <code>app:backgroundResource</code></p>
<h2 id="0x03-总结"><a href="/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>没啥总结的，Data Binding 还有很多等待探究。</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-问题&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x00-问题&quot; class=&quot;headerlink&quot; title=&quot;0x00 问题&quot;&gt;&lt;/a&gt;0x00 问题&lt;/h2&gt;&lt;p&gt;通过Da
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」LayoutInflate遇到的坑</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DLayoutInflate%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]LayoutInflate遇到的坑/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-问题"><a href="/1970/01/01/[Android]LayoutInflate遇到的坑/#0x01-问题" class="headerlink" title="0x01 问题"></a>0x01 问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initVoiceItem</span><span class="params">()</span> </span>&#123;</div><div class="line">    viewMusicList.removeAllViews();</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> localResource = SysPreferences.getAlarmVoiceResource();</div><div class="line">    LayoutInflater inflater = LayoutInflater.from(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VOICE_KEY.length; i++) &#123;</div><div class="line">        View view = inflater.inflate(R.layout.item_voice_name, viewMusicList); <span class="comment">// <span class="doctag">TODO:</span> 2017/2/10</span></div><div class="line">        view.setOnClickListener(mClickListener);</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> View.OnClickListener mClickListener = <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size = viewMusicList.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            View view = viewMusicList.getChildAt(i);</div><div class="line">            ...</div><div class="line">            <span class="keyword">if</span> (v == view) &#123;</div><div class="line">                &#123;...<span class="number">1</span>...&#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                &#123;...<span class="number">2</span>...&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>有上面一串代码，你能发现有什么问题吗？</p>
<p>嗯嗯，是这样的：只会执行代码块{1}，并没有像我们期待的那样点击的时候执行到代码块{2}中去。没有细究，通过下面的代码直接跨过去：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initVoiceItem</span><span class="params">()</span> </span>&#123;</div><div class="line">   viewMusicList.removeAllViews();</div><div class="line">   </div><div class="line">   <span class="keyword">int</span> localResource = SysPreferences.getAlarmVoiceResource();</div><div class="line">   LayoutInflater inflater = LayoutInflater.from(<span class="keyword">this</span>);</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VOICE_KEY.length; i++) &#123;</div><div class="line">       View view = inflater.inflate(R.layout.item_voice_name, <span class="keyword">null</span>); <span class="comment">// <span class="doctag">TODO:</span> 2017/2/10</span></div><div class="line">       view.setOnClickListener(mClickListener);</div><div class="line">       ...</div><div class="line">       viewMusicList.addView(view);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然不知道什么原因，但是找到解决办法，不过还是挺惭愧的······</p>
<h2 id="0x02-分析"><a href="/1970/01/01/[Android]LayoutInflate遇到的坑/#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h2><p>很多人可能跟我一样，开始学的时候，记住该怎么写，这个方法是干嘛的。但是很难避免会记错某个方法，就像我们会写错某个字一样，当别人纠正的时候才知道，这个字自己已经写错十几活着几十年了。来看一下 <code>View.inflate()</code> 这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Inflate a new view hierarchy from the specified xml resource. Throws</div><div class="line">* &#123;<span class="doctag">@link</span> InflateException&#125; if there is an error.</div><div class="line">* </div><div class="line">* <span class="doctag">@param</span> resource ID for an XML layout resource to load (e.g.,</div><div class="line">*        &lt;code&gt;R.layout.main_page&lt;/code&gt;)</div><div class="line">* <span class="doctag">@param</span> root Optional view to be the parent of the generated hierarchy.</div><div class="line">* <span class="doctag">@return</span> The root View of the inflated hierarchy. If root was supplied,</div><div class="line">*         this is the root View; otherwise it is the root of the inflated</div><div class="line">*         XML file.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(@LayoutRes <span class="keyword">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> inflate(resource, root, root != <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们传入了 <code>root</code> View，那么返回的就是root View， 如果不传，则返回根据布局文件生成的 View。而根据我上面的代码，显然被我错误的理解，无论传不传 <code>root</code> View，返回的都是根据布局文件生成的 View，而我就这么相安无事的用了好几年······</p>
<h2 id="0x03-你以为这就这样结束了"><a href="/1970/01/01/[Android]LayoutInflate遇到的坑/#0x03-你以为这就这样结束了" class="headerlink" title="0x03 你以为这就这样结束了"></a>0x03 你以为这就这样结束了</h2><p>如果你执行我的错误代码，你会看到下面这个图：</p>
<p><img src="http://img.blog.csdn.net/20170212223305559?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>这个这个图有两个信息：</p>
<ul>
<li>后面几个Item显示的名称是错误的</li>
<li>点击某个Item，其他几个Item的checkbox也被选择</li>
</ul>
<p>我们按照错误的代码执行的逻辑进行分析。首先：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VOICE_KEY.length; i++) &#123;</div><div class="line">  View view = inflater.inflate(R.layout.item_voice_name, viewMusicList);</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码会循环多次，将inflate后的布局添加到viewMusicList，这样viewMusicList下面就有多个 <code>item_voice_name</code> 因此最终给我们展现的结果就是看到有多个Item。</p>
<p>对于第一个问题，我们需要从 <code>view.findViewById()</code> 说起，从View中你会发现这两段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Look for a child view with the given id.  If this view has the given</div><div class="line">* id, return this view.</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> id The id to search for.</div><div class="line">* <span class="doctag">@return</span> The view that has the given id in the hierarchy or null</div><div class="line">*/</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> View <span class="title">findViewById</span><span class="params">(@IdRes <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> findViewTraversal(id);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* &#123;<span class="doctag">@hide</span>&#125;</div><div class="line">* <span class="doctag">@param</span> id the id of the view to be found</div><div class="line">* <span class="doctag">@return</span> the view of the specified id, null if cannot be found</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">findViewTraversal</span><span class="params">(@IdRes <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (id == mID) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是不是太简单，根本没找到我们期待的逻辑——ViewGroup中怎么处理，细心的你会发现ViewGroup重写了 <code>findViewTraversal()</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">findViewTraversal</span><span class="params">(@IdRes <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (id == mID) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">final</span> View[] where = mChildren;</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> len = mChildrenCount;</div><div class="line"></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">       View v = where[i];</div><div class="line"></div><div class="line">       <span class="keyword">if</span> ((v.mPrivateFlags &amp; PFLAG_IS_ROOT_NAMESPACE) == <span class="number">0</span>) &#123;</div><div class="line">           v = v.findViewById(id);</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">return</span> v;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从这段代码可以看出，在ViewGroup中根据ID查找，找到就返回，而找到的永远是最前面的View。这就解释了为什么第一个Item和其他的不同了。</p>
<p>（对于点击某个Item，其他Item也出现波纹效果，猜测可能是因为波纹效果是根据ID来实现的。TODO ）</p>
<h2 id="0x04-总结"><a href="/1970/01/01/[Android]LayoutInflate遇到的坑/#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>上面遇到的View inflate是我个人遇到的问题，主要是因为对基础知识掌握有问题。另外在使用inflate的时候，可能还会遇到LayoutParam设置无效的问题，这个可以通过套一个View的方式解决，仅此记录。 </p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-问题&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]LayoutInflate遇到的坑/#0x01-问题&quot; class=&quot;headerlink&quot; title=&quot;0x01 问题&quot;&gt;&lt;/a&gt;0x01 问题&lt;/h2&gt;&lt;figure class=
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」MediaPlayer单曲循环不卡顿</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DMediaPlayer%E5%8D%95%E6%9B%B2%E5%BE%AA%E7%8E%AF%E4%B8%8D%E5%8D%A1%E9%A1%BF/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-需求"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x00-需求" class="headerlink" title="0x00 需求"></a>0x00 需求</h2><p>单曲循环播放歌曲，要求过度连贯，听不出来卡顿感觉。</p>
<h2 id="0x01-解决思路"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x01-解决思路" class="headerlink" title="0x01 解决思路"></a>0x01 解决思路</h2><ol>
<li><p>MediaPlayer</p>
<p> 对于常见的音乐播放，我们第一时间想到的应该就是它，它有一个方法</p>
<p> <code>MediaPlayer.setLooping(true);</code></p>
<p> 就是用来进行单曲循环的。但是很遗憾，如果你简单的这么做，上面的目的是达不到的，会出现上一遍结束出现一个明显的停止才开始播放下一次的现象。</p>
<p> 不过最后就是用的这个组件，不过不是简单的设置 <code>setLooping(true)</code>。</p>
</li>
<li><p>SoundPool</p>
<p>一段时间内可能会播放很多音乐的时候，我们首先应该选择这个。</p>
</li>
<li><p>第三方组件</p>
<p> 如果没有特殊的需求，这个不是首选，特别是当引入的组件特别重的时候。    </p>
</li>
</ol>
<p>因为之前踩过坑：iOS上直接播放mp3文件，单曲循环的时候播放的间隙特别长，卡顿的感觉无法接受，解决方法是将mp3转换成m4a，基本上听不出中间的过度间隙。<br>首先尝试了使用 <code>MediaPlayer</code> 来播放，在我的机器（MX4 Pro）上播放还勉强能接受，间隙不是非常明显，换到配置差一点的机器上就不能忍了。然后尝试了 <code>SoudPool</code> ，无论是预加载一次循环播放，还是预加载两次循环播放，中间的卡顿感觉和用 <code>MediaPlayer.setLooping(true);</code> 一样一样的。再然后，尝试macOS 下编译 <code>vlc for android</code> ，我失败了╮(╯▽╰)╭）问题总要解决的，再找其他办法。</p>
<h2 id="0x02-死循环"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x02-死循环" class="headerlink" title="0x02 死循环"></a>0x02 死循环</h2><p>找了很多资料，最后使用一个循环播放的方法解决了这个问题：</p>
<ul>
<li>创建第一个播放器，播放；</li>
<li>同时创建第二个播放器，准备；</li>
<li>第一个播放器播放完毕立马启动第二个；</li>
<li>然后创建第三个播放器，准备；</li>
<li>如此往复，直到用户停止…</li>
</ul>
<p>由于对 <code>MediaPlayer</code> 没有过深入的研究和使用，这个思路来一时半会自己还是想不出来的（总是会想只要创建一个播放器就够了）。这么做下来真的循环播放就没有间隙感了……</p>
<p>由于 <code>mPlayer.setLooping(true);</code> 是native方法，所以没有去跟具体的实现逻辑。猜测可能是重新加载或者其他原因导致单曲循环中间间隙较大（原谅我的懒，没有去拿大文件尝试）。而使用上面的方式，当播放时间大于预加载时间的时候，第一个播放器播放的时候有第二个播放器有充足的机会去完成加载然后等待播放（播放时间小于加载时间的可能性不是很大）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> MediaPlayer mPlayer, mNextPlayer;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mPlayResId = R.raw.water;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoopPlayer</span><span class="params">()</span> </span>&#123;</div><div class="line">    mPlayer = MediaPlayer.create(<span class="keyword">this</span>, mPlayResId);</div><div class="line">    mPlayer.setOnPreparedListener(<span class="keyword">new</span> MediaPlayer.OnPreparedListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">(MediaPlayer mediaPlayer)</span> </span>&#123;</div><div class="line">            mPlayer.start();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    createNextMediaPlayer();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createNextMediaPlayer</span><span class="params">()</span> </span>&#123;</div><div class="line">    mNextPlayer = MediaPlayer.create(<span class="keyword">this</span>, mPlayResId);</div><div class="line">    mPlayer.setNextMediaPlayer(mNextPlayer);</div><div class="line">    mPlayer.setOnCompletionListener(<span class="keyword">new</span> MediaPlayer.OnCompletionListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(MediaPlayer mp)</span> </span>&#123;</div><div class="line">            mp.release();</div><div class="line"></div><div class="line">            mPlayer = mNextPlayer;</div><div class="line"></div><div class="line">            createNextMediaPlayer();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x03-总结"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>这更像一个开脑洞的问题。</p>
<h2 id="0x04-参考"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><ul>
<li><a href="http://stackoverflow.com/questions/26274182/not-able-to-achieve-gapless-audio-looping-so-far-on-android" target="_blank" rel="external">http://stackoverflow.com/questions/26274182/not-able-to-achieve-gapless-audio-looping-so-far-on-android</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-需求&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x00-需求&quot; class=&quot;headerlink&quot; title=&quot;0x00 需求&quot;&gt;&lt;/a&gt;0x00 需求&lt;/h2&gt;&lt;p&gt;单曲循环播放歌曲，要
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」Toobar的一个简单封装</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5DToobar%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]Toobar的一个简单封装/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Toolbar和ActionBar的直观区别就是需要我们自己将ToolBar加到自己的布局文件中。目前的情况是：在我们的现有项目上改动，多数的Activity都是继承一个BaseActivity。为了用最小的代价达到目的，简单的思考之后，做了如下的改动：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 带ToolBar的基类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">ActionBarActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_VIEW_ID = R.layout.activity_base;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LayoutParams LAYOUT_PARAMS = <span class="keyword">new</span> LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinearLayout mParentView;</div><div class="line">    <span class="keyword">private</span> Toolbar mToolBar;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ViewUtils.startTranslucent(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(BASE_VIEW_ID);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (BASE_VIEW_ID == layoutResID) &#123;</div><div class="line">            <span class="keyword">super</span>.setContentView(layoutResID);</div><div class="line"></div><div class="line">            mParentView = (LinearLayout) findViewById(R.id.base_parent_view);</div><div class="line">            mToolBar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">            initToolbar(mToolBar);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mParentView.addView(getLayoutInflater().inflate(layoutResID, <span class="keyword">null</span>), LAYOUT_PARAMS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        mParentView.addView(view, LAYOUT_PARAMS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initToolbar</span><span class="params">(Toolbar toolbar)</span> </span>&#123;</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">        toolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Toolbar <span class="title">getToolBar</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mToolBar;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBackground</span><span class="params">(<span class="keyword">int</span> colorId)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mParentView) &#123;</div><div class="line">            mParentView.setBackgroundColor(getResources().getColor(colorId));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>布局文件activity_base.xml：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">   xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">   android:id="@+id/base_parent_view"</div><div class="line">   android:layout_width="match_parent"</div><div class="line">   android:layout_height="match_parent"</div><div class="line">   android:background="@color/global_background_status_bar"</div><div class="line">   android:fitsSystemWindows="true"</div><div class="line">   android:orientation="vertical"&gt;</div><div class="line">    </div><div class="line">   &lt;include layout="@layout/subview_toolbar"/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>在基类中添加如上代码，基本可以用最小的改动达到使用Toolbar的目的。但是，这样也存在一个问题，就是会使我们的每个Activity的布局层次多了一层。</p>
<p>如果有更好的思路，欢迎分享～～</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Toolbar和ActionBar的直观区别就是需要我们自己将ToolBar加到自己的布局文件中。目前的情况是：在我们的现有项目上改动，多数的Activity都是继承一个BaseActivity。为了用最小的代价达到目的，简单的思考之后，做了如下的改动：&lt;/p&gt;
&lt;figu
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」*不同Context区别</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5D%E4%B8%8D%E5%90%8CContext%E5%8C%BA%E5%88%AB/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]不同Context区别/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">AlertDialog dialog = <span class="keyword">new</span> AlertDialog</div><div class="line">    .Builder(context)</div><div class="line">    .setTitle(title)</div><div class="line">    .setCancelable(<span class="keyword">false</span>)</div><div class="line">    .setPositiveButton(<span class="string">"确定"</span>, listener)</div><div class="line">    .create();</div><div class="line">dialog.show();</div></pre></td></tr></table></figure>
<p>错误信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">android.view.WindowManager$BadTokenException: Unable to add window -- token <span class="keyword">null</span> is not <span class="keyword">for</span> an </div><div class="line">	at android.view.ViewRootImpl.setView(ViewRootImpl.java:<span class="number">589</span>)</div><div class="line">	at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:<span class="number">326</span>)</div><div class="line">	at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:<span class="number">224</span>)</div><div class="line">	at android.view.WindowManagerImpl$CompatModeWrapper.addView(WindowManagerImpl.java:<span class="number">149</span>)</div><div class="line">	at android.app.Dialog.show(Dialog.java:<span class="number">293</span>)</div><div class="line">	at com.ttdevs.easysecuritysmartbar.StartHandler.handleMessage(StartHandler.java:<span class="number">39</span>)</div><div class="line">	at android.os.Handler.dispatchMessage(Handler.java:<span class="number">99</span>)</div><div class="line">	at android.os.Looper.loop(Looper.java:<span class="number">137</span>)</div><div class="line">	at android.app.ActivityThread.main(ActivityThread.java:<span class="number">4866</span>)</div><div class="line">	at java.lang.reflect.Method.invokeNative(Native Method)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">511</span>)</div><div class="line">	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">786</span>)</div><div class="line">	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">553</span>)</div><div class="line">	at dalvik.system.NativeStart.main(Native Method)</div></pre></td></tr></table></figure>
<p>其中context是通 <code>getApplicationContext()</code> 获取的，将其换成 <code>Activity</code> 问题解决。</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Android]不同Context区别/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/40481055" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/40481055</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;l
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」从浏览器中打开我们的应用</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5D%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E6%89%93%E5%BC%80%E6%88%91%E4%BB%AC%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]从浏览器中打开我们的应用/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-需求"><a href="/1970/01/01/[Android]从浏览器中打开我们的应用/#0x01-需求" class="headerlink" title="0x01 需求"></a>0x01 需求</h2><p>有时候你会发现，用Android系统自带的浏览器（chrome）打开一个web页面，如果安装了相应的App，就会自动打开这个App并进入具体的界面中，比如手机上打开：</p>
<p><code>https://www.zhihu.com/openinapp_instruction?app-id=432274380&amp;app-argument=zhihu://questions/24122524</code></p>
<p>如果我们安装了知乎手机客户端，这个时候会自动打开知乎手机客户端，并且进入问题展示界面。还比如网易云音乐，今日头条等等App都是支持这个功能的。之前我们自家App的分享都是打开一个App介绍的界面，即使安装了手机客户端，也不会自动打开手机客户端。为了追求更好的体验，我们需要实现这个功能。</p>
<h2 id="0x01-Chrome浏览器"><a href="/1970/01/01/[Android]从浏览器中打开我们的应用/#0x01-Chrome浏览器" class="headerlink" title="0x01 Chrome浏览器"></a>0x01 Chrome浏览器</h2><p>研究这个功能，还是查阅了不少资料，比如 app link、deep link、chrome browser等等，如果紧紧是实现上面介绍的功能，还是 so easy的，仅仅需要了解 <code>Chrome</code> 浏览器 创建 Intent 的方法即可。</p>
<p>Chrome构造一个 Intent 的基本语法如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">intent:</div><div class="line">   HOST/URI-path // Optional host </div><div class="line">   #Intent; </div><div class="line">      package=[string]; </div><div class="line">      action=[string]; </div><div class="line">      category=[string]; </div><div class="line">      component=[string]; </div><div class="line">      scheme=[string]; </div><div class="line">   end;</div></pre></td></tr></table></figure>
<p>根据上面的语法，我们来看一个demo：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">intent:</div><div class="line">   //article/51348656</div><div class="line">   #Intent; </div><div class="line">      package=com.ttdevs.android; </div><div class="line">      scheme=ttdevs; </div><div class="line">   end;</div></pre></td></tr></table></figure>
<p>可以使用下面的 html 代码触发这个事件：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"intent://article/51348656/#Intent;scheme=ttdevs;package=com.ttdevs.android;end"</span>&gt;</span>ttdevs<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>另外还有个参数：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">S.browser_fallback_url=[encoded_full_url]</div></pre></td></tr></table></figure>
<p>介绍如下（不过我没搞明白）：</p>
<blockquote>
<p>When an intent could not be resolved, or an external application could not be launched, then the user will be redirected to the fallback URL if it was given.<br>Some example cases where Chrome does not launch an external application are as follows:</p>
<ul>
<li>The intent could not be resolved, i.e., no app can handle the intent.</li>
<li>JavaScript timer tried to open an application without user gesture.<br>Note that S.<name> is a way to define string extras. S.browser_fallback_url was chosen for backward compatibility, but the target app won’t see browser_fallback_url value as Chrome removes it.</name></li>
</ul>
</blockquote>
<h2 id="0x02-App内处理浏览器发来的Intent"><a href="/1970/01/01/[Android]从浏览器中打开我们的应用/#0x02-App内处理浏览器发来的Intent" class="headerlink" title="0x02 App内处理浏览器发来的Intent"></a>0x02 App内处理浏览器发来的Intent</h2><p>通过上面的介绍，如果我们点击链接，就会触发一个 Intent，有了Intent，我们还需要来处理它。在 <code>AndroidManifest.xml</code> 中相应的 Activity 中的配置中添加如下filter：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:host</span>=<span class="string">"article"</span> <span class="attr">android:pathPattern</span>=<span class="string">"/.*"</span> <span class="attr">android:scheme</span>=<span class="string">"ttdevs"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure>
<p>同时在Activity中处理Intent：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_router);</div><div class="line"></div><div class="line">        handleIntent(getIntent());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        String action = intent.getAction();</div><div class="line">        String data = intent.getDataString();</div><div class="line">        LogUtils.debug(action);</div><div class="line">        LogUtils.debug(data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行上面的代码，同时用系统浏览器打开上面的html，点击链接，即可调起我们的app。或者也可以通过下面的adb命令触发：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">adb shell am start \</div><div class="line">-a android.intent.action.VIEW \</div><div class="line">-c android.intent.category.BROWSABLE \</div><div class="line">-d &quot;ttdevs://article/12345&quot; com.ttdevs.android</div></pre></td></tr></table></figure>
<p>在我的设备（魅族MX4 Pro）上，如果没有安装处理这个 Intent 的App，则会打开系统自带的应用市场。</p>
<p>对于一个提供查询食物数据的App，如果我们分享出去的食物信息带上了相关的参数，在用户点击分享链接时，如果安装了我们的App则可以跳到App中展示食物的界面，如果没有安装，则会跳到应用市场下载，很好的逻辑～～</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Android]从浏览器中打开我们的应用/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ul>
<li><a href="https://developer.chrome.com/multidevice/android/intents" target="_blank" rel="external">https://developer.chrome.com/multidevice/android/intents</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-需求&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]从浏览器中打开我们的应用/#0x01-需求&quot; class=&quot;headerlink&quot; title=&quot;0x01 需求&quot;&gt;&lt;/a&gt;0x01 需求&lt;/h2&gt;&lt;p&gt;有时候你会发现，用Android
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」仿联系人列表上的字母索引</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5D%E4%BB%BF%E8%81%94%E7%B3%BB%E4%BA%BA%E5%88%97%E8%A1%A8%E4%B8%8A%E7%9A%84%E5%AD%97%E6%AF%8D%E7%B4%A2%E5%BC%95/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]仿联系人列表上的字母索引/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个小功能github有很多。不同的应用需求会有少许差别，比如listview滑动时字母是不是跟随滑动；手动点击字母是不是在屏幕中间显示一个提示；点击时索引的背景显示出来，离开后背景消失等等，当然这些都是细节问题。实现思路上也可以有多种，比如自己去draw每个字母，然后处理滑动、借助TextView来展示字母列表等。看了几个demo，感觉和自己的需求有些差别，而且这些demo为了实现”大而全”有些多余的东西，因此决定自己写个。</p>
<h2 id="0x01-分析"><a href="/1970/01/01/[Android]仿联系人列表上的字母索引/#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>我们的需求是这样的：中文参与索引，字母或者其他开头的item不参与索引，直接放到第一个“#”里；点击字母索引其被点击字母列表颜色跟随变化；手动滑动listview字母索引的字母颜色也跟随变化；自己顺手加了个点击某个字母弹出提示的接口。最后效果如下图：</p>
<p><img src="http://img.blog.csdn.net/20140831140659685?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="Letter Index">  </p>
<h2 id="0x02-实现"><a href="/1970/01/01/[Android]仿联系人列表上的字母索引/#0x02-实现" class="headerlink" title="0x02 实现"></a>0x02 实现</h2><p>决定直接使用垂直方向的LinearLayout嵌套TextView来展示字母列表。思路如下：根据索引高度，大概计算每个字母的高度，然后添加到Linearlayout中；然后处理Linearlayout的touch事件，拿到坐标计算当前应该索引哪个。其中遇到的主要问题是对TextView的把握，比如它的高度如何计算？（真正实现的时候你会发现它有个paddingTop和paddingBottom）其他的比如滑动逻辑这些调试下即可，直接上代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 右侧字母索引。可作为一个独立的view插入自己的布局中&lt;br&gt;</div><div class="line"> * &lt;br&gt;</div><div class="line"> * 描述：&lt;br&gt;</div><div class="line"> * 线型布局中嵌套一个线型布局（目的为了增大可滑动区域的面积，若不考虑此可不使用嵌套）。&lt;br&gt;</div><div class="line"> * 每个字母插入内嵌的线性布局中，根据控件的高度计算每个字母的尺寸。&lt;br&gt;</div><div class="line"> * &lt;br&gt;</div><div class="line"> * 使用：&lt;br&gt;</div><div class="line"> * 将此view插入你的布局文件中，初始化完成之后设置你的ListView和索引用的数据源(需要自己组织排序数据源)即可。&lt;br&gt;</div><div class="line"> * &lt;br&gt;</div><div class="line"> * 数据源的组织：若某项不参与排序则数据源中设置为'0'或其他小于'A'的ASCII字符，内部会将所有字符转换成大写，所以务必在外部做好排序。&lt;br&gt;</div><div class="line"> * &lt;br&gt;</div><div class="line"> * 建议：若你的数据中包括ASCII码为a0、20的字符，建议剔除，如：&lt;br&gt;</div><div class="line"> * str.replace(' ', ' '); // a0-&gt;20 str.replaceAll(" ", "");&lt;br&gt;</div><div class="line"> * &lt;br&gt;</div><div class="line"> * 如果你处理的是中文，可使用libs中的pinyin4j处理</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> ttdevs 2014-07-31</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListViewLetterIndicator</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> <span class="keyword">implements</span> <span class="title">OnScrollListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INDICATOR = <span class="string">"#ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinearLayout llMain;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ListView mListView; <span class="comment">// ListView</span></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; mData; <span class="comment">// 数据源</span></div><div class="line">    <span class="keyword">private</span> TextView tvAlert; <span class="comment">// 显示当前的字母</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mIndex; <span class="comment">// 当前所处的indicator位置</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> scrollable = <span class="keyword">true</span>; <span class="comment">//</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewLetterIndicator</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewLetterIndicator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line"></div><div class="line">        setOrientation(LinearLayout.VERTICAL);</div><div class="line">        setBackgroundColor(getResources().getColor(R.color.letter_indicator_background));</div><div class="line">        <span class="comment">// setPadding(8, 8, 8, 8);</span></div><div class="line"></div><div class="line">        llMain = <span class="keyword">new</span> LinearLayout(getContext());</div><div class="line">        llMain.setOrientation(LinearLayout.VERTICAL);</div><div class="line">        llMain.setGravity(Gravity.CENTER);</div><div class="line">        <span class="comment">// llMain.setPadding(2, 2, 2, 2);</span></div><div class="line"></div><div class="line">        <span class="keyword">int</span> width = (<span class="keyword">int</span>) getResources().getDimension(R.dimen.letter_indicator_width);</div><div class="line">        addView(llMain, width, LinearLayout.LayoutParams.MATCH_PARENT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置数据源</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> lv   绑定的ListView</div><div class="line">     * <span class="doctag">@param</span> data 排序用的数据源</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(ListView lv, List&lt;String&gt; data)</span> </span>&#123;</div><div class="line">        setData(lv, data, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置数据源</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> lv   绑定的ListView</div><div class="line">     * <span class="doctag">@param</span> data 排序用的数据源</div><div class="line">     * <span class="doctag">@param</span> tv   显示当前所处字母的TextView</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"DefaultLocale"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(ListView lv, List&lt;String&gt; data, TextView tv)</span> </span>&#123;</div><div class="line">        mListView = lv;</div><div class="line">        mData = data;</div><div class="line">        tvAlert = tv;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mData.size(); i++) &#123;</div><div class="line">            String str = mData.get(i);</div><div class="line">            mData.set(i, str.toUpperCase());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mListView.setOnScrollListener(<span class="keyword">this</span>);</div><div class="line">        mIndex = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> childCount = llMain.getChildCount();</div><div class="line">        <span class="keyword">if</span> (childCount == INDICATOR.length()) &#123;</div><div class="line">            <span class="comment">// llMain.invalidate();</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> height = llMain.getHeight();</div><div class="line">        <span class="keyword">int</span> textHeight = (<span class="keyword">int</span>) Math.floor(height / (INDICATOR.length() + <span class="number">6</span>));</div><div class="line"></div><div class="line">        LinearLayout.LayoutParams llpText = <span class="keyword">new</span> LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,</div><div class="line">                LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INDICATOR.length(); i++) &#123;</div><div class="line">            String str = String.valueOf(INDICATOR.charAt(i));</div><div class="line">            TextView tvIndicator = <span class="keyword">new</span> TextView(getContext());</div><div class="line">            tvIndicator.setText(str);</div><div class="line">            tvIndicator.setIncludeFontPadding(<span class="keyword">false</span>);</div><div class="line">            tvIndicator.setTextSize(TypedValue.COMPLEX_UNIT_PX, textHeight);</div><div class="line">            tvIndicator.setTextColor(getResources().getColor(R.color.letter_indicator_text_normal));</div><div class="line">            <span class="comment">// tvIndicator.setPadding(0, -4, 0, -4);</span></div><div class="line">            llMain.addView(tvIndicator, llpText);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"DefaultLocale"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> action = ev.getAction();</div><div class="line">        <span class="keyword">switch</span> (action) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                scrollable = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">float</span> y = ev.getY();</div><div class="line">                <span class="keyword">float</span> childY = <span class="number">0</span>;</div><div class="line">                <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INDICATOR.length(); i++) &#123;</div><div class="line">                    TextView view = (TextView) llMain.getChildAt(i);</div><div class="line">                    childY = view.getTop();</div><div class="line">                    <span class="keyword">int</span> height = view.getHeight();</div><div class="line">                    <span class="keyword">if</span> (childY &lt; y &amp;&amp; childY + height &gt; y) &#123;</div><div class="line">                        index = i;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    view = <span class="keyword">null</span>; <span class="comment">// not neccessary</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                TextView view = (TextView) llMain.getChildAt(INDICATOR.length() - <span class="number">1</span>);</div><div class="line">                <span class="keyword">if</span> (y &gt; view.getTop()) &#123;</div><div class="line">                    index = INDICATOR.length() - <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                view = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">                changeIndicatorColor(index);</div><div class="line"></div><div class="line">                <span class="keyword">char</span> indexIndicator = INDICATOR.charAt(index);<span class="comment">// A:65, #:23</span></div><div class="line">                <span class="keyword">if</span> (indexIndicator &lt; <span class="string">'A'</span>) &#123;</div><div class="line">                    mListView.setSelection(<span class="number">0</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mData.size(); i++) &#123;</div><div class="line">                        <span class="keyword">if</span> (mData.get(i).charAt(<span class="number">0</span>) &gt;= indexIndicator) &#123;</div><div class="line">                            mListView.setSelection(i);</div><div class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        scrollable = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;, <span class="number">100</span>);</div><div class="line">                showText(<span class="string">""</span>, <span class="keyword">false</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;</div><div class="line">        <span class="comment">// invalidate();</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"DefaultLocale"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (!scrollable || <span class="keyword">null</span> == mData || mData.size() == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != mData) &#123;</div><div class="line">                String str = mData.get(firstVisibleItem);</div><div class="line">                <span class="keyword">char</span> indicator = str.charAt(<span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span> (indicator &lt; <span class="string">'A'</span>) &#123;</div><div class="line">                    changeIndicatorColor(<span class="number">0</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; INDICATOR.length(); i++) &#123;</div><div class="line">                    <span class="keyword">if</span> (INDICATOR.charAt(i) == indicator) &#123;</div><div class="line">                        changeIndicatorColor(i);</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeIndicatorColor</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mIndex != <span class="number">0</span> &amp;&amp; mIndex == index) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        TextView tv = (TextView) llMain.getChildAt(mIndex);</div><div class="line">        tv.setTextColor(getResources().getColor(R.color.letter_indicator_text_normal));</div><div class="line"></div><div class="line">        tv = (TextView) llMain.getChildAt(index);</div><div class="line">        tv.setTextColor(getResources().getColor(R.color.letter_indicator_text_select));</div><div class="line"></div><div class="line">        mIndex = index;</div><div class="line"></div><div class="line">        showText(String.valueOf(INDICATOR.charAt(mIndex)), <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showText</span><span class="params">(String text, <span class="keyword">boolean</span> isShow)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != tvAlert) &#123;</div><div class="line">            tvAlert.setText(text);</div><div class="line">            tvAlert.setVisibility(isShow ? View.VISIBLE : View.INVISIBLE);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// private Drawable initBackground() &#123;</span></div><div class="line">    <span class="comment">// float[] roundRect = new float[] &#123; 12, 12, 12, 12, 12, 12, 12, 12 &#125;;</span></div><div class="line">    <span class="comment">// RoundRectShape reoundRechShape = new RoundRectShape(roundRect, null,</span></div><div class="line">    <span class="comment">// null);</span></div><div class="line">    <span class="comment">// ShapeDrawable drawable = new ShapeDrawable(reoundRechShape);</span></div><div class="line">    <span class="comment">// drawable.getPaint().setColor(Color.parseColor(GRAY_AA));</span></div><div class="line">    <span class="comment">// // drawable.getPaint().setStyle(Paint.Style.FILL);</span></div><div class="line">    <span class="comment">// return drawable;</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试过程中发现，有些item明明是汉字开头的（这个时候你可能还需要个汉字转拼音的工具包），却出现在“#”里，仔细检查，你会发现，那个并不是空格，细节请看代码注释。 由于很简单，不做详细介绍，仅仅做个记录，有问题可以留言一起讨论。</p>
<h2 id="0x04-Demo"><a href="/1970/01/01/[Android]仿联系人列表上的字母索引/#0x04-Demo" class="headerlink" title="0x04 Demo"></a>0x04 Demo</h2><p>最后附个测试demo： <a href="http://download.csdn.net/detail/ttdevs/7846559" target="_blank" rel="external">下载</a></p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个小功能github有很多。不同的应用需求会有少许差别，比如listview滑动时字母是不是跟随滑动；手动点击字母是不是在屏幕中间显示一个提示；点击时索引的背景显示出来，离开后背景消失等等，当然这些都是细节问题。实现思路上也可以有多种，比如自己去draw每个字母，然后处理
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」使用VideoView和MediaController进行视频播放</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5D%E4%BD%BF%E7%94%A8VideoView%E5%92%8CMediaController%E8%BF%9B%E8%A1%8C%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]使用VideoView和MediaController进行视频播放/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20131121171540296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 视频播放的activity&lt;br&gt;</div><div class="line"> * 使用方法：&lt;br&gt;</div><div class="line"> * 1、AndroidManifest.xml中添加此activity&lt;br&gt;</div><div class="line"> * 2、Intent中存入待播放视频的URL，支持本地和网络&lt;br&gt;</div><div class="line"> * 3、启动这个activity&lt;br&gt;</div><div class="line"> * &lt;br&gt;</div><div class="line"> * example：&lt;br&gt;</div><div class="line"> * String url = "play url";&lt;br&gt;</div><div class="line"> * Intent intent = new Intent();&lt;br&gt;</div><div class="line"> * intent.setClass(this, VideoPlayActivity.class);&lt;br&gt;</div><div class="line"> * intent.putExtra(VideoPlayActivity.KEY_URL, url);&lt;br&gt;</div><div class="line"> * startActivity(intent);&lt;br&gt;</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> ttworking</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoPlayActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnPreparedListener</span>, <span class="title">OnErrorListener</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_URL = <span class="string">"view_url"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"VideoPlayActivity"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PLAY_RETURN = <span class="number">2</span> * <span class="number">1000</span>; <span class="comment">// 2 seconds</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PLAY_POSITON = <span class="string">"paly_position"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOAST_ERROR_URL = <span class="string">"Paly url is null, please check parameter:"</span> + KEY_URL;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOAST_ERROR_PLAY = <span class="string">"Paly error, please check url exist!"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIALOG_TITILE = <span class="string">"奋力加载中，请稍后..."</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ProgressDialog progressDialog;</div><div class="line">    <span class="keyword">private</span> MediaController mc;</div><div class="line">    <span class="keyword">private</span> VideoView videoView;</div><div class="line">    <span class="keyword">private</span> LinearLayout llMain;</div><div class="line">    <span class="keyword">private</span> LayoutParams params = <span class="keyword">new</span> LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        url = getIntent().getStringExtra(KEY_URL);</div><div class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span> &amp;&amp; savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">            url = savedInstanceState.getString(KEY_URL);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</div><div class="line">            Toast.makeText(getApplicationContext(), TOAST_ERROR_URL, Toast.LENGTH_LONG).show();</div><div class="line">            finish();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setTheme(android.R.style.Theme_NoTitleBar_Fullscreen);</div><div class="line"></div><div class="line">        videoView = <span class="keyword">new</span> VideoView(<span class="keyword">this</span>);</div><div class="line">        videoView.setVideoURI(Uri.parse(url));</div><div class="line">        videoView.requestFocus();</div><div class="line">        videoView.setOnPreparedListener(<span class="keyword">this</span>);</div><div class="line">        videoView.setOnErrorListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mc = <span class="keyword">new</span> MediaController(<span class="keyword">this</span>);</div><div class="line">        mc.setAnchorView(videoView);</div><div class="line">        mc.setKeepScreenOn(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        videoView.setMediaController(mc);</div><div class="line"></div><div class="line">        llMain = <span class="keyword">new</span> LinearLayout(<span class="keyword">this</span>);</div><div class="line">        llMain.setGravity(Gravity.CENTER_VERTICAL);</div><div class="line">        llMain.setOrientation(LinearLayout.VERTICAL);</div><div class="line">        llMain.setLayoutParams(params);</div><div class="line"></div><div class="line">        llMain.addView(videoView, params);</div><div class="line">        setContentView(llMain);</div><div class="line"></div><div class="line">        initDialog();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> palyPosition = videoView.getCurrentPosition();</div><div class="line">        <span class="keyword">if</span> (palyPosition &gt; PLAY_RETURN) &#123;</div><div class="line">            palyPosition -= PLAY_RETURN;</div><div class="line">        &#125;</div><div class="line">        outState.putInt(KEY_PLAY_POSITON, palyPosition);</div><div class="line">        outState.putString(KEY_URL, url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRestoreInstanceState(savedInstanceState);</div><div class="line"></div><div class="line">        videoView.seekTo(savedInstanceState.getInt(KEY_PLAY_POSITON));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">(MediaPlayer mp)</span> </span>&#123;</div><div class="line">        progressDialog.cancel();</div><div class="line"></div><div class="line">        videoView.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onError</span><span class="params">(MediaPlayer mp, <span class="keyword">int</span> what, <span class="keyword">int</span> extra)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"onError:"</span> + url);</div><div class="line"></div><div class="line">        Toast.makeText(getApplicationContext(), TOAST_ERROR_PLAY + <span class="string">"\n"</span> + url, Toast.LENGTH_LONG).show();</div><div class="line">        progressDialog.cancel();</div><div class="line">        finish();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDialog</span><span class="params">()</span> </span>&#123;</div><div class="line">        progressDialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line">        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);</div><div class="line">        progressDialog.setMessage(DIALOG_TITILE);</div><div class="line">        progressDialog.setCancelable(<span class="keyword">false</span>);</div><div class="line">        progressDialog.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20131121171540296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fil
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>「Android」内存泄漏相关内容总结(上)</title>
    <link href="https://ttdevs.github.io/1970/01/01/%5BAndroid%5D%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93(%E4%B8%8A)/"/>
    <id>https://ttdevs.github.io/1970/01/01/[Android]内存泄漏相关内容总结(上)/</id>
    <published>1969-12-31T16:00:00.000Z</published>
    <updated>2017-04-27T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-忏悔"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0x00-忏悔" class="headerlink" title="0x00 忏悔"></a>0x00 忏悔</h2><p>好久没有认真的写博客了，草稿箱中静静躺着好几篇，但总是不能把他们写完，一直没有写的心情把，罪过…</p>
<p>废话一句说完，进入今天的正题：内存泄露的相关知识。</p>
<h2 id="0x01-内存问题"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0x01-内存问题" class="headerlink" title="0x01 内存问题"></a>0x01 内存问题</h2><p>很多时候我们是需要查看自己的应用内存占用情况，比如当出现闪退，异常退出时：</p>
<ul>
<li><p>界面内存占用：比如我们的启动画面，如果出现OOM的问题，这个时候可以通过差看内存情况，如果确是内存占用比较大就可以考虑做相应优化</p>
</li>
<li><p>内存泄漏的初步查找：这个和直接的OOM有些差别，虽然他最终也会导致OOM。方法：反复打开、关闭可能内存泄漏的界面，如果每次打开关闭之后内存都有所增加，就可以初步判断为内存泄漏。正常情况应用是进入界面内存占用有所增加，但是离开后内存会降到之前的水平。</p>
</li>
</ul>
<h2 id="0x02-内存泄漏与内存溢出-OOM-的区别与联系"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0x02-内存泄漏与内存溢出-OOM-的区别与联系" class="headerlink" title="0x02 内存泄漏与内存溢出(OOM)的区别与联系"></a>0x02 内存泄漏与内存溢出(OOM)的区别与联系</h2><p>内存溢出做android开发的各位应该是比较熟悉，图片加载稍微不小心就会导致out of memory的错误，这个错误出现的原因就是我们的应用去申请内存时系统无法再分配导致的。所以我们需要有节制的使用内存。</p>
<p>和C++相比，java的一个很大特点就是有GC，我们不需要去专注内存的释放与回收。但是，这也不是绝对的：当我们的代码出现问题导致GC无法及时的回收相关的内存时就会导致内存泄漏。这句不算太规范的描述（语文太差，见谅）他的重点是什么呢——GC无法及时的回收相关内存——这将导致我们的内存占用越来越多——最终的体现就是OOM。</p>
<p>希望这个简单的描述，各位可以理解什么是memory leak和OOM。</p>
<h2 id="0x03-DDMS-给我们的提示"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0x03-DDMS-给我们的提示" class="headerlink" title="0x03 DDMS 给我们的提示"></a>0x03 DDMS 给我们的提示</h2><ul>
<li>logcat中的信息</li>
</ul>
<p>关于内存的信息，logcat会给我们一些提示信息，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D/dalvikvm( 9050): GC_CONCURRENT freed 2049K, 65% free 3571K/9991K, external 4703K/5261K, paused 2ms+2ms</div></pre></td></tr></table></figure>
<p>这行信息怎么理解？它包含哪些信息呢？通过 <a href="https://developer.android.com/tools/debugging/debugging-memory.html#LogMessages" target="_blank" rel="external">DDMS的文档</a> 我们可以得知这个信息的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D/dalvikvm(dvm pid): &lt;GC_Reason&gt; &lt;Amount_freed&gt;, &lt;Heap_stats&gt;, &lt;External_memory_stats&gt;, &lt;Pause_time&gt;</div></pre></td></tr></table></figure>
<p>这行信息我们主要关注的是：GC_Reason，他主要有下面几种：</p>
<pre><code>GC_CONCURRENT()

A concurrent garbage collection that frees up memory as your heap begins to
fill up.

GC_FOR_MALLOC(当我们的应用申请内存时触发)

A garbage collection caused because your app attempted to allocate memory when
your heap was already full, so the system had to stop your app and reclaim
memory.

GC_HPROF_DUMP_HEAP()

A garbage collection that occurs when you create an HPROF file to analyze your
heap.

GC_EXPLICIT(当我们手动点击DDMS&gt;heap&gt;Cause GC按钮时会触发)

An explicit garbage collection, such as when you call gc() (which you should
avoid calling and instead trust the garbage collector to run when needed).

GC_EXTERNAL_ALLOC()

This happens only on API level 10 and lower (newer versions allocate everything in the Dalvik heap). A garbage collection for externally allocated memory (such as the pixel data stored in native memory or NIO byte buffers).
</code></pre><p>当我们在app在出现问题时可以根据这些信息做初步判断。比如频繁出现GC_FOR_AMLLOC则预示着我们一直在申请内存。  </p>
<ul>
<li>heap页签的内存信息</li>
</ul>
<p>通过这个工具这个我们可以更详细的看到内存的分配与使用。启动方法：</p>
<p><code>点击DDMS中我们的进程</code> &gt; <code>上部的Update heap按钮</code> &gt; <code>Cause GC</code> 即可，如下图：</p>
<p><img src="http://img.blog.csdn.net/20141214202523491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="0x04-通过内存快照更精准的查找内存信息"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0x04-通过内存快照更精准的查找内存信息" class="headerlink" title="0x04 通过内存快照更精准的查找内存信息"></a>0x04 通过内存快照更精准的查找内存信息</h2><p>当我们出现内存泄漏问题是，初学者可能会一头雾水，不知道如何解决，从何下手。这个时候我们就可以考虑使用mat对我们的内存进行详细的分析，找到内存泄漏点，做相应的处理。</p>
<ul>
<li><code>Shallow size</code> 和 <code>Retained Size</code></li>
</ul>
<p>在进行内存分析之前我们需要首先了解这两个概念。</p>
<ul>
<li>Shallow size</li>
</ul>
<p>Shallow size就是对象本身占用内存的大小，不包含其引用的对象。常规对象（非数组）的Shallow size有其成员变量的数量和类型决定。数组的shallow size有数组元素的类型（对象类型、基本类型）和数组长度决定。Shallow size of a set of objects represents the sum of shallow sizes of all objects in the set.在32位系统上，对象头占用8字节，int占用4字节，不管成员变量（对象或数组）是否引用了其他对象（实例）或者赋值为null它始终占用4字节。故此，对于String对象实例来说，它有三个int成员（3<em>4=12字节）、一个char[]成员（1</em>4=4字节）以及一个对象头（8字节），总共3<em>4+1</em>4+8=24字节。根据这一原则，对String a=”rosen jiang”来说，实例a的shallow size也是24字节。</p>
<ul>
<li>Retained Size</li>
</ul>
<p>Retained Size=当前对象大小+当前对象可直接或间接引用到的对象的大小总和(间接引用的含义：A-&gt;B-&gt;C, C就是间接引用)。换句话说，Retained Size 就是当前对象被GC后，从Heap上总共能释放掉的内存。<br>不过，释放的时候还要排除被GC Roots直接或间接引用的对象。他们暂时不会被被当做Garbage。为了更好的理解retained size，不妨看个例子。把内存中的对象看成下图中的节点，并且对象和对象之间互相引用。这里有一个特殊的节点GC Roots，这就是reference chain的起点。</p>
<p><img src="http://img.blog.csdn.net/20141214203439460?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><img src="http://img.blog.csdn.net/20141214203446937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<p>从obj1入手，上图中蓝色节点代表仅仅只有通过obj1才能直接或间接访问的对象。因为可以通过GC Roots访问，所以左图的obj3不是蓝色节点；而在右图却是蓝色，因为它已经被包含在retained集合内。</p>
<p>所以对于左图，obj1的retained size是obj1、obj2、obj4的shallow size总和；右图的retained size是obj1、obj2、obj3、obj4的shallow size总和。</p>
<p>对于obj2，它的retained size是：在左图中，是obj2和obj4的shallow size的和；在右图中，是obj2、obj3和obj4的shallow size的和。</p>
<p>总之，retained size是一个整体度量，有助于理解内存结构和对象图中的依赖关系并找到根节点。</p>
<ul>
<li>HPROF file——内存快照文件</li>
</ul>
<p>首先这个文件可以通过点击 DDMS 中 Update heap 右侧的 Dump HPROF file 得到（这个有时候可能会比较慢，特别是内存占用高的时候，需要等一会，出现hprof: dumping heap strings to “[DDMS]”.即代表已经触发）。</p>
<p>得到这个文件之后，我们还需要使用SDK的platform-tools文件夹下的“hprof-conv”工具进行转换，然后就可以使用内存分析工具查看了。转换方法：</p>
<p><code>hprof-conv heap-original.hprof heap-converted.hprof</code></p>
<h2 id="0x05-内存分析工具MAT"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0x05-内存分析工具MAT" class="headerlink" title="0x05 内存分析工具MAT"></a>0x05 内存分析工具MAT</h2><p>这个是专门做内存分析的工具。通过它我们可以打开刚才转换后的到hprof文件，进行内存分析。每次都点击保存，转换，然后打开还是比较麻烦的。这个时候我们可以考虑<br>使用eclipse的mat插件。</p>
<p>这篇就先写到这里。下一篇简单介绍如何通过MAT查找内存泄漏的问题。  </p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://developer.android.com/tools/debugging/debugging-memory.html" target="_blank" rel="external">https://developer.android.com/tools/debugging/debugging-memory.html</a></li>
<li><a href="http://blog.csdn.net/kingzone_2008/article/details/9083327" target="_blank" rel="external">http://blog.csdn.net/kingzone_2008/article/details/9083327</a></li>
<li><a href="http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.mat.ui.help%2Fconcepts%2Fshallowretainedheap.html&amp;resultof=%22Shallow%22%20%22shallow%22%20%22size%22%20" target="_blank" rel="external">http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.mat.ui.help%2Fconcepts%2Fshallowretainedheap.html&amp;resultof=%22Shallow%22%20%22shallow%22%20%22size%22%20</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-忏悔&quot;&gt;&lt;a href=&quot;/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0x00-忏悔&quot; class=&quot;headerlink&quot; title=&quot;0x00 忏悔&quot;&gt;&lt;/a&gt;0x00 忏悔&lt;/h2&gt;&lt;p&gt;好久没有认真的写博客了，草稿箱
    
    </summary>
    
      <category term="技术" scheme="https://ttdevs.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ttdevs.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
