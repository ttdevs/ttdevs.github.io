<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[[Android]从通过view.post()获取View宽高谈Android消息机制]]></title>
      <url>/2017/07/26/Android-%E4%BB%8E%E9%80%9A%E8%BF%87view-post-%E8%8E%B7%E5%8F%96View%E5%AE%BD%E9%AB%98%E8%B0%88Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="0x00-通过view-post-获取View宽高"><a href="/2017/07/26/Android-从通过view-post-获取View宽高谈Android消息机制/#0x00-通过view-post-获取View宽高" class="headerlink" title="0x00 通过view.post()获取View宽高"></a>0x00 通过view.post()获取View宽高</h2><p>有时候我们希望在界面初始话的时候根据View的尺寸来做一些相关的操作（调整），那如何获取View的尺寸呢？</p>
<ul>
<li><p>在Activity的 <code>onCreate()</code> 方法中 delay 几百毫秒<br><br>  由于我们知道在 <code>onCreate()</code> 中直接获取View的尺寸得到的宽高都是0，这个不经思考的答案相信很多人在用。</p>
</li>
<li><p>如果你Google过答案，一般会有下面这几种方法：</p>
<ul>
<li><p>onWindowFocusChanged</p>
<p>  重写Activity的 <code>onWindowFocusChanged()</code> 方法，当Activity的焦点状态发生变化时会回调这个方法，参数 <code>hasFocus</code> 为 <code>true</code> 时表示已经获取到焦点，这个时候View的绘制已经完成，也就可以获取到View的尺寸了。</p>
<pre><code>@Override
public void onWindowFocusChanged(boolean hasFocus) {
  super.onWindowFocusChanged(hasFocus);
  if (hasFocus) {
      System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;onWindowFocusChanged&quot; + tvLog.getWidth());
      System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;onWindowFocusChanged&quot; + tvLog.getHeight());
  }
}
</code></pre></li>
<li><p>ViewTreeObserver.addOnPreDrawListener or .addOnGlobalLayoutListener</p>
<p>  这个方法的缺点是会多次调用。</p>
<pre><code>private void getViewSize(){
    tvLog.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
        @Override
        public boolean onPreDraw() {
            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;addOnPreDrawListener&quot; + tvLog.getWidth());
            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;addOnPreDrawListener&quot; + tvLog.getHeight());
            return true;
        }
    });
    tvLog.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
        @Override
        public void onGlobalLayout() {
            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;addOnGlobalLayoutListener&quot; + tvLog.getWidth());
            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;addOnGlobalLayoutListener&quot; + tvLog.getHeight());
        }
    });
}
</code></pre></li>
<li><p>view.post()</p>
<p>  这中方法是我个人推荐的方法，接下来的内容会着重分析。</p>
<pre><code>private void getViewSize() {
    tvLog.post(new Runnable() {
        @Override
        public void run() {
            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;post&quot; + tvLog.getWidth());
            System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;post&quot; + tvLog.getHeight());
        }
    });
}
</code></pre></li>
<li><p>当然，还会有一些其他方法，比如手动measure，在View内部获取等等</p>
</li>
</ul>
</li>
</ul>
<p><a href="https://stackoverflow.com/questions/3591784/getwidth-and-getheight-of-view-returns-0" target="_blank" rel="external">可以参考这里</a></p>
<p>以上的几种方法都可以，下面针对View.post做一个分析。</p>
<h2 id="0x01-Android系统的消息机制"><a href="/2017/07/26/Android-从通过view-post-获取View宽高谈Android消息机制/#0x01-Android系统的消息机制" class="headerlink" title="0x01 Android系统的消息机制"></a>0x01 Android系统的消息机制</h2><p>Android系统的消息机制，是每个初学者都必须掌握的基础知识。以前学习的时候有看过，初面试的时候也去突击过，但是都深入的去理解去掌握，惭愧呢。</p>
<p>对于一个消息系统，大家可以类比下生活中的快递系统：有发件人，有收件人，有快递公司，当然还有最重要的信件。通过这个系统我们可以将不同的信件投送到不同的地方，比如从个人投送到政府部门，从国内投送到国外等。下面的表格看起来会更直观一些：</p>
<table>
<thead>
<tr>
<th style="text-align:center">快递系统</th>
<th style="text-align:center">Android消息系统</th>
<th style="text-align:center">职责</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">发件人</td>
<td style="text-align:center">Handler</td>
<td style="text-align:center">发送消息</td>
</tr>
<tr>
<td style="text-align:center">收件人</td>
<td style="text-align:center">Handler</td>
<td style="text-align:center">接收处理消息</td>
</tr>
<tr>
<td style="text-align:center">快件</td>
<td style="text-align:center">Message</td>
<td style="text-align:center">发送的内容</td>
</tr>
<tr>
<td style="text-align:center">快递公司</td>
<td style="text-align:center">Looper / MessageQueue</td>
<td style="text-align:center">接收消息、传递消息、分发消息</td>
</tr>
</tbody>
</table>
<p>相信这个简单的对比对理解消息机制会有很大帮助。接下来我们再来看看这个系统是如何运行的。</p>
<p>先看一下消息系统的简单使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line"></div><div class="line">            printMsg(<span class="string">"handleMessage:"</span> + msg.obj);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.btSendMsg:</div><div class="line">                defaultSendMsg();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">defaultSendMsg</span><span class="params">()</span> </span>&#123;</div><div class="line">        Message msg = <span class="keyword">new</span> Message();</div><div class="line">        msg.obj = <span class="string">"这是最简单的使用方法，但无实际意义"</span>;</div><div class="line">        mHandler.sendMessage(msg);</div><div class="line">        printMsg(<span class="string">"Is MainLooper: "</span> + (mHandler.getLooper() == getMainLooper()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I/System.out: &gt;&gt;&gt;&gt;&gt;Is MainLooper: true</div><div class="line">I/System.out: &gt;&gt;&gt;&gt;&gt;handleMessage:这是最简单的使用方法，但无实际意义</div></pre></td></tr></table></figure>
<p>从这里可以看到，我们需要先创建一个Handler对象，然后通过这个Handler发送消息，然后在Handler中处理接收到的消息。另外我们还看到我们的Looper对象是主线程的Looper，这是因为我们是在Activity跑的这段代码。下面我们来跟一下代码。</p>
<p>从Handler的构造方法开始：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">   ...</div><div class="line"></div><div class="line">   mLooper = Looper.myLooper();</div><div class="line">   <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">           <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">   &#125;</div><div class="line">   mQueue = mLooper.mQueue;</div><div class="line">   mCallback = callback; <span class="comment">// 这个对象我们在后面的dispatchMessage时会用到</span></div><div class="line">   mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们看到，通过 <code>Looper.myLooper()</code> 获取到一个Looper对象，然后再从这个Looper对象中拿到一个MessageQueue对象（mQueue），这样我们很容易得到结论——消息队列是位于Looper中的。那MessageQueue是什么时候创建的，又是怎样处理消息的？带着这些疑问我们接下来看 <code>Handler.sendMessage(msg)</code> (<code>sendMessage()</code> 最终会调到 <code>sendMessageAtTime()</code>)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">   MessageQueue queue = mQueue;</div><div class="line">   <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">       RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">               <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">       Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">   msg.target = <span class="keyword">this</span>;</div><div class="line">   <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">       msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>sendMessageAtTime()</code> 会传入两个参数：<code>Message</code> 和 <code>uptimeMillis</code>，<code>uptimeMillis</code> 的意思是消息将会在这个时刻执行（不是非常精确），这种情况比如常见的 <code>postDelay</code>。在 <code>enqueueMessage()</code> 方法中，会根据这个值将消息加入消息队列，我们还可以看到，在放入队列之前Message的 <code>target</code> 被设置为当前的Handler对象——透露下这个是保证之后消息投递的时候仍分发给当前Handler，这个很重要！</p>
<p>再来看下上面提到的 Looper 和 MessageQueue：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Looper</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// sThreadLocal.get() will return null unless you've called prepare().</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">       &#125;</div><div class="line">       sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Initialize the current thread as a looper, marking it as an</div><div class="line">    * application's main looper. The main looper for your application</div><div class="line">    * is created by the Android environment, so you should never need</div><div class="line">    * to call this function yourself.  See also: &#123;<span class="doctag">@link</span> #prepare()&#125;</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">       prepare(<span class="keyword">false</span>);</div><div class="line">       <span class="keyword">synchronized</span> (Looper.class) &#123;</div><div class="line">           <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</div><div class="line">           &#125;</div><div class="line">           sMainLooper = myLooper();</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Returns the application's main looper, which lives in the main thread of the application.</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">getMainLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">synchronized</span> (Looper.class) &#123;</div><div class="line">           <span class="keyword">return</span> sMainLooper;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Run the message queue in this thread. Be sure to call</div><div class="line">    * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">       <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line">       ...</div><div class="line">       <span class="keyword">for</span> (;;) &#123;</div><div class="line">           Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">           <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           &#125;</div><div class="line">    </div><div class="line">           ...</div><div class="line">    </div><div class="line">           msg.target.dispatchMessage(msg);</div><div class="line">    </div><div class="line">           <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">               logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">           &#125;</div><div class="line">    </div><div class="line">           ...</div><div class="line">    </div><div class="line">           msg.recycleUnchecked();</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">        mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">        mThread = Thread.currentThread();</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Return the Looper object associated with the current thread.  Returns</div><div class="line">    * null if the calling thread is not associated with a Looper.</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> sThreadLocal.get();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Return the &#123;<span class="doctag">@link</span> MessageQueue&#125; object associated with the current</div><div class="line">    * thread.  This must be called from a thread running a Looper, or a</div><div class="line">    * NullPointerException will be thrown.</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@NonNull</span> <span class="function">MessageQueue <span class="title">myQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> myLooper().mQueue;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">       mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">       mThread = Thread.currentThread();</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Looper的构造方法中只是创建了一个 MessageQueue 对象，同时这个方法是私有的，因此这个类无法在外部通过new来创建，。我们看到唯一创建的地方就是 <code>Looper.prepare()</code> 方法中，创建好之后直接被加入到ThreadLocal中。再来看我们刚才用到的 <code>Looper.myLooper()</code> 方法，这其中只有一行很尴尬的代码，<code>sThreadLocal.get()</code> ，它就是从ThreadLocal中获取 <code>属于当前线程的 Looper 对象</code>。关于 ThreadLocal，这个在我的<a href="http://blog.csdn.net/ttdevs/article/details/71375416" target="_blank" rel="external">另一篇文章中有介绍</a>——我们在线程中创建的变量，任何一个线程都可以访问并对其修改，但是我们通过LocalThread创建的变量，就只有当前线程可以访问了。</p>
<p>之前我们知道通过 Handler.sendMessage(msg) 将 Message 存入 MessageQueue 中，在上面的代码中我们可以看到，Looper.loop()中开了一个死循环，将消息从 MessageQueue 中取出然后进行分发。看到 MessageQueue 后我第一个想到就是阻塞队列，结果看了源码之后并不是这么简单。如果想看这个类的分析，可以参考<a href="http://blog.csdn.net/luoshengyang/article/details/6817933/" target="_blank" rel="external">这里</a>，这是最核心的部分，涉及到操作系统的知识，我就不卖弄了。但是这不影响我们将 MessageQueue 按照一个阻塞队列来理解。</p>
<p>再看下Looper是如何使用的。我们在Looper的类注释中可以看到这段信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Class used to run a message loop for a thread.  Threads by default do</div><div class="line">  * not have a message loop associated with them; to create one, call</div><div class="line">  * &#123;<span class="doctag">@link</span> #prepare&#125; in the thread that is to run the loop, and then</div><div class="line">  * &#123;<span class="doctag">@link</span> #loop&#125; to have it process messages until the loop is stopped.</div><div class="line">  *</div><div class="line">  * &lt;p&gt;Most interaction with a message loop is through the</div><div class="line">  * &#123;<span class="doctag">@link</span> Handler&#125; class.</div><div class="line">  *</div><div class="line">  * &lt;p&gt;This is a typical example of the implementation of a Looper thread,</div><div class="line">  * using the separation of &#123;<span class="doctag">@link</span> #prepare&#125; and &#123;<span class="doctag">@link</span> #loop&#125; to create an</div><div class="line">  * initial Handler to communicate with the Looper.</div><div class="line">  *</div><div class="line">  * &lt;pre&gt;</div><div class="line">  *  class LooperThread extends Thread &#123;</div><div class="line">  *      public Handler mHandler;</div><div class="line">  *</div><div class="line">  *      public void run() &#123;</div><div class="line">  *          Looper.prepare();</div><div class="line">  *</div><div class="line">  *          mHandler = new Handler() &#123;</div><div class="line">  *              public void handleMessage(Message msg) &#123;</div><div class="line">  *                  // process incoming messages here</div><div class="line">  *              &#125;</div><div class="line">  *          &#125;;</div><div class="line">  *</div><div class="line">  *          Looper.loop();</div><div class="line">  *      &#125;</div><div class="line">  *  &#125;&lt;/pre&gt;</div><div class="line">  */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Looper</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<p>如果我们需要在自己的线程中实现消息机制，我们需要先执行 <code>Looper.prepare();</code>； 然后创建 Handler对象；最后再执行 <code>Looper.loop()</code>；这个顺序不能颠倒！最后我们再来将这个流程梳理一下：</p>
<ol>
<li><p>Looper.prepare()；</p>
<p> 初始化属于当前线程的 Looper 对象，然后放入 ThreadLocal 中。</p>
</li>
<li><p>new Handler()；</p>
<p> 为什么一定要在 <code>Looper.prepare()</code> 之后 <code>Looper.loop()</code> 之前创建Handler对象呢？ </p>
<p> 答：在 <code>Looper.prepare()</code> 之后是因为 Handler 的构造函数中需要提供当前线程的 Looper 对 象，这个 Looper 对象只能通过 <code>Looper.prepare()</code> 来创建。在 <code>Looper.loop()</code> 之前是因为Looper.loop()是个死循环，写在其后代码是执行不到的（看看最后留的那个问题～）。</p>
</li>
<li><p>Looper.loop();</p>
<p> 这个操作就是开始执行消息循环，处理消息。</p>
</li>
</ol>
<p>小结：</p>
<p>消息机制是Android系统中线程通信非常重要的一种方法。如果向另一个线程传递数据，我们可以在目标线程中启动消息机制，拿到这个线程Looper对象创建一个Handler，通过这个Handler就可以向目标线程发送消息了，反之亦然。</p>
<h2 id="0x03-HandlerThread、AsyncTask-和-UI-Thread"><a href="/2017/07/26/Android-从通过view-post-获取View宽高谈Android消息机制/#0x03-HandlerThread、AsyncTask-和-UI-Thread" class="headerlink" title="0x03 HandlerThread、AsyncTask 和 UI Thread"></a>0x03 HandlerThread、AsyncTask 和 UI Thread</h2><ul>
<li><p>HandlerThread</p>
<p>  从源码可以看到，这个类是对我们Android消息机制的一个封装。当我们需要自己去写一个在子线程工作然后将结果传到主线程的功能时可以考虑用这个类。下面提供一个简单的Demo：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThreadActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line"></div><div class="line">            String threadName = Thread.currentThread().getName();</div><div class="line">            tvLog.setText(String.format(<span class="string">"当前线程：%s Msg：%s"</span>, threadName, msg.obj));</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView tvLog;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_handler_thread);</div><div class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line"></div><div class="line">        tvLog = (TextView)findViewById(R.id.tvLog);</div><div class="line"></div><div class="line">        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                sendMessage();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        initData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mWorker;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        HandlerThread worker = <span class="keyword">new</span> HandlerThread(<span class="string">"worker"</span>);</div><div class="line">        worker.start();</div><div class="line">        mWorker = <span class="keyword">new</span> Handler(worker.getLooper());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        mWorker.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                print(<span class="string">"我工作在线程："</span> + Thread.currentThread().getName());</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">6</span> * <span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                sendMsgToUI();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMsgToUI</span><span class="params">()</span></span>&#123;</div><div class="line">                Message msg = <span class="keyword">new</span> Message();</div><div class="line">                msg.obj = Thread.currentThread().getName() + <span class="string">"工作完成，这是结果"</span>;</div><div class="line">                    mHandler.sendMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>思路如下：</p>
<ol>
<li>创建HandlerThread对象，这个对象是一个线程</li>
<li>启动第一步创建的线程</li>
<li>创建一个Handler，并使用第一步创建的线程中的Looper</li>
<li>然后在主线程通过这个Handler向工作线程发任务</li>
<li>任务执行完毕后，使用在Activity（主线程）中的Handler发送消息，将结果从工作线程传回主线程</li>
</ol>
<ul>
<li><p>AsyncTask</p>
<p>  这是个非常强大的工具类，用到的知识点也非常多，曾经统治过网络库的编写。这里只讲跟我们消息系统相关的知识，先看一段源码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span>&gt; </span>&#123;</div><div class="line">...</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InternalHandler sHandler; </div><div class="line">...</div><div class="line">    <span class="comment">// 获取到Handler</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">synchronized</span> (AsyncTask.class) &#123;</div><div class="line">            <span class="keyword">if</span> (sHandler == <span class="keyword">null</span>) &#123;</div><div class="line">                sHandler = <span class="keyword">new</span> InternalHandler();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> sHandler;</div><div class="line">        &#125;</div><div class="line">...</div><div class="line">    <span class="comment">// 在工作线程发送结果到主线程，这里获取到Message.target都是sHandler对象</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</div><div class="line">        message.sendToTarget();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">...</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * &lt;p&gt;Runs on the UI thread after &#123;<span class="doctag">@link</span> #doInBackground&#125;. The</div><div class="line">     * specified result is the value returned by &#123;<span class="doctag">@link</span> #doInBackground&#125;.&lt;/p&gt;</div><div class="line">     * </div><div class="line">     * &lt;p&gt;This method won't be invoked if the task was cancelled.&lt;/p&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> result The result of the operation computed by &#123;<span class="doctag">@link</span> #doInBackground&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> #onPreExecute</div><div class="line">     * <span class="doctag">@see</span> #doInBackground</div><div class="line">     * <span class="doctag">@see</span> #onCancelled(Object) </div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"UnusedDeclaration"</span>&#125;)</div><div class="line">    <span class="meta">@MainThread</span> <span class="comment">// 这个方法里的代码都是在主线程执行了</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Runs on the UI thread after &#123;<span class="doctag">@link</span> #publishProgress&#125; is invoked.</div><div class="line">     * The specified values are the values passed to &#123;<span class="doctag">@link</span> #publishProgress&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> values The values indicating progress.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> #publishProgress</div><div class="line">     * <span class="doctag">@see</span> #doInBackground</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"UnusedDeclaration"</span>&#125;)</div><div class="line">    <span class="meta">@MainThread</span> <span class="comment">// 这个方法里的代码都是在主线程执行了</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Progress... values)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * This method can be invoked from &#123;<span class="doctag">@link</span> #doInBackground&#125; to</div><div class="line">     * publish updates on the UI thread while the background computation is</div><div class="line">     * still running. Each call to this method will trigger the execution of</div><div class="line">     * &#123;<span class="doctag">@link</span> #onProgressUpdate&#125; on the UI thread.</div><div class="line">     *</div><div class="line">     * &#123;<span class="doctag">@link</span> #onProgressUpdate&#125; will not be called if the task has been</div><div class="line">     * canceled.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> values The progress values to update the UI with.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> #onProgressUpdate</div><div class="line">     * <span class="doctag">@see</span> #doInBackground</div><div class="line">     */</div><div class="line">    <span class="meta">@WorkerThread</span> <span class="comment">// 从工作线程发消息到主线程</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(Progress... values)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isCancelled()) &#123;</div><div class="line">            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</div><div class="line">                    <span class="keyword">new</span> AsyncTaskResult&lt;Progress&gt;(<span class="keyword">this</span>, values)).sendToTarget();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">(Result result)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isCancelled()) &#123;</div><div class="line">            onCancelled(result);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            onPostExecute(result);</div><div class="line">        &#125;</div><div class="line">        mStatus = Status.FINISHED;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InternalHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(Looper.getMainLooper()); <span class="comment">// 创建一个Handler对象，使用的Looper是主线程的Looper，那么它处理的消息都将在主线程，这个很关键</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MESSAGE_POST_RESULT:</div><div class="line">                    <span class="comment">// There is only one result</span></div><div class="line">                    result.mTask.finish(result.mData[<span class="number">0</span>]);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MESSAGE_POST_PROGRESS:</div><div class="line">                    result.mTask.onProgressUpdate(result.mData);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看了上面的源码再回想下AsyncTask用法我们可以得到如下结论：</p>
<ol>
<li>主线程无需动态向工作线程发消息，只是初始化的时候传递一些参数</li>
<li>工作线程完成后，通过获取主线程的Looper，构建Handler将结果发送给主线程</li>
</ol>
<ul>
<li><p>UI Thread</p>
<p>  看了上面的两个案例，我们在来看看为什么我们使用的主线程可以直接使用消息系统而没有执行<code>Looper.prepare()</code>，<code>Looper.loop()</code> 之类的初始化工作呢。</p>
<p>  其实结论很简单，不可能不初始化，只是系统提前已经帮我们初始化好了，这部分的源码位于 <code>sdk/sources/android-xx/android/app/ActivityThread.java</code> 中：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityThread</span> </span>&#123;</div><div class="line">...</div><div class="line">    <span class="keyword">final</span> H mH = <span class="keyword">new</span> H();</div><div class="line">...</div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">H</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LAUNCH_ACTIVITY         = <span class="number">100</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAUSE_ACTIVITY          = <span class="number">101</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAUSE_ACTIVITY_FINISHING= <span class="number">102</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP_ACTIVITY_SHOW      = <span class="number">103</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP_ACTIVITY_HIDE      = <span class="number">104</span>;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">      ...</div><div class="line">      <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">          <span class="keyword">case</span> LAUNCH_ACTIVITY: &#123;</div><div class="line">              Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</div><div class="line">              <span class="keyword">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</div><div class="line">              r.packageInfo = getPackageInfoNoCheck(</div><div class="line">                      r.activityInfo.applicationInfo, r.compatInfo);</div><div class="line">              handleLaunchActivity(r, <span class="keyword">null</span>, <span class="string">"LAUNCH_ACTIVITY"</span>);</div><div class="line">              Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">          &#125; <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> RELAUNCH_ACTIVITY: &#123;</div><div class="line">              Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityRestart"</span>);</div><div class="line">              ActivityClientRecord r = (ActivityClientRecord)msg.obj;</div><div class="line">              handleRelaunchActivity(r);</div><div class="line">              Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">          &#125; <span class="keyword">break</span>;</div><div class="line">          <span class="keyword">case</span> PAUSE_ACTIVITY: &#123;</div><div class="line">              Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityPause"</span>);</div><div class="line">              SomeArgs args = (SomeArgs) msg.obj;</div><div class="line">              handlePauseActivity((IBinder) args.arg1, <span class="keyword">false</span>,</div><div class="line">                      (args.argi1 &amp; USER_LEAVING) != <span class="number">0</span>, args.argi2,</div><div class="line">                      (args.argi1 &amp; DONT_REPORT) != <span class="number">0</span>, args.argi3);</div><div class="line">              maybeSnapshot();</div><div class="line">              Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">          &#125; <span class="keyword">break</span>;</div><div class="line">          ...</div><div class="line">       &#125;</div><div class="line">       ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"ActivityThreadMain"</span>);</div><div class="line">        SamplingProfilerIntegration.start();</div><div class="line"></div><div class="line">        <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class="line">        <span class="comment">// disable it here, but selectively enable it later (via</span></div><div class="line">        <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class="line">        CloseGuard.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        Environment.initForCurrentUser();</div><div class="line"></div><div class="line">        <span class="comment">// Set the reporter for event logging in libcore</span></div><div class="line">        EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</div><div class="line"></div><div class="line">        <span class="comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class="line">        <span class="keyword">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class="line">        TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class="line"></div><div class="line">        Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</div><div class="line"></div><div class="line">        Looper.prepareMainLooper(); <span class="comment">// 准备MainLooper</span></div><div class="line"></div><div class="line">        ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">        thread.attach(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">            sMainThreadHandler = thread.getHandler();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">            Looper.myLooper().setMessageLogging(<span class="keyword">new</span></div><div class="line">                    LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// End of event ActivityThreadMain.</span></div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">        Looper.loop(); <span class="comment">// 启动这个消息循环</span></div><div class="line"></div><div class="line">        <span class="comment">// 当上面的Looper执行quit()的时候执行到这里，当然，这个时候app就要退出了</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再回到我们文章开始的时候提到的问题：为什么通过 <code>view.post()</code> 可以获取到View的尺寸呢？</p>
<p>答：首先大家需要知道，我们Activity的启动，也是通过系统消息的方式触发的。从上面的代码中可以看到，当 <code>Looper.loop()</code> 执行之后，即可接收系统消息了，比如启动Activity之类的消息。当系统发出了一个启动Activity的消息，然后执行这个消息才会去启动Actvity，启动Activiy会调用它的生命周期方法，比如 <code>onCreate()</code> 等，在 <code>Activity.onCreate()</code> 中用view.post发一个任务到主线程的消息队列，那这个消息肯定要等之前的消息任务执行完，也就是当前创建Activity的消息执行完成之后才能执行。所以，我们就可以获取到View的尺寸了。</p>
<p>那么我们来验证一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPostActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TextView tvInfo;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_view_post);</div><div class="line"></div><div class="line">        printMsg(<span class="string">"onCreate"</span>);</div><div class="line"></div><div class="line">        tvInfo = (TextView) findViewById(R.id.tvInfo);</div><div class="line">        tvInfo.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                printMsg(<span class="string">"Width:"</span> + tvInfo.getWidth());</div><div class="line">                printMsg(<span class="string">"Height:"</span> + tvInfo.getHeight());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onStart();</div><div class="line"></div><div class="line">        printMsg(<span class="string">"onStart"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line"></div><div class="line">        printMsg(<span class="string">"onResume"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出的Log：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">07</span>-<span class="number">27</span> <span class="number">13</span>:<span class="number">06</span>:<span class="number">36.373</span> <span class="number">17506</span>-<span class="number">17506</span>/com.ttdevs.message I/System.out: &gt;&gt;&gt;&gt;&gt;onCreate</div><div class="line"><span class="number">07</span>-<span class="number">27</span> <span class="number">13</span>:<span class="number">06</span>:<span class="number">36.378</span> <span class="number">17506</span>-<span class="number">17506</span>/com.ttdevs.message I/System.out: &gt;&gt;&gt;&gt;&gt;onStart</div><div class="line"><span class="number">07</span>-<span class="number">27</span> <span class="number">13</span>:<span class="number">06</span>:<span class="number">36.378</span> <span class="number">17506</span>-<span class="number">17506</span>/com.ttdevs.message I/System.out: &gt;&gt;&gt;&gt;&gt;onResume</div><div class="line"><span class="number">07</span>-<span class="number">27</span> <span class="number">13</span>:<span class="number">06</span>:<span class="number">36.433</span> <span class="number">17506</span>-<span class="number">17506</span>/com.ttdevs.message I/System.out: &gt;&gt;&gt;&gt;&gt;Width:<span class="number">248</span></div><div class="line"><span class="number">07</span>-<span class="number">27</span> <span class="number">13</span>:<span class="number">06</span>:<span class="number">36.433</span> <span class="number">17506</span>-<span class="number">17506</span>/com.ttdevs.message I/System.out: &gt;&gt;&gt;&gt;&gt;Height:<span class="number">76</span></div></pre></td></tr></table></figure>
<p>和推测的一致，Coooool～～</p>
<p>最后，留个好玩的问题，执行 <code>getMainLooper().quit()</code> 会怎样呢？</p>
<p><a href="https://github.com/ttdevs/android/tree/master/apps/message" target="_blank" rel="external">源码参考这里</a></p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2017/06/20/2017-06-20/</url>
      <content type="html"><![CDATA[<h1 id="西安游-——-大唐盛世"><a href="/2017/06/20/2017-06-20/#西安游-——-大唐盛世" class="headerlink" title="# 西安游 —— 大唐盛世"></a># 西安游 —— 大唐盛世</h1><p><img src="http://upload-images.jianshu.io/upload_images/1801981-ec7c4ff20dfd2d9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安"></p>
<p>经历了漫长的犹豫纠结之后决定裸辞。一场说走就走的旅程就这么开始了。</p>
<p>离职时无意中跟一个小伙伴聊天，得知她也是离职状态，遂结伴一起去往西安。虽然是一个松散组合，但也不用一直一个人了～（其实单身狗有时候也需要找别人帮拍旅游照）</p>
<p>出发之前并没有做详细的攻略，只有一个目的地西安。想到哪里去哪里，比如著名的秦始皇陵兵马俑，华山，古城墙，大雁塔，西安小吃等等，当然还有些之前不知道的景点。最后看来，除了华山和大雁塔没有去有点小遗憾之外，大部分期待的都去了，而且多数都是超过之前的期待～</p>
<h2 id="第一天-从出发到回民街"><a href="/2017/06/20/2017-06-20/#第一天-从出发到回民街" class="headerlink" title="第一天 从出发到回民街"></a>第一天 从出发到回民街</h2><p>提前两天买的机票，南航<code>CZ6616</code>上午<code>11:25</code> 上海飞西安。离机场很近，所以不用早起赶灰机，准点起飞，预示一个美好的旅程即将开始～</p>
<p>出发之前小伙伴在网上报了一个<a href="http://www.mafengwo.cn/sales/2201895.html" target="_blank" rel="external">一天的旅行团</a>，包含接机的服务，旅游巴士，从机场送到住地。所以整个到达过程还是相当顺利滴。</p>
<p>同行小伙伴要住青旅，说可以玩狼人杀等游戏。由于没有住过青旅，想体验下，所以也订了一个床铺，四人间，45元／晚。到了青旅办了入住，看了房间，瞬间不想住了（里面已住两人，有点乱，带了个可以登机的行李箱房间的柜子竟然放不下，也没其他地方可放），遂退房（后来想了下，可能已经过了住青旅的年龄了吧），去找了家<a href="/2017/06/20/2017-06-20/七天西安钟楼店，西一路49号">快捷酒店</a>，离回民街很近，大床房每晚不到100，之后几天一直住这里（哈哈，淘宝买了几张20的优惠券，还是能省一点是一点）。</p>
<p>安定好之后开始逛回民街、钟楼和鼓楼。下面开始上图～</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-d7cdca0b55cfc589.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="回民街"><br>人超多有没有～～</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-39ac7b3a83e11b1a.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="色彩丰富的美食"><br>色彩超级丰富啊</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-c917909cde1b791d.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="柿子饼"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-fe79d6fdc93ed9f9.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="biangbiang面"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-b8d04e14cb572d26.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="馕"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-115ef2973ed7e09d.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手艺人"><br><img src="http://upload-images.jianshu.io/upload_images/1801981-b9d4cb4a8d81705a.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手艺人"><br><img src="http://upload-images.jianshu.io/upload_images/1801981-468a2b6e70670696.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手艺人"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-0c3d51681a1fc6db.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="钟楼"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-4724bd384967678f.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="鼓楼"></p>
<h2 id="第二天-秦始皇陵兵马俑"><a href="/2017/06/20/2017-06-20/#第二天-秦始皇陵兵马俑" class="headerlink" title="第二天 秦始皇陵兵马俑"></a>第二天 秦始皇陵兵马俑</h2><h3 id="西安一日游"><a href="/2017/06/20/2017-06-20/#西安一日游" class="headerlink" title="西安一日游"></a>西安一日游</h3><p>前面提到报了一个旅游团：<a href="http://www.mafengwo.cn/sales/2201895.html" target="_blank" rel="external">兵马俑+华清宫+骊山索道一日游（赠接机/高铁/双耳麦/赠自助餐）价格390，不坐索道330</a>，马蜂窝上有售。美女导游，大巴接送，无购物，自助餐等等，去之前还担心被带到假兵马俑等各种坑，最后总结下来很满意的一次跟团。具体的行程大家可以看介绍。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-35507f861e6f142b.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-e31046ae3c969d4c.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-3cf285c2026feb2d.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-9e11adcfccd4ad48.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-d7a0bd055a32f819.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-5db4d6a737f9a5a7.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-1b87890b254e2e6b.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-25e411403ffbb5fe.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兵马俑"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-a06df8b4385d3154.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="华清宫"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-a9fda7b212bc48fd.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="华清宫"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-2c63547ceca7f151.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="华清宫"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-d472ea14ec698863.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="骊山俯瞰"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-18d999e9295d0d43.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="美女导游"><br>我们的美女导游～</p>
<h3 id="西安古城墙"><a href="/2017/06/20/2017-06-20/#西安古城墙" class="headerlink" title="西安古城墙"></a>西安古城墙</h3><p>旅游团结束之后送回钟楼，路上导游推荐了几家，但是都没记住。不过还是要去找吃的，凉皮肉夹馍自然是首选（回民街卖的肉夹馍都是牛羊肉的，我还是喜欢猪肉的，所以这个肉夹馍不是回民街买的～）。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-122a846d19df3695.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="肉夹馍"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-d9cd4f0c12c4c33f.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="凉皮"></p>
<p>吃饭吃完时间还早，遂决定去古城墙。就这样一个人骑着小黄车屁颠屁颠的赶到城墙，买票进入，门票54。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-a35904c1bcf2a45e.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="古城墙"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-12bfc6a16b7633ea.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="古城墙"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-e6d33f5bfbd1bb88.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="古城墙"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-d74154a343104713.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="古城墙"></p>
<p>由于去的时候天已经快晚上8点了，所以还是有点晚的。加之天气不好阴的很重，中间还有小雨，又不想骑自行车一个人走了四分之一就撤了（从南门走到西门）。可能需要注意的是，晚上不是每个门都开的，想出来也得走到某个大一点的门。</p>
<h2 id="第三天-大唐芙蓉园"><a href="/2017/06/20/2017-06-20/#第三天-大唐芙蓉园" class="headerlink" title="第三天 大唐芙蓉园"></a>第三天 大唐芙蓉园</h2><p>前一天逛的太晚，比较累，所以睡了个懒觉，起床已经下午。时间不够芙蓉园和大雁塔不能同时去了（大雁塔音乐喷泉也没去成），大雁塔不是特别期待，最后选择了芙蓉园。去之前简单了解了下：新建的景点，不是历史古迹，所以也不抱太大希望。买了带演出的198块的门票，其中带了<code>大唐盛世</code>的演出。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-4a7a70f01f30a447.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<h3 id="大唐盛世"><a href="/2017/06/20/2017-06-20/#大唐盛世" class="headerlink" title="大唐盛世"></a>大唐盛世</h3><p>这是一个商业演出，如果不喜欢可以买120的票，就没有这一项了。悄悄的告诉你们，我是第一次看演出，第一排，这个位置有点低，往后两排应该会更好，但是也有一个好处是离演员很近，可以看美女～～</p>
<p>四点半就可以入场了，本以为看的人会很少，但是最后发现几乎座无虚席，超乎我的想象。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-54f46e83857f8c96.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"><br>（不好意思，原谅我偷拍照了）</p>
<p>对我来说白天这个园子可看的不是很多。有一些雕塑，看不懂的我，真是蜜汁尴尬，比如下面这座：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-da441ed3975e44e6.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p>唯一有好一点印象的是紫云楼中会有定时的表演，感兴趣可以看看。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-ce756ea59f975995.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<h3 id="灯光表演"><a href="/2017/06/20/2017-06-20/#灯光表演" class="headerlink" title="灯光表演"></a>灯光表演</h3><p>从两个标题可以看出，对于这里的建筑真是期待不大，好在有晚上的灯光水幕等表演，哈哈～～</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-22c5068ab3f6928e.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-536510e747a4b55a.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-aa4b70b446946d05.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-ae20add28b0258b7.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-c729164e0b1f6862.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-35737d9af2e773ac.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="大唐芙蓉园"></p>
<p>一个人在一个偏僻的角落看完整个表演（其实就是为了拍照～～）晚上的灯光还是很漂亮的。听说是全国最大的水幕电影。</p>
<h2 id="第四天-陕西历史博物馆"><a href="/2017/06/20/2017-06-20/#第四天-陕西历史博物馆" class="headerlink" title="第四天 陕西历史博物馆"></a>第四天 陕西历史博物馆</h2><p>吃货们可能已经发现一个问题——基本上没有介绍吃。看我的尴尬脸😅</p>
<p>因为从来第二天就开始拉肚子，恶心想吐，啥也不想吃。朋友说肠胃感冒，吃点药就好。但是今天感觉快要死了（接下来还有一周多的行程，钱已交），遂去了医院。一大早赶到西安交通大学第一附属医院看了个消化内科，医生不分青红皂白的给开了一堆药（还有进口的酵母菌，取药时才发现，我们之前也卖过，坑啊），输液两瓶，药费480+，简直是抢劫啊，有没有。最后都不知道是吃了这些药好的还是我自己去药店买的藿香正气水吃好的。。。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-5a1ace90943c66c3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输液"></p>
<p>输完液，赶到西安历史博物馆，已经下午两点多。在对面喝了点粥，吃了点东西——烤馍——一块钱一个——超级好吃，那个状态我竟然吃了俩～</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-0681f0ba38c8ce14.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="烤馍"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-b55ab1477dfda13b.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="烤馍"></p>
<p>说正题，为什么想来这里呢？难道我很爱历史嘛～ 其实不是，就是想多了解一下历史而已。之前去过南京博物院，一个人逛了半天，还是挺震撼的。所以对于西安这座古城，对他的博物馆还是挺期待的。</p>
<p>简单提醒一下，这里的票免费，可以官网预约，预约好了那天啥时候去都可以，否则的话就到现场排队。人多的时候队伍可能会比较长。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-08fe18bce59d0359.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="陕西历史博物馆"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-aea8bc3f1721d33e.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="陕西历史博物馆"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-331cfb93c26d5e98.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="陕西历史博物馆"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-15b8b10151f199bc.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="陕西历史博物馆"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-7556f2292ba025ce.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="陕西历史博物馆"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-36e2cd79a7dfed95.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="陕西历史博物馆"></p>
<p>由于实在难受，也没逛多久就早早的回去休息了。</p>
<h2 id="第五天-从西安到西宁"><a href="/2017/06/20/2017-06-20/#第五天-从西安到西宁" class="headerlink" title="第五天 从西安到西宁"></a>第五天 从西安到西宁</h2><p>最后一天的行程，西安到西宁。本打算做机场大巴，但是有个行李箱比较重，同行的小伙伴决定一起打车。叫了专车，从西安市区送到咸阳机场。优惠了50，每个人50快，还是挺划算的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-b7d9245cd8aed746.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安到西宁"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-428f915f9fe1af9c.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安到西宁"></p>
<p>感觉一路上灰机经过了陕甘不同的地貌环境，偷偷用手机拍了几站，超级后悔灰机上没有把相机拿出来。给大家分享几张，西安行程结束～</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-93732e0aae772f4c.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安到西宁"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-3940547d7d552c56.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安到西宁"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-895f96537f902aa3.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安到西宁"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-90b4c485dec7470d.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="西安到西宁"></p>
<p>西安之行就这么结束了。如果有人一起的话，可能会去爬华山，不过留着以后有机会去也好。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2017/06/02/2017-06-02/</url>
      <content type="html"><![CDATA[<p># </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[Android]升级Support Library]]></title>
      <url>/2017/05/26/Android-%E5%8D%87%E7%BA%A7SupportLibrary/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Support-Library"><a href="/2017/05/26/Android-升级SupportLibrary/#0x00-Support-Library" class="headerlink" title="0x00 Support Library"></a>0x00 Support Library</h2><h2 id="0x01-注意事项"><a href="/2017/05/26/Android-升级SupportLibrary/#0x01-注意事项" class="headerlink" title="0x01 注意事项"></a>0x01 注意事项</h2><ul>
<li><p><code>compileSdkVersion</code>与<code>buildToolsVersion</code>版本不一致</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    /Users/ttdevs/Android/app/build/intermediates/res/merged/debug/values-v24/values-v24.xml</div><div class="line">Error:(<span class="number">3</span>) Error retrieving parent <span class="keyword">for</span> item: No resource found that matches the given name <span class="string">'android:TextAppearance.Material.Widget.Button.Borderless.Colored'</span>.</div><div class="line">Error:(<span class="number">4</span>) Error retrieving parent <span class="keyword">for</span> item: No resource found that matches the given name <span class="string">'android:TextAppearance.Material.Widget.Button.Colored'</span>.</div><div class="line">Error:(<span class="number">3</span>) Error retrieving parent <span class="keyword">for</span> item: No resource found that matches the given name <span class="string">'android:TextAppearance.Material.Widget.Button.Borderless.Colored'</span>.</div><div class="line">Error:(<span class="number">4</span>) Error retrieving parent <span class="keyword">for</span> item: No resource found that matches the given name <span class="string">'android:TextAppearance.Material.Widget.Button.Colored'</span>.</div><div class="line">Error:Execution failed <span class="keyword">for</span> task <span class="string">':app:processDebugResources'</span>.</div><div class="line">&gt; com.android.ide.common.process.ProcessException: Failed to execute aapt</div><div class="line">Information:BUILD FAILED</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="0xFF-参考"><a href="/2017/05/26/Android-升级SupportLibrary/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ul>
<li><a href="https://developer.android.com/topic/libraries/support-library/index.html" target="_blank" rel="external">https://developer.android.com/topic/libraries/support-library/index.html</a></li>
<li><a href="https://developer.android.com/topic/libraries/support-library/revisions.html" target="_blank" rel="external">https://developer.android.com/topic/libraries/support-library/revisions.html</a></li>
<li><a href="https://stackoverflow.com/questions/41365401/how-to-fix-eror-app-build-intermediates-res-merged-debug-values-v24-values-v24-x" target="_blank" rel="external">https://stackoverflow.com/questions/41365401/how-to-fix-eror-app-build-intermediates-res-merged-debug-values-v24-values-v24-x</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android-Bluetooth」0x02操作]]></title>
      <url>/2017/05/19/%5BAndroid-Bluetooth%5D0x02%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="0x00-低功耗蓝牙（BLE）"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0x00-低功耗蓝牙（BLE）" class="headerlink" title="0x00 低功耗蓝牙（BLE）"></a>0x00 低功耗蓝牙（BLE）</h2><p>上一篇简单介绍了传统蓝牙设备的使用，当你沿着上一篇的思路去连接某些蓝牙设备的时候，你会发现总是不成功。没错，我们还有另外一种蓝牙没有讲：低功耗蓝牙(BLE: Bluetooth Low Energy)。</p>
<p>这并不是一种新的东西，它只是蓝牙协议中的一个新的版本。之前提到的多是蓝牙2.0/2.1，这里的低功耗蓝牙（BLE）主要是指蓝牙4.0/4.1/4.2。在我们的日常生活中这种蓝牙越来越常见，比如各种手环、体脂秤、智能设备、便携蓝牙设备等等。</p>
<p>更多关于蓝牙的介绍可以参考<a href="https://zh.wikipedia.org/wiki/蓝牙" target="_blank" rel="external">这里</a></p>
<h2 id="0x01-蓝牙协议栈"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0x01-蓝牙协议栈" class="headerlink" title="0x01 蓝牙协议栈"></a>0x01 蓝牙协议栈</h2><p>和学习 TCP/IP 一样，如果了解BLE的议栈对我们掌握蓝牙会有很大的帮助。</p>
<p><img src="https://www.bluetooth.com/~/media/images/page-content/bluetooth%20stack.ashx?h=501&amp;w=388&amp;la=zh-cn&amp;hash=9756388D40595EB444E4B110F3587A323604714A" alt="蓝牙协议栈"></p>
<ul>
<li><p>物理 (PHY) 层</p>
<p>  通过蓝牙通信信道控制 2.4Ghz 射频的传输/接收。BR/EDR 提供的信道较多但带宽较窄，而 LE 使用的信道较少但带宽较宽。</p>
</li>
<li><p>链路层</p>
<p>  定义数据包结构/信道、发现/连接程序以及发送/接收数据。</p>
</li>
<li><p>直接测试模式</p>
<p>  允许测试人员向 PHY 层发出指令以传输或接收给定数据包序列，通过 HCI 或 2 线 UART 接口提交命令。</p>
</li>
<li><p>主机控制器接口 (HCI)</p>
<p>  蓝牙控制器子系统（底部三层）和蓝牙主机之间的可选标准接口。</p>
</li>
<li><p>逻辑链路控制和适配协议 (L2CAP) 层</p>
<p>  基于数据包的协议，可将数据包传输至 HCI 或直接传输到无主机系统中的链路管理器。支持更高级别的协议多路复用、数据包分割和重组，以及将服务质量信息传输到更高层。</p>
</li>
<li><p>属性协议 (ATT)</p>
<p>  在建立连接之后定义数据交换客户端/服务器协议。使用通用属性配置文件 (GATT) 将属性分类为有意义的服务。ATT 主要用于 LE 部署，偶尔也会用于 BR/EDR 部署。</p>
</li>
<li><p>安全管理器</p>
<p>  定义管理蓝牙设备之间配对完整性、身份验证以及加密的协议和操作，提供安全功能工具箱，其他组件可利用该工具箱支持不同应用所需的各种安全级别。</p>
</li>
<li><p>通用属性配置文件 (GATT)</p>
<p>  使用属性协议，GATT 对封装设备组件性能的服务进行分组，并描述基于 GATT 功能的用例、角色和一般性能。其服务框架定义服务规程和格式及其特性，其中包括发现、读取、写入、通知以及指示特性以及配置特性广播。GATT 仅用于蓝牙 LE 部署。 详细了解 <a href="https://www.bluetooth.com/zh-cn/specifications/generic-attributes-overview" target="_blank" rel="external">GATT</a> 信息。 </p>
</li>
<li><p>通用访问配置文件(GAP)</p>
</li>
</ul>
<p>可与蓝牙 LE 部署中的 GATT 配合使用，以定义与发现蓝牙设备和共享信息相关的规程和角色，以及连接蓝牙设备的链路管理内容。 </p>
<p><a href="https://www.bluetooth.com/zh-cn/specifications/bluetooth-core-specification" target="_blank" rel="external">以上信息来自这里</a></p>
<h2 id="0x02-Android系统中的BLE"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0x02-Android系统中的BLE" class="headerlink" title="0x02 Android系统中的BLE"></a>0x02 Android系统中的BLE</h2><p>Android系统中对于低功耗蓝牙我们需要关心以下几点：</p>
<ul>
<li>Android 4.3（18）开始支持BLE</li>
<li>Android 5.0（21）之前手机只可以作为中心设备（Central mode）使用，5.0之后可以作为外设（Peripheral mode）使用</li>
</ul>
<p>除了以上信息，我们在对协议中的几个概念做个介绍，这涉及到之后的开发：</p>
<ul>
<li><p>Attribute Protocol (ATT)</p>
<p>  属性协议，对应 <code>BluetoothGattService</code></p>
</li>
<li><p>Generic Attribute Profile (GATT)</p>
<p>  通用属性配置文件，对应Android中的 <code>BluetoothGatt</code></p>
</li>
<li><p>Characteristic</p>
<p>  <code>BluetoothGattCharacteristic</code></p>
</li>
<li><p>Descriptor</p>
<p>  <code>BluetoothGattDescriptor</code></p>
</li>
<li><p>Service</p>
<p>  <code>BluetoothGattService</code></p>
</li>
</ul>
<p><img src="https://www.bluetooth.com/~/media/images/page-content/gatt%20profile%20hierarchy.ashx?la=zh-cn&amp;hash=9323C669A731EA445651072296730FB343BA6BB5" alt=""></p>
<h2 id="0x03-Android系统中的BLE操作流程"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0x03-Android系统中的BLE操作流程" class="headerlink" title="0x03 Android系统中的BLE操作流程"></a>0x03 Android系统中的BLE操作流程</h2><p>和之前的普通蓝牙相同，我们需要先检测设备的蓝牙是否可用，然后扫描周围的蓝牙设备，然后连接。这里可以看到，BLE的操作并不需要配对。如需要在设备必须支持低功耗蓝牙，则还需要加上这句：</p>
<p><code>&lt;uses-feature android:name=&quot;android.hardware.bluetooth_le&quot; android:required=&quot;true&quot;/&gt;</code></p>
<ul>
<li><p>蓝牙扫描</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> mScanning;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scanLeDevice</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> enable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (enable) &#123;</div><div class="line">        mHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mScanning = <span class="keyword">false</span>;</div><div class="line">                mBluetoothAdapter.stopLeScan(mLeScanCallback);</div><div class="line">            &#125;</div><div class="line">        &#125;, SCAN_PERIOD);</div><div class="line"></div><div class="line">        mScanning = <span class="keyword">true</span>;</div><div class="line">        mBluetoothAdapter.startLeScan(mLeScanCallback);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mScanning = <span class="keyword">false</span>;</div><div class="line">        mBluetoothAdapter.stopLeScan(mLeScanCallback);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Device scan callback.</span></div><div class="line"><span class="keyword">private</span> BluetoothAdapter.LeScanCallback mLeScanCallback = <span class="keyword">new</span> BluetoothAdapter.LeScanCallback() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLeScan</span><span class="params">(<span class="keyword">final</span> BluetoothDevice device, <span class="keyword">int</span> rssi, <span class="keyword">byte</span>[] scanRecord)</span> </span>&#123;</div><div class="line">        String format = <span class="string">"Name:%s, Mac:%s, Type:%s"</span>;</div><div class="line">        String msg = String.format(format, device.getName(), device.getAddress(), device.getType());</div><div class="line">        print(msg);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>扫描完成之后，我们会拿到蓝牙的设备信息，然后就可以进行连接了。 
</code></pre><ul>
<li><p>连接蓝牙</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != intent) &#123;</div><div class="line">        mMAC = intent.getStringExtra(KEY_MAC);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(mMAC)) &#123;</div><div class="line">        mMAC = MAC_BIKE;</div><div class="line">    &#125;</div><div class="line">    mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);</div><div class="line">    mBluetoothAdapter = mBluetoothManager.getAdapter();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == mBluetoothAdapter) &#123;</div><div class="line">        stopSelf();</div><div class="line">        <span class="keyword">return</span> START_NOT_STICKY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(mMAC);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == device) &#123;</div><div class="line">        stopSelf();</div><div class="line">        <span class="keyword">return</span> START_NOT_STICKY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    closeConnect();</div><div class="line"></div><div class="line">    mBluetoothGatt = device.connectGatt(<span class="keyword">this</span>, <span class="keyword">false</span>, mCallBack);</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123; <span class="comment">//5.0设置的传输最大空间</span></div><div class="line">        mBluetoothGatt.requestConnectionPriority(BluetoothGatt.CONNECTION_PRIORITY_HIGH);</div><div class="line">        mBluetoothGatt.requestMtu(<span class="number">84</span>);</div><div class="line">    &#125;</div><div class="line">    print(<span class="string">"Gatt connect"</span>);</div><div class="line">    <span class="keyword">return</span> START_STICKY;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>连接蓝牙</p>
<p>  在连接的CallBack中如果我们检测到连接成功，才可以请求蓝牙提供的服务，这里先检测连接的状态：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BluetoothGattCallback mCallBack = <span class="keyword">new</span> BluetoothGattCallback() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnectionStateChange</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> status, <span class="keyword">int</span> newState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onConnectionStateChange(gatt, status, newState);</div><div class="line"></div><div class="line">        print(String.format(<span class="string">"status:%d, newState:%d"</span>, status, newState));</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (status != BluetoothGatt.GATT_SUCCESS) &#123;</div><div class="line">            closeConnect();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (newState) &#123;</div><div class="line">            <span class="keyword">case</span> BluetoothProfile.STATE_CONNECTED:</div><div class="line">                print(<span class="string">"连接GATT服务成功，开始发现服务..."</span>);</div><div class="line">                gatt.discoverServices();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> BluetoothProfile.STATE_DISCONNECTED:</div><div class="line">                print(<span class="string">"断开GATT服务，Bye"</span>);</div><div class="line">                closeConnect();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>发现服务</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> BluetoothGattCallback mCallBack = <span class="keyword">new</span> BluetoothGattCallback() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServicesDiscovered</span><span class="params">(BluetoothGatt gatt, <span class="keyword">int</span> status)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onServicesDiscovered(gatt, status);</div><div class="line"></div><div class="line">        print(<span class="string">"发现服务："</span> + status);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (BluetoothGatt.GATT_SUCCESS == status) &#123;</div><div class="line">            List&lt;BluetoothGattService&gt; gattServices = gatt.getServices();</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == gattServices || gattServices.size() == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (BluetoothGattService gattService : gattServices) &#123;</div><div class="line">                String serviceUUID = gattService.getUuid().toString();</div><div class="line">                print(<span class="string">"UUID GATT:"</span> + serviceUUID);</div><div class="line">                List&lt;BluetoothGattCharacteristic&gt; characteristics = gattService.getCharacteristics();</div><div class="line">                <span class="keyword">for</span> (BluetoothGattCharacteristic characteristic : characteristics) &#123;</div><div class="line">                    String uuid = characteristic.getUuid().toString();</div><div class="line">                    print(<span class="string">"UUID     Cha:"</span> + uuid);</div><div class="line">                    print(<span class="string">"UUID     Status:"</span> + getProperties(characteristic));</div><div class="line">                    <span class="keyword">if</span> (UUID_RECEIVE.toString().equalsIgnoreCase(uuid)) &#123;</div><div class="line">                        mBluetoothGatt.setCharacteristicNotification(characteristic, <span class="keyword">true</span>);</div><div class="line">                        print(<span class="string">"开始监听："</span> + uuid);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>使用服务</p>
<p>  …</p>
</li>
</ul>
<h2 id="0x04-还需要了解的一些细节"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0x04-还需要了解的一些细节" class="headerlink" title="0x04 还需要了解的一些细节"></a>0x04 还需要了解的一些细节</h2><ul>
<li>UUID</li>
</ul>
<ul>
<li>判断服务的属性</li>
</ul>
<h2 id="0x05-可能会遇到的坑"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0x05-可能会遇到的坑" class="headerlink" title="0x05 可能会遇到的坑"></a>0x05 可能会遇到的坑</h2><p>手上的两台魅族设备，连接一个客户提供的蓝牙模块，死活连不上，其他手机连接正常。这两部设备连接淘宝上买的一个蓝牙模块正常。</p>
<h2 id="0xFF-参考"><a href="/2017/05/19/[Android-Bluetooth]0x02操作/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ul>
<li><a href="https://developer.android.com/guide/topics/connectivity/bluetooth-le.html" target="_blank" rel="external">https://developer.android.com/guide/topics/connectivity/bluetooth-le.html</a></li>
<li><a href="https://www.bluetooth.com/zh-cn/specifications/bluetooth-core-specification" target="_blank" rel="external">https://www.bluetooth.com/zh-cn/specifications/bluetooth-core-specification</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%97%8D%E7%89%99#.E8.97.8D.E7.89.994.0" target="_blank" rel="external">https://zh.wikipedia.org/wiki/%E8%97%8D%E7%89%99#.E8.97.8D.E7.89.994.0</a></li>
<li><a href="https://race604.com/android-ble-in-action/" target="_blank" rel="external">https://race604.com/android-ble-in-action/</a></li>
<li><a href="http://blog.csdn.net/qinxiandiqi/article/details/40741269" target="_blank" rel="external">http://blog.csdn.net/qinxiandiqi/article/details/40741269</a></li>
<li><a href="http://www.jianshu.com/p/8690dbafe849" target="_blank" rel="external">http://www.jianshu.com/p/8690dbafe849</a></li>
<li><a href="https://www.bluetooth.com/zh-cn/specifications/adopted-specifications" target="_blank" rel="external">https://www.bluetooth.com/zh-cn/specifications/adopted-specifications</a></li>
<li><a href="https://www.bluetooth.org/DocMan/handlers/DownloadDoc.ashx?doc_id=286439" target="_blank" rel="external">https://www.bluetooth.org/DocMan/handlers/DownloadDoc.ashx?doc_id=286439</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Bluetooth </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android-Bluetooth」0x01操作]]></title>
      <url>/1970/01/01/%5BAndroid-Bluetooth%5D0x01%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="0x00-蓝牙（Bluetooth）"><a href="/1970/01/01/[Android-Bluetooth]0x01操作/#0x00-蓝牙（Bluetooth）" class="headerlink" title="0x00 蓝牙（Bluetooth）"></a>0x00 蓝牙（Bluetooth）</h2><p>这个小硬件已经是Android机器的标配了，由于平时不怎么用，因此到现在都没有去研究过。现在有一个简单的小需求：通过蓝牙连接一个串口设备读取其上面的数据，即从已配对的设备列表中选择我们的串口蓝牙设备（从），连接，然后读取数据。遂写此文。</p>
<h2 id="0x01-简单使用"><a href="/1970/01/01/[Android-Bluetooth]0x01操作/#0x01-简单使用" class="headerlink" title="0x01 简单使用"></a>0x01 简单使用</h2><p>蓝牙设备的详细使用，可以参考<a href="https://developer.android.google.cn/guide/topics/connectivity/bluetooth.html" target="_blank" rel="external">Android关于蓝牙的官方文档</a>。如果你和我一样，之前没有研究过蓝牙，估计看看完后也会有一堆问题存在：什么主设备、从设备、UUID是干嘛的，如何免密钥配对等等。不着急，我们慢慢来。</p>
<p>上面已经说到，我们的设备已经提前配对完成（怎么配对：网络设置中中找到蓝牙，然后搜索，找到你的设备，然后配对。这个时候可能会提示输入密码，默认密码比0000，1234等）。我们只需要连接即可。下面简述操作步骤：</p>
<ol>
<li><p>添加蓝牙权限</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.BLUETOOTH_ADMIN"</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>判断是否支持蓝牙</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initBluetooth</span><span class="params">()</span> </span>&#123;</div><div class="line">    mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == mBluetoothAdapter) &#123;</div><div class="line">        tvContent.setText(<span class="string">"BluetoothAdapter is null"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!mBluetoothAdapter.isEnabled()) &#123;</div><div class="line">        tvContent.setText(<span class="string">"BluetoothAdapter is disable, please open it"</span>);</div><div class="line"></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</div><div class="line">        startActivityForResult(intent, REQUEST_ENABLE_BT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    tvContent.setText(<span class="string">"Bluetooth init success"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>首先是判断是否有蓝牙适配器，如果没有，`BluetoothAdapter.getDefaultAdapter()` 返回 `null`。然后判断蓝牙设备是否启用 `mBluetoothAdapter.isEnabled()` ，如果未启用，则发送一个 `Intent` 来让用户启用蓝牙，这个 `Intent` 是系统的，我们在 `onActivityResult` 中处理用户操作结果，如果用户顺利开启蓝牙，则会返回 `RESULT_OK`。
</code></pre><ol>
<li><p>获取设备列表</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Set&lt;BluetoothDevice&gt; pairedDevices = mBluetoothAdapter.getBondedDevices();</div><div class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != pairedDevices &amp;&amp; pairedDevices.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="keyword">for</span> (BluetoothDevice device : pairedDevices) &#123;</div><div class="line">      ......</div><div class="line">      String msg = String.format(<span class="string">"%s %s\n"</span>, device.getName(), device.getAddress());</div><div class="line">      ......</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>这个时候我们可以拿到 `BluetoothDevice` ，这个对象中保存了已配对蓝牙设备的信息，比如名称，MAC地址，状态，UUID等信息（但这些信息不一定都都），我们需要保存下来，在接下来连接的时候会使用。
</code></pre><ol>
<li><p>连接设备</p>
<p> 有了 <code>BluetoothDevice</code> 信息，我们就可以连接这个已经配对的蓝牙设备了。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> UUID DEFAULT_UUID = UUID.fromString(<span class="string">"00001101-0000-1000-8000-00805f9b34fb"</span>);</div><div class="line"></div><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == mSocket)&#123;</div><div class="line">        mSocket = mDevice.createRfcommSocketToServiceRecord(DEFAULT_UUID);</div><div class="line">    &#125;</div><div class="line">    mSocket.connect(); <span class="comment">// 阻塞的</span></div><div class="line"></div><div class="line">    mIn = mSocket.getInputStream();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>连接成功后，我们会得到一个 `BluetoothSocket` 对象，然后调用其阻塞的 `connect()` 方法，等待两台设备连接成功（所以这个时候必须在另外一个线程中进行）。当两台设备连接成功之后会继续向下执行。
</code></pre><ol>
<li><p>读取数据</p>
<p> 连接成功之后，我们可以通过 <code>mSocket.getInputStream()</code> 获得一个输入流，结下来的操作就是流的操作了，这个和普通 <code>socket</code> 中输入输出流的操作一样了。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">    mBytes = mIn.read(readBuffer);</div><div class="line">    System.arraycopy(readBuffer, <span class="number">0</span>, tempBuffer, mCount, mBytes);</div><div class="line">    mCount += mBytes;</div><div class="line">    <span class="keyword">if</span> (mCount &gt;= SIZE) &#123;</div><div class="line">        parseData(tempBuffer);</div><div class="line">        mCount = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="0x02-总结"><a href="/1970/01/01/[Android-Bluetooth]0x01操作/#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>Android蓝牙（主从）的操作：</p>
<ul>
<li>检查是否支持，是否启用（包括是否可见等）</li>
<li>扫描设备</li>
<li>配对</li>
<li>连接</li>
<li>数据交换</li>
<li>等等</li>
</ul>
<p>这里只讲了检查部分操作，涉及的扫描与配对可能是更复杂一些的，在接下来讲述。</p>
<p>最后，项目代码可参考这里<a href="https://github.com/ttdevs/android/tree/master/apps/air" target="_blank" rel="external">github/ttdevs/air</a>。</p>
<h2 id="0x03-Java线程的封装"><a href="/1970/01/01/[Android-Bluetooth]0x01操作/#0x03-Java线程的封装" class="headerlink" title="0x03 Java线程的封装"></a>0x03 Java线程的封装</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by ttdevs</div><div class="line"> * 2017-01-22 (android)</div><div class="line"> * https://github.com/ttdevs</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseWorkerThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRunning = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.run();</div><div class="line">        isRunning = workerBefore();</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (isRunning) &#123;</div><div class="line">            workerCycle();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        workerAfter();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提前执行 true: 继续 false: 结束</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">workerBefore</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 工作方法，被循环调用</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> true: 继续 false: 结束</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">workerCycle</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 结束执行</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">workerAfter</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开始线程</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        isRunning = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            start();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            isRunning = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 结束线程</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        isRunning = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x04-参考"><a href="/1970/01/01/[Android-Bluetooth]0x01操作/#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><ul>
<li><a href="https://developer.android.google.cn/guide/topics/connectivity/bluetooth.html" target="_blank" rel="external">https://developer.android.google.cn/guide/topics/connectivity/bluetooth.html</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Bluetooth </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android-SQLite」0x02从加载本地数据库开始]]></title>
      <url>/1970/01/01/%5BAndroid-SQLite%5D0x02%E4%BB%8E%E5%8A%A0%E8%BD%BD%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%A7%8B/</url>
      <content type="html"><![CDATA[<h2 id="0x00-引言"><a href="/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x00-引言" class="headerlink" title="0x00 引言"></a>0x00 引言</h2><blockquote>
<p>好久以前就写了，但是一直拖拖拉拉的，在草稿箱里放了两个星期还没写完，想想这样托下去又要废掉了，还是分开来吧，写多少是多少。</p>
</blockquote>
<p>Android的SQLite数据库简单使用一段时间了，现在想抽些时间总结下，不然总感觉很乱。</p>
<h2 id="0x01-SQLiteExpert"><a href="/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x01-SQLiteExpert" class="headerlink" title="0x01 SQLiteExpert"></a>0x01 SQLiteExpert</h2><p>先说一个工具，<code>SQLite Expert</code>，一款SQLite数据库管理工具，下载地址： <a href="http://www.sqliteexpert.com/" target="_blank" rel="external">http://www.sqliteexpert.com/</a>，Personal Edition是免费的，日常使用基本足够，需要专业版的可以自行网上找寻。当然，其他免费的工具还有很多，如：<code>SQLite Database Browser</code>、 <code>SQLiteManager</code> 等。<br><img src="http://img.blog.csdn.net/20130916222611000?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="0x02-加载本地数据库"><a href="/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x02-加载本地数据库" class="headerlink" title="0x02 加载本地数据库"></a>0x02 加载本地数据库</h2><p>假设我们SDCard的根目录上已经存在一个数据库，名称为：ChinaCity.db。这时候我们可以这样操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readDataBaseFromSDCard</span><span class="params">()</span> </span>&#123;</div><div class="line">    String dbPath = Environment.getExternalStorageDirectory() + <span class="string">"/ChinaCity.db"</span>;</div><div class="line"></div><div class="line">    File dbFile = <span class="keyword">new</span> File(dbPath);</div><div class="line">    <span class="keyword">if</span> (!dbFile.exists()) &#123;</div><div class="line">        Toast.makeText(getApplicationContext(), <span class="string">"请先点击拷贝到SDCard"</span>, Toast.LENGTH_LONG).show();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    openOrCreateDatabase(dbPath, SQLiteDatabase.CREATE_IF_NECESSARY, <span class="keyword">null</span>);</div><div class="line"></div><div class="line">    SQLiteDatabase db = SQLiteDatabase.openDatabase(dbPath, <span class="keyword">null</span>, SQLiteDatabase.OPEN_READWRITE);</div><div class="line">    <span class="comment">// db = openOrCreateDatabase(dbPath, SQLiteDatabase.OPEN_READWRITE, null);</span></div><div class="line"></div><div class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">    Cursor cursor = db.rawQuery(<span class="string">"select * from china_provinces_code"</span>, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">        <span class="keyword">int</span> id = cursor.getInt(cursor.getColumnIndex(<span class="string">"_id"</span>));</div><div class="line">        String name = cursor.getString(cursor.getColumnIndex(<span class="string">"name"</span>));</div><div class="line">        sb.append(id + <span class="string">":"</span> + name + <span class="string">" \n"</span>);</div><div class="line">    &#125;</div><div class="line">    System.out.println(sb.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先用SQLiteDatabase的一个静态方法openDatabase打开一个数据库，第一个参数为数据库文件路径，第二个参数一般为null，第三个参数为打开数据库的方式，由于只需要读取数据，所以我们选择 <code>SQLiteDatabase.OPEN_READONLY</code>，此种方式的好处是数据库存在的话就不会出错；另外一种为 <code>SQLiteDatabase.OPEN_READWRITE</code>，以读写的方式打开。执行上面代码，我们会看与上图信息相同的：</p>
<p><img src="http://img.blog.csdn.net/20130916225300890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<p>开发的时候，我们可能会需要一些初始化数据，比如城市代码信息，这样我们就可以事先创建好一个数据库，写入初始数据，将其放入自己的apk中一起分发。这个时候我们就可以直接从资源文件中读取这个数据库文件写入到应用的数据库目录或者SDCard中，然后就可以对其操作，拷贝可以这样操作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 拷贝资源中数据库</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> where 1SDCARD,2LOCAL</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyDataBase</span><span class="params">(<span class="keyword">int</span> where)</span> </span>&#123;</div><div class="line">    <span class="comment">// 每个应用都有一个数据库目录，他位于 /data/data/packagename/databases/目录下</span></div><div class="line">    String packageName = <span class="string">"com.ttdevs.citydata"</span>; <span class="comment">// xml中配置的</span></div><div class="line">    String dbName = <span class="string">"ChinaCity.db"</span>;</div><div class="line">    String dbPath = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (where == <span class="number">1</span>) &#123; <span class="comment">// sdcard</span></div><div class="line">        dbPath = Environment.getExternalStorageDirectory() + File.separator + dbName;</div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// local, TODO Environment.getDataDirectory()</span></div><div class="line">        dbPath = <span class="string">"/data/data/"</span> + packageName + <span class="string">"/databases/"</span> + dbName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (where == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">new</span> File(<span class="string">"/data/data/"</span> + packageName + <span class="string">"/databases/"</span>).mkdirs();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (where == <span class="number">1</span> &amp;&amp; !Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) &#123;</div><div class="line">        <span class="keyword">return</span>; <span class="comment">// 未挂载外部存储，拷贝到内部不用判断</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    File dbFile = <span class="keyword">new</span> File(dbPath);</div><div class="line">    <span class="keyword">if</span> (dbFile.exists()) &#123;</div><div class="line">        dbFile.delete();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        dbFile.createNewFile();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e1) &#123;</div><div class="line">        e1.printStackTrace();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        InputStream is = getResources().getAssets().open(dbName);</div><div class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(dbPath);</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        <span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> ((length = is.read(buffer)) &gt; <span class="number">0</span>) &#123;</div><div class="line">            os.write(buffer, <span class="number">0</span>, length);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        os.flush();</div><div class="line">        os.close();</div><div class="line">        is.close();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    Toast.makeText(getApplicationContext(), <span class="string">"拷贝成功"</span>, Toast.LENGTH_LONG).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码不是很严谨，凑活着看哈。经过以上步骤，我们就可以开始使用数据库，数据库的常用操作，在接下来的介绍中继续。</p>
<h2 id="0x03-下载"><a href="/1970/01/01/[Android-SQLite]0x02从加载本地数据库开始/#0x03-下载" class="headerlink" title="0x03 下载"></a>0x03 下载</h2><p>ChinaCity.db数据库： <a href="http://download.csdn.net/detail/ttdevs/6332431" target="_blank" rel="external">下载</a></p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> SQLite </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android-SQLite」0x01创建自己的数据库]]></title>
      <url>/1970/01/01/%5BAndroid-SQLite%5D0x01%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="0x01-创建自己的数据库"><a href="/1970/01/01/[Android-SQLite]0x01创建自己的数据库/#0x01-创建自己的数据库" class="headerlink" title="0x01 创建自己的数据库"></a>0x01 创建自己的数据库</h2><p>大多数情况，我们还是需要自己去维护一个数据库，常见的包括数据库的创建，升级，销毁等操作。 android提供了SQLiteOpenHelper抽象类，我们创建SQLiteOpenHelper的实现类，重写他的onCreate(), onUpgrade() 或者 onOpen()方法，对数据库进行管理。如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_NAME = <span class="string">"ChinaCity.db"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DATABASE_VERSION = <span class="number">1</span>; <span class="comment">// Version must be &gt;= 1</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataBaseOpenHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, DATABASE_NAME, <span class="keyword">null</span>, DATABASE_VERSION);</div><div class="line">        System.out.println(<span class="string">"DataBaseOpenHelper"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataBaseOpenHelper</span><span class="params">(Context context, <span class="keyword">int</span> version)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, DATABASE_NAME, <span class="keyword">null</span>, version);</div><div class="line">        System.out.println(<span class="string">"DataBaseOpenHelper version"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!db.isReadOnly()) &#123;</div><div class="line">            db.execSQL(<span class="string">"PRAGMA foreign_keys = ON;"</span>); <span class="comment">// Enable foreign key constraints </span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">// create table test(id integer references students(id),score integer check (score&lt;=100 and score&lt;=0),primary key(id,score))</span></div><div class="line">        <span class="keyword">super</span>.onOpen(db);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        CityData.createTable(db);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">        CityData.dropTable(db);</div><div class="line">        CityData.createTable(db);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CityData</span> <span class="keyword">implements</span> <span class="title">BaseColumns</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_TEXT = <span class="string">" text "</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_INTEGER = <span class="string">" integer "</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMMA_SEP = <span class="string">","</span>;</div><div class="line"></div><div class="line">        <span class="comment">// *******************************china_city_code***********************************</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_NAME_CITY = <span class="string">"china_city_code"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_PROVINCE = <span class="string">"province"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_CITY = <span class="string">"city"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_COUNTY = <span class="string">"county"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_CODE = <span class="string">"code"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_CREATE_CITY = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + TABLE_NAME_CITY + <span class="string">" ("</span> +</div><div class="line">                _ID + TYPE_INTEGER + <span class="string">" PRIMARY KEY AUTOINCREMENT, "</span> +</div><div class="line">                COLUMN_NAME_PROVINCE + TYPE_TEXT + COMMA_SEP +</div><div class="line">                COLUMN_NAME_CITY + TYPE_TEXT + COMMA_SEP +</div><div class="line">                COLUMN_NAME_COUNTY + TYPE_TEXT + COMMA_SEP +</div><div class="line">                COLUMN_NAME_CODE + TYPE_INTEGER</div><div class="line">                + <span class="string">" )"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_CREATE_CITY_INDEX = <span class="string">"CREATE UNIQUE INDEX IF NOT EXISTS "</span> + COLUMN_NAME_CODE + <span class="string">" ON "</span> + TABLE_NAME_CITY + <span class="string">"("</span> + COLUMN_NAME_CODE + <span class="string">")"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_DELETE_CITY = <span class="string">"DROP TABLE IF EXISTS "</span> + TABLE_NAME_CITY;</div><div class="line"></div><div class="line">        <span class="comment">// *******************************china_provinces_code*******************************</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE_NAME_PROVINCE = <span class="string">"china_provinces_code"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_ID = <span class="string">"id"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COLUMN_NAME_NAME = <span class="string">"name"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_CREATE_PROVINCE = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + TABLE_NAME_PROVINCE + <span class="string">" ("</span> +</div><div class="line">                _ID + TYPE_INTEGER + <span class="string">" PRIMARY KEY AUTOINCREMENT, "</span> +</div><div class="line">                COLUMN_NAME_ID + TYPE_INTEGER + COMMA_SEP +</div><div class="line">                COLUMN_NAME_NAME + TYPE_TEXT</div><div class="line">                + <span class="string">" )"</span>;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SQL_DELETE_PROVINCE = <span class="string">"DROP TABLE IF EXISTS "</span> + TABLE_NAME_PROVINCE;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">            db.execSQL(SQL_CREATE_PROVINCE);</div><div class="line">            db.execSQL(SQL_CREATE_CITY);</div><div class="line">            db.execSQL(SQL_CREATE_CITY_INDEX);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dropTable</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">            db.execSQL(SQL_DELETE_PROVINCE);</div><div class="line">            db.execSQL(SQL_DELETE_CITY);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造函数中我们需要传入四个参数，第一个参数为上下文，第二个为数据库名称，第三个参数一般为null，第四个为数据库的版本。onCreate()方法中主要执行数据库的创建操作。onUpgrade()方法主要在数据库升级时调用，源码 <code>android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(boolean writable)</code> 中这样描述：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> SQLiteDatabase <span class="title">getDatabaseLocked</span><span class="params">(<span class="keyword">boolean</span> writable)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (mDatabase != <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">if</span> (!mDatabase.isOpen()) &#123;</div><div class="line">           <span class="comment">// Darn!  The user closed the database by calling mDatabase.close().</span></div><div class="line">           mDatabase = <span class="keyword">null</span>;</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!writable || !mDatabase.isReadOnly()) &#123;</div><div class="line">           <span class="comment">// The database is already open for business.</span></div><div class="line">           <span class="keyword">return</span> mDatabase;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (mIsInitializing) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"getDatabase called recursively"</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   SQLiteDatabase db = mDatabase;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">       mIsInitializing = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (db != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (writable &amp;&amp; db.isReadOnly()) &#123;</div><div class="line">               db.reopenReadWrite();</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mName == <span class="keyword">null</span>) &#123;</div><div class="line">           db = SQLiteDatabase.create(<span class="keyword">null</span>);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               <span class="keyword">if</span> (DEBUG_STRICT_READONLY &amp;&amp; !writable) &#123;</div><div class="line">                   <span class="keyword">final</span> String path = mContext.getDatabasePath(mName).getPath();</div><div class="line">                   db = SQLiteDatabase.openDatabase(path, mFactory,</div><div class="line">                           SQLiteDatabase.OPEN_READONLY, mErrorHandler);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   db = mContext.openOrCreateDatabase(mName, mEnableWriteAheadLogging ?</div><div class="line">                           Context.MODE_ENABLE_WRITE_AHEAD_LOGGING : <span class="number">0</span>,</div><div class="line">                           mFactory, mErrorHandler);</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">catch</span> (SQLiteException ex) &#123;</div><div class="line">               <span class="keyword">if</span> (writable) &#123;</div><div class="line">                   <span class="keyword">throw</span> ex;</div><div class="line">               &#125;</div><div class="line">               Log.e(TAG, <span class="string">"Couldn't open "</span> + mName</div><div class="line">                       + <span class="string">" for writing (will try read-only):"</span>, ex);</div><div class="line">               <span class="keyword">final</span> String path = mContext.getDatabasePath(mName).getPath();</div><div class="line">               db = SQLiteDatabase.openDatabase(path, mFactory,</div><div class="line">                       SQLiteDatabase.OPEN_READONLY, mErrorHandler);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       onConfigure(db);</div><div class="line"></div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> version = db.getVersion();</div><div class="line">       <span class="keyword">if</span> (version != mNewVersion) &#123;</div><div class="line">           <span class="keyword">if</span> (db.isReadOnly()) &#123;</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> SQLiteException(<span class="string">"Can't upgrade read-only database from version "</span> +</div><div class="line">                       db.getVersion() + <span class="string">" to "</span> + mNewVersion + <span class="string">": "</span> + mName);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           db.beginTransaction();</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               <span class="keyword">if</span> (version == <span class="number">0</span>) &#123;</div><div class="line">                   onCreate(db);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="keyword">if</span> (version &gt; mNewVersion) &#123;</div><div class="line">                       onDowngrade(db, version, mNewVersion);</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       onUpgrade(db, version, mNewVersion);</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">               db.setVersion(mNewVersion);</div><div class="line">               db.setTransactionSuccessful();</div><div class="line">           &#125; <span class="keyword">finally</span> &#123;</div><div class="line">               db.endTransaction();</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       onOpen(db);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (db.isReadOnly()) &#123;</div><div class="line">           Log.w(TAG, <span class="string">"Opened "</span> + mName + <span class="string">" in read-only mode"</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       mDatabase = db;</div><div class="line">       <span class="keyword">return</span> db;</div><div class="line">   &#125; <span class="keyword">finally</span> &#123;</div><div class="line">       mIsInitializing = <span class="keyword">false</span>;</div><div class="line">       <span class="keyword">if</span> (db != <span class="keyword">null</span> &amp;&amp; db != mDatabase) &#123;</div><div class="line">           db.close();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当当前版本小于新版本时，会调用onUpgrade()方法。所以上面SQLiteOpenHelper的实现思路为：构造方法中初始化一下数据库的必要参数，如数据库版本，数据库名等；在onCreate()方法中创建数据库的表；当我们需要对数据库进行升级的时候，修改数据库的版本号，这样就可以触发onUpgrade()方法，这里我们做最简单的处理：drop掉所有表然后重新创建。当然我们还可以在onOpen()方法中做一下数据库的设置操作，如设置外键生效。这样我们的数据库管理类就实现了。</p>
<h2 id="0x02-拿到数据库对象"><a href="/1970/01/01/[Android-SQLite]0x01创建自己的数据库/#0x02-拿到数据库对象" class="headerlink" title="0x02 拿到数据库对象"></a>0x02 拿到数据库对象</h2><p>有了数据库管理类，对数据库进行操作我们最好封装一个操作类，在这个类中对数据库中的表进行操作。下面的代码也是网上比较常见的（对于数据库对象，也有处理成单例）。先看代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBaseManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> DataBaseOpenHelper dbHelper;</div><div class="line">    <span class="keyword">private</span> SQLiteDatabase db;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataBaseManager</span><span class="params">(Context context)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dbHelper = <span class="keyword">new</span> DataBaseOpenHelper(context);</div><div class="line">        <span class="keyword">this</span>.db = dbHelper.getWritableDatabase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CopyOfDataBaseManager</span><span class="params">(Context context, <span class="keyword">int</span> version)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dbHelper = <span class="keyword">new</span> DataBaseOpenHelper(context, version);</div><div class="line">        <span class="keyword">this</span>.db = dbHelper.getWritableDatabase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeDataBase</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (db != <span class="keyword">null</span> &amp;&amp; db.isOpen()) &#123;</div><div class="line">            db.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInitData</span><span class="params">(String tableName)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        String sql = <span class="string">"select count(*) from "</span> + tableName;</div><div class="line">        Cursor cursor = db.rawQuery(sql, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</div><div class="line">            count = cursor.getInt(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearTable</span><span class="params">(String tableName)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"delete from "</span> + tableName + <span class="string">";"</span>;</div><div class="line">        sql += <span class="string">"update sqlite_sequence set seq = 0 where name = "</span> + tableName + <span class="string">";"</span>;</div><div class="line">        db.execSQL(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertProvinceData</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"insert into "</span> + CityData.TABLE_NAME_PROVINCE + <span class="string">" ("</span> + CityData.COLUMN_NAME_ID + <span class="string">","</span></div><div class="line">                + CityData.COLUMN_NAME_NAME + <span class="string">") VALUES("</span> + id + <span class="string">",'"</span> + name + <span class="string">"');"</span>;</div><div class="line">        db.execSQL(sql);</div><div class="line">        System.out.println(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// TODO其他一下对表进行的操作</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先我们创建一个DataBaseOpenHelper的实例，然后通过它拿到SQLiteDatabase对象，这样我们就可以对数据库进行操作了。DataBaseOpenHelper有两种get方法：<code>getWritableDatabase()</code> 和 <code>getReadableDatabase()</code>，大家都应该知道着两种方法的含义，<code>getReadableDatabase()</code> 拿到的数据库对象不可以进行插入修改等写操作。在这两种方法的说明在我们可能需要注意几点：</p>
<ul>
<li>当我们没有申请数据库操作的权限或者磁盘已满，会报错</li>
<li>数据库的更新可能需要很长时间，因此我们不能在主线程中调用</li>
<li>当我们不再对数据库进行操作时，别忘记关闭数据库</li>
</ul>
<p>接下来就是数据库的常用操作了</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> SQLite </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」0x01本地数据安全尝试SQLCipher]]></title>
      <url>/1970/01/01/%5BAndroid%5D0x01%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%B0%9D%E8%AF%95SQLCipher/</url>
      <content type="html"><![CDATA[<h2 id="0x00"><a href="/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>先纪念下，从今天开始，又开始写博客啦啦啦啦。话说基本上一年多没好好写博客了。回想起来，和之前写博客时相比，还是差距好大。好吧，废话不说了，进入正题。</p>
<p>首先，开篇打算跟大家分享下你遇到的或者将来可能遇到的问题：本地数据的安全问题。多数情况，我们可能没有去考虑app的本地数据安全问题，一来公司没这样的要求，二来我们可能也没有非常需要保密的数据。那现在思考一下为将来做储备。</p>
<p>面试的时候，可能常常会被问到这样一个问题：Android的数据存储有哪几种方式？ 对于这个问题，<a href="http://developer.android.com/guide/topics/data/data-storage.html" target="_blank" rel="external">Android的官方文档</a> 有回答：</p>
<ul>
<li>Shared Preferences</li>
<li>Internal Storage</li>
<li>External Storage</li>
<li>SQLite Databases</li>
<li>Network Connection</li>
</ul>
<p>这几种方式就不用多说了。第一种以key-value的方式存储在我们的设备内部；第二种第三种简单理解为文件存储；第四种本地数据库存储（这四种都属本地存储）。最后一种方式（暂且算是一种方式吧）不在我们考虑范围之内。现在假设一个最坏的环境：设备已经root，任何本地数据都可以被直接或者间接拿到。这时候我们自然想到的就是对我们的数据进行加密。</p>
<h2 id="0x01"><a href="/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>以上是开场，下面进入第一部分：本地数据库加密。<br>先回顾下本地数据库，root以后，我们可以在下面的位置找到它：<code>/data/data/you.package/databases</code>，例如我们demo的数据库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">root@t03g:/data/data/com.ttdevs.demo/databases # ls</div><div class="line">normal_user.db</div><div class="line">normal_user.db-journal</div><div class="line">user.db</div><div class="line">root@t03g:/data/data/com.ttdevs.demo/databases #</div><div class="line">``` </div><div class="line"></div><div class="line">知道了它的位置，接下来我们就可以直接将这些数据库文件拷贝出来，然后使用SQLite浏览器浏览。</div><div class="line">我们选用网上一个开源的方案：[SQLCipher][2]（[GitHub地址][3]）。SQLCipher是在SQLite的基础上封装了加密功能，使用上和直接使用SQLite基本相同。</div><div class="line"></div><div class="line"></div><div class="line">## 0x02</div><div class="line"></div><div class="line">首先，按照说明，我们引入SQLCipher：</div><div class="line"></div><div class="line">``` gradle</div><div class="line">compile &apos;net.zetetic:android-database-sqlcipher:3.3.1-2@aar&apos;</div></pre></td></tr></table></figure>
<p>接下来就是编写我们的数据库代码了。先创建一个DatabaseHelper：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> net.sqlcipher.database.SQLiteDatabase;</div><div class="line"><span class="keyword">import</span> net.sqlcipher.database.SQLiteOpenHelper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_NAME = <span class="string">"user.db"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DATABASE_VERSION = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TABLE = <span class="string">"user_info"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"name"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AGE = <span class="string">"age"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ICON = <span class="string">"icon"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOKEN = <span class="string">"token"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DatabaseOpenHelper</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, DATABASE_NAME, <span class="keyword">null</span>, DATABASE_VERSION);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">        String sql = <span class="string">"create table "</span> + TABLE +</div><div class="line">                <span class="string">" (_id integer primary key autoincrement, "</span> +</div><div class="line">                NAME + <span class="string">" text, "</span> +</div><div class="line">                AGE + <span class="string">" integer, "</span> +</div><div class="line">                ICON + <span class="string">" blob, "</span> +</div><div class="line">                TOKEN + <span class="string">" text not null);"</span>;</div><div class="line">        Log.d(<span class="string">"EventsData"</span>, <span class="string">"onCreate: "</span> + sql);</div><div class="line">        db.execSQL(sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (oldVersion &lt; newVersion) &#123;</div><div class="line">            <span class="comment">// TODO</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>注意，此处的SQLiteOpenHelper和SQLiteDatabase都来自net.sqlcipher.database包。</code></p>
<p>为了便于对比，我又写了一个相同逻辑使用<code>android.database.sqlite.SQLiteOpenHelper</code>的Helper作对比。接下来使用编写数据库操作逻辑。使用中SQLiteCipher区别是打开数据库的时候需要传入用于加密的KEY。下面是测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlcipherActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"&gt;&gt;&gt;&gt;&gt;"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CIPHER_KEY = <span class="string">"123abc_!@#$%^&amp;*"</span>;</div><div class="line">    <span class="keyword">private</span> DatabaseOpenHelper mOpenHelper;</div><div class="line">    <span class="keyword">private</span> NormalDatabaseOpenHelper mNormalHelper;</div><div class="line">...</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeData</span><span class="params">(<span class="keyword">boolean</span> isCipher)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isCipher) &#123;</div><div class="line">            log(<span class="string">"Cipher:101:"</span> + System.currentTimeMillis());</div><div class="line">            SQLiteDatabase db = mOpenHelper.getWritableDatabase(PASSWORD_KEY);</div><div class="line">            log(<span class="string">"Cipher:102:"</span> + System.currentTimeMillis());</div><div class="line">            String name = <span class="string">"Cipher"</span> + (++mIndex);</div><div class="line">            ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">            values.put(DatabaseOpenHelper.NAME, name);</div><div class="line">            values.put(DatabaseOpenHelper.AGE, mIndex);</div><div class="line">            values.put(DatabaseOpenHelper.TOKEN, PASSWORD_KEY);</div><div class="line">            values.put(DatabaseOpenHelper.ICON, name.getBytes());</div><div class="line">            log(<span class="string">"Cipher:11:"</span> + System.currentTimeMillis());</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                db.beginTransaction();</div><div class="line">                db.insert(DatabaseOpenHelper.TABLE, <span class="keyword">null</span>, values);</div><div class="line">                db.setTransactionSuccessful();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                db.endTransaction();</div><div class="line">            &#125;</div><div class="line">            log(<span class="string">"Cipher:12:"</span> + System.currentTimeMillis());</div><div class="line">            db.close();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readData</span><span class="params">(<span class="keyword">boolean</span> isCipher)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isCipher) &#123;</div><div class="line">            SQLiteDatabase db = mOpenHelper.getReadableDatabase(PASSWORD_KEY);</div><div class="line">            Cursor cursor = db.query(DatabaseOpenHelper.TABLE, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">                String name = cursor.getString(cursor.getColumnIndex(DatabaseOpenHelper.NAME));</div><div class="line">                <span class="keyword">int</span> age = cursor.getInt(cursor.getColumnIndex(DatabaseOpenHelper.AGE));</div><div class="line">                String token = cursor.getString(cursor.getColumnIndex(DatabaseOpenHelper.TOKEN));</div><div class="line">                String result = String.format(<span class="string">"Cipher&gt;&gt;&gt;&gt; name:%s, age:%d, token:%s"</span>, name, age, token);</div><div class="line">                log(result);</div><div class="line">            &#125;</div><div class="line">            db.close();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            android.database.sqlite.SQLiteDatabase ndb = mNormalHelper.getReadableDatabase();</div><div class="line">            android.database.Cursor cursor = ndb.query(NormalDatabaseOpenHelper.TABLE, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">            <span class="keyword">while</span> (cursor.moveToNext()) &#123;</div><div class="line">                String name = cursor.getString(cursor.getColumnIndex(DatabaseOpenHelper.NAME));</div><div class="line">                <span class="keyword">int</span> age = cursor.getInt(cursor.getColumnIndex(DatabaseOpenHelper.AGE));</div><div class="line">                String token = cursor.getString(cursor.getColumnIndex(DatabaseOpenHelper.TOKEN));</div><div class="line">                String result = String.format(<span class="string">"Normal&gt;&gt;&gt;&gt; name:%s, age:%d, token:%s"</span>, name, age, token);</div><div class="line">                log(result);</div><div class="line">            &#125;</div><div class="line">            ndb.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，跑一下我们的测试代码，得到下面的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">02-19 13:49:41.596 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: &gt;&gt;&gt;&gt;&gt; Cipher &gt;&gt;&gt;&gt;&gt;</div><div class="line">02-19 13:49:41.596 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher:101:1455860981597</div><div class="line">02-19 13:49:41.971 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher:102:1455860981974</div><div class="line">02-19 13:49:41.971 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher:11:1455860981974</div><div class="line">02-19 13:49:41.981 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher:12:1455860981983</div><div class="line">02-19 13:49:42.201 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Cipher&gt;&gt;&gt;&gt; name:Cipher1, age:1, token:123abc_!@#$%^&amp;*</div><div class="line">02-19 13:49:42.201 24884-24884/com.ttdevs.demo I/Choreographer: Skipped 35 frames!  The application may be doing too much work on its main thread.</div><div class="line">02-19 13:49:49.471 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: &gt;&gt;&gt;&gt;&gt; Noremal &gt;&gt;&gt;&gt;&gt;</div><div class="line">02-19 13:49:49.476 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal:101:1455860989477</div><div class="line">02-19 13:49:49.521 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal:102:1455860989525</div><div class="line">02-19 13:49:49.521 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal:11:1455860989525</div><div class="line">02-19 13:49:49.531 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal:12:1455860989535</div><div class="line">02-19 13:49:49.541 24884-24884/com.ttdevs.demo E/&gt;&gt;&gt;&gt;&gt;: Normal&gt;&gt;&gt;&gt; name:Normal2, age:2, token:123abc_!@#$%^&amp;*</div></pre></td></tr></table></figure>
<p>通过简单的对比，我们发现，SQLCipher在打开写数据库的时候花费了375ms，时间大概是SQLite 45ms的8~9倍，所以我们在log中看到丢帧的提示。这就提示我们，简单的数据库操作，使用SQLite我们也可能需要考虑将其放在新的线程中。当然，这个测试对比不够完善，比如大文件写入，大量数据插入，事务等等，因此还需要更多、更详细的测试来检测SQLCipher的性能等，这里就暂不讨论了。</p>
<p>跑完上面的代码，我们来看看我们本地数据库中都创建了哪些东西：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@t03g:/data/data/com.ttdevs.demo/databases # ls</div><div class="line">normal_user.db</div><div class="line">normal_user.db-journal</div><div class="line">user.db</div><div class="line">root@t03g:/data/data/com.ttdevs.demo/databases #</div></pre></td></tr></table></figure>
<p>我们把这两个db文件拷贝到我们的电脑，看看里面有哪些东西。这里推荐一个工具：<a href="http://sqlitebrowser.org/" target="_blank" rel="external">sqlitebrowser</a>。打开他们的网站你会发现它有两个版本的：Standard和SQLCipher的。是的，你没看错，就是针对SQLCipher的。如果你使用Standard版本，你会发现无法打开我们加密后的user.db（当然你也可是试试其他方法）。使用SQLCipher版的，打开之前会要求输入我们加密的KEY，就是我们上面的<code>123abc_!@#$%^&amp;*</code>。这时候我们就可以看到原始的数据了，如下图：</p>
<p><img src="http://img.blog.csdn.net/20160219151008300" alt="Browser SQLCipher Data"></p>
<h2 id="0x03"><a href="/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>到这里，我们基本上已经见到了SQLCipher的使用。还没有结束，再来看一个问题：在创建项目开始，我尝试跑了下项目，apk的大小是1.4MB，在Gradle中引入SQLCipher之后，体积一下子飙到了8.7MB。呵呵呵~~ 这个体积的增加还是值得我们慎重的思考一下下的。</p>
<h2 id="0x04"><a href="/1970/01/01/[Android]0x01本地数据安全尝试SQLCipher/#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>说了这么多，我们可以得到这样一个结论，使用SQLiteCipher可以对我们客户端的本地数据库进行加密，但是我们需要自己存一个加密KEY，如果我们能保存好这个KEY，那我们的数据基本是安全的。但是同时，我们可能需要考虑数据库加密过程中引入的新的问题，比如：apk体积的暴增，加密对性能的影响，加密KEY的保存等等。这些问题考虑好之后，我们就可以决定是否引入SQLCipher。</p>
<p>如果你对引入SQLiteCiper引起的新问题心存芥蒂，那接下来给大家推荐下一种方法。敬请期待：<a href="http://blog.csdn.net/ttdevs/" target="_blank" rel="external">Android本地数据安全尝试(中)</a></p>
<p>PS：<a href="https://github.com/ttdevs/Demo" target="_blank" rel="external">Github Demo</a></p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」0x02本地数据安全尝试Conceal]]></title>
      <url>/1970/01/01/%5BAndroid%5D0x02%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%B0%9D%E8%AF%95Conceal/</url>
      <content type="html"><![CDATA[<h2 id="0x00"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>上一篇我们提到使用SQLCipher对本地的数据进行加密。在保证数据安全的同时，我们又引入了一些新的问题，比如安装包体积的增加，数据存储过程中耗时增加，数据加密的粒度不可控等等。如果你接受不了这些问题，那我们还需寻找其他的加密方法。这里给大家推荐<a href="https://github.com/facebook/conceal" target="_blank" rel="external">Conceal</a></p>
<h2 id="0x01"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x01" class="headerlink" title="0x01"></a>0x01</h2><p><a href="https://github.com/facebook/conceal" target="_blank" rel="external">Conceal</a>是Facebook的一个开源项目，它可以高效的对大文件进行加密（当然对小数据加密也不是问题），同时对设备的性能和系统版本要求比较低。更具体的信息可参考<a href="https://facebook.github.io/conceal/" target="_blank" rel="external">这里</a>。</p>
<blockquote>
<p>Conceal doesn’t implement any crypto, but instead, it uses specific cryptographics algorithms from OpenSSL. Conceal attempts to manage memory efficiently between the native and Java heap. Conceal also uses fast modes like AES-GCM and HMAC-SHA1 by default.<br>OpenSSL is a very large library, and would increase the size of apps. Conceal ships with only a select number of encryption algorithms from OpenSSL which make it much smaller (85KB). </p>
</blockquote>
<h2 id="0x02"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x02" class="headerlink" title="0x02"></a>0x02</h2><h3 id="引用"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#引用" class="headerlink" title="引用"></a>引用</h3><p><code>compile &#39;com.facebook.conceal:conceal:1.0.1@aar&#39;</code></p>
<h3 id="关键代码"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><p>我们可以用其加密常见的数据类型，比如字符串，图片等。</p>
<ul>
<li>字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 加密</span></div><div class="line"><span class="keyword">byte</span>[] cipherText = mCrypto.encrypt(plainText, mEntity);</div><div class="line"><span class="comment">// 解密</span></div><div class="line"><span class="keyword">byte</span>[] plainText = mCrypto.decrypt(cipherText, mEntity);</div></pre></td></tr></table></figure>
<ul>
<li>大文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">OutputStream out = mCrypto.getCipherOutputStream(fileOS, mEntity);</div><div class="line"><span class="keyword">int</span> read = <span class="number">0</span>;</div><div class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line"><span class="keyword">while</span> ((read = sourceFile.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">    out.write(buffer, <span class="number">0</span>, read);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENTITY = <span class="string">"ttdevs"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == mCrypto) &#123;</div><div class="line">        mCrypto = <span class="keyword">new</span> Crypto(<span class="keyword">new</span> SharedPrefsBackedKeyChain(context), <span class="keyword">new</span> SystemNativeCryptoLibrary());</div><div class="line">        mEntity = <span class="keyword">new</span> Entity(ENTITY);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上三部分是我们使用Conceal的关键代码。首先，我们需要构造一个Crypto对象，这个对象需要传入两个参数，第一个是KeyChain，第二个是NativeCryptoLibrary。NativeCryptoLibrary我们使用系统默认的。KeyChain顾名思义，就是我们的加密key。例子中我们使用了SharedPrefsBackedKeyChain，通过查看源码，我们发现，它是将加密的key保存到SharedPreferences中的一个KeyChain的实现。</p>
<h3 id="测试"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#测试" class="headerlink" title="测试"></a>测试</h3><p>接下来我们来看看Conceal的表现如何。我写了一个简单的测试代码，由于比较长，就不贴了，具体可以参考<a href="https://github.com/ttdevs/Demo" target="_blank" rel="external">这里</a>，主要有三个部分：</p>
<ul>
<li>测试字符串加解密</li>
<li>测试加密数据的数据库读写</li>
<li>测试本地文件加解密</li>
</ul>
<p>界面如下：</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/app/image-conceal-string.png" alt="测试界面"></p>
<ul>
<li>字符串加解密</li>
</ul>
<p>字符串的读写如上图，加解密字符串<code>Hello world!</code>耗时都在3ms左右，这个时间应该是我们可以接受的。</p>
<p><code>PS:强势插入一个2B问题</code></p>
<blockquote>
<p>细心的你可能会想如果我们不用数据库，只是加密几个简单的数据，能不能将密文直接写入SharedPreferences中呢？告诉你我也是这么想的，而且去测试了，但是死活不成功，不成功，不成功……<br>我的思路是这样的：由于加密、加密结果、解密 三个操作参数都是byte，而SharedPreferences接受的参数是String类型，因此我们需要进行转换，<code>new String(bytes, &quot;utf-8&quot;)</code> 和 <code>string.getBytes(&quot;utf-8&quot;)</code> ， 当你这么做的时候，你会发现解密死活不成功。经历过无数个不眠之夜后，终于恍然大悟，原来这么转换是错误的！原因很简单，一个utf-8编码汉字是2bytes，如果我们的加密结果不足2byte，我们强转时不足部分就会被补齐，当再转换回来的时候就和原来的不一一样了。最后怎么解决呢？也很简单，用Base64对byte数组进行编码，具体怎么做可以参考Conceal源码中的SharedPrefsBackedKeyChain。</p>
</blockquote>
<ul>
<li>数据库读写</li>
</ul>
<p>这个时间就不做过多解读，数据库操作时间加加解密时间。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1456500607857: Begin transaction </div><div class="line">1456500607861: Insert: Hello world! </div><div class="line">1456500607865: Read: name:Hello world! token:Hello world! </div><div class="line">1456500607868: Read: name:Hello world! token:Hello world! </div><div class="line">1456500607871: Read: name:Hello world! token:Hello world! </div><div class="line">1456500607885: End transaction</div></pre></td></tr></table></figure>
<ul>
<li>文件加解密</li>
</ul>
<p>这个比较重要，如果我们有大文件加密的需求（比如前段时间微信的红包图片），对性能和效率要求就比较高了。</p>
<p>某一次加密数据：</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/app/image-conceal-file.png" alt="测试界面"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Encrpyt 1.png 1014KB 163ms</div><div class="line">Encrpyt 2.jpg 2078KB 336ms</div><div class="line">Encrpyt 3.jpg 3043KB 477ms</div><div class="line">Encrpyt 4.JPG 3811KB 560ms</div><div class="line">Encrpyt 5.JPG 4772KB 699ms</div><div class="line">Encrpyt 10.apk 10268KB 1281ms</div><div class="line">Encrpyt 10.gif 10421KB 671ms</div><div class="line">Encrpyt 21.apk 20962KB 1323ms</div></pre></td></tr></table></figure>
<p>某一次解密数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Decrpyt encrypt_1.png 1014KB 108ms</div><div class="line">Decrpyt encrypt_2.jpg 2078KB 177ms</div><div class="line">Decrpyt encrypt_3.jpg 3043KB 221ms</div><div class="line">Decrpyt encrypt_4.JPG 3811KB 270ms</div><div class="line">Decrpyt encrypt_5.JPG 4772KB 340ms</div><div class="line">Decrpyt encrypt_10.apk 10268KB 732ms</div><div class="line">Decrpyt encrypt_10.gif 10421KB 764ms</div><div class="line">Decrpyt encrypt_21.apk 20962KB 1468ms</div></pre></td></tr></table></figure>
<p>从上面的数据我们可以看到，加密多张大图并没有导致内存的增加，只是CPU使用率有所变化。加密1MB图片耗时160ms，加密20MB文件耗时1300ms多。解密数据的性能消耗类似。</p>
<h2 id="0x03"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#0x03" class="headerlink" title="0x03"></a>0x03</h2><h3 id="分析"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#分析" class="headerlink" title="分析"></a>分析</h3><p>了解了Conceal的基本情况，我们来对比下上面提到的使用SQLCipher遇到的问题。首先，Conceal只有85KB，这个大小是我们完全可以接受的，然后就是加密粒度，无论是数据库还是文件，我们都可以只真对需要的那部分加密，最后即使你选择将文件存入数据库，它的时间也只有正常数据库操作时间加Conceal的加解密时间。综上所述，Conceal应该是一个不错的选择。</p>
<h3 id="总结"><a href="/1970/01/01/[Android]0x02本地数据安全尝试Conceal/#总结" class="headerlink" title="总结"></a>总结</h3><p>我们再来想想这两篇文章中提到的加密方法：无论你选择哪一种，由于他们都采用了对称加密算法，虽然数据部分加密了，但是我们却需要维护一个秘钥，这个秘钥放在那里？SharedPreferences？数据库？本地文件？貌似进入了一个死循环，问题又回到了起点。分析了这么多，如果没有办法解决秘钥的问题，也都是白搭。怎么办？下一篇在进一步分析。敬请期待。</p>
<p><code>PS: 所有测试机器 魅族 MX4PRO 性能均衡模式</code></p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」0x03本地数据安全尝试JNI]]></title>
      <url>/1970/01/01/%5BAndroid%5D0x03%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%B0%9D%E8%AF%95JNI/</url>
      <content type="html"><![CDATA[<p>前两篇，我们谈到了使用SQLCipher和Conceal对本地数据进行加密。由于都两种方法都采用了对称加密，因此我们需要自己管理加密的秘钥。这时你会发现，虽然对我们的数据进行了加密，但是我们却引入了新的问题。我们的加密方法很容易通过反编译apk获取到，那么，我们就需要安全的维护这个秘钥了。但遗憾的是，本地数据存储方式我们都已经讲述，并没有一种一劳永逸的安全保存方法，那么，我们的秘钥存在哪里合适呢？这个时候你可能会想到本地不行那我们存到服务器上吧，通过https进行传输。这样当然可以，通过一定的算法为每个人配置一个秘钥，需要的时候请求网络获取，然后对本地数据进行解密。但是这样也存在一个问题：本地保存的数据如果不联网就无法打开。那么，还有更好的方案吗？今天给大家介绍JNI。</p>
<h2 id="0x01"><a href="/1970/01/01/[Android]0x03本地数据安全尝试JNI/#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>NDK，JNI对于刚接触android开发的攻城狮来说是有较大的门槛的，但是为了实现我们更安全的保存数据，他可能是不错的选择。反编译过别人家app的你可能都遇到过这样的情况：一个个没无法查看代码逻辑的so文件。这些文件我们可以使用java代码调用，实现一些我们不知道内部逻辑但是会给我们一个结果功能。那么，我们把密码放到这些so中就可以更进一步提高我们本地数据的安全级别。</p>
<p>下面通过一个加单的demo来看看JNI的实现。</p>
<p>首先创建一个工具类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CipherUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"Cipher"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getCipherKey</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个类文件上点击右键，使用我们之前配置的javah工具生成头文件。之后我们会在和java目录同级的jni文件下看到一个.h文件，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="comment">/* Header for class com_ttdevs_ndk_CipherUtil */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_com_ttdevs_ndk_CipherUtil</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_com_ttdevs_ndk_CipherUtil</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Class:     com_ttdevs_ndk_CipherUtil</div><div class="line"> * Method:    getCipherKey</div><div class="line"> * Signature: ()Ljava/lang/String;</div><div class="line"> */</div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_ttdevs_ndk_CipherUtil_getCipherKey</span></span></div><div class="line">  <span class="params">(JNIEnv *, jclass)</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>然后在h文件的同级新建一个C++文件（右键&gt;New&gt;C/C++ Source file）,内容如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"QiniuConfig.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG <span class="meta-string">"System.out"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_ttdevs_ndk_CipherUtil.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_ttdevs_ndk_CipherUtil_getCipherKey</span><span class="params">(JNIEnv *env, jclass)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> (*env).NewStringUTF(<span class="string">"Hello World! getCipherKey"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们还需要创建两个文件，一个叫Android.mk，另一个叫Application.mk，他们都在jni目录下。</p>
<ul>
<li>Android.mk:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># http://developer.android.com/intl/zh-tw/ndk/guides/android_mk.html</div><div class="line"></div><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE := Cipher</div><div class="line">LOCAL_SRC_FILES := Cipher.cpp</div><div class="line">LOCAL_LDLIBS += -llog</div><div class="line"></div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>
<ul>
<li>Application.mk</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># http://developer.android.com/intl/zh-tw/ndk/guides/application_mk.html</div><div class="line"></div><div class="line"># APP_STL := stlport_static</div><div class="line">APP_STL := gnustl_static</div><div class="line">APP_CPPFLAGS := -frtti -std=c++11</div><div class="line">APP_CFLAGS += -Wno-error=format-security</div><div class="line"></div><div class="line">APP_ABI := all</div></pre></td></tr></table></figure>
<p>还没有完，我们还需要修改当前Project或者Module的gradle.build文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion 23</div><div class="line">    buildToolsVersion &quot;23.0.2&quot;</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion 16</div><div class="line">        targetSdkVersion 23</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line"></div><div class="line">        ndk &#123;</div><div class="line">            moduleName &quot;ndkutil&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sourceSets.main &#123;</div><div class="line">        jni.srcDirs = []</div><div class="line">        jniLibs.srcDir &quot;libs&quot;</div><div class="line">    &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完成这些，我们就可以进行编译了。在当前Project（Module）上点击右键，使用之前配置的ndk-build工具进行编译，如果没有问题，我们会在libs目录下看到生产的so文件。好了，最后我们可以编写测试代码了：在java直接调用刚才创建的CipherUtil即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Log.d(<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span>, CipherUtil.getCipherKey());</div></pre></td></tr></table></figure>
<p>运行上面代码，我们可以在log中看到输出的字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello World! getCipherKey</div></pre></td></tr></table></figure>
<h2 id="0x02"><a href="/1970/01/01/[Android]0x03本地数据安全尝试JNI/#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>上述demo中，我们只是简单的返回一个字符串，要实现更安全，我们可以将此方法写的更复杂，比如获取app的签名，获取设备的硬件信息进行复杂的组合，以保障最终生成的秘钥的唯一性和安全性（更难伪造），这里有一个<a href="https://github.com/MasonLiuChn/AndroidUltimateEncrypt" target="_blank" rel="external">demo</a>可以参考。</p>
<p>写到这里，可能又有人会问到：其实so文件也不是很全，可以通过对汇编的分析得到里面的代码逻辑。当然，高手是可以做到对so文件进行分析的，但是so还是可以阻隔大部分的反编译人员。如果我们能把getCipherKey实现的更好，也会增加破解的成本。另外，so还有一个被盗用的问题，就是别人直接调用我们的so，这个问题也可以通过一定的代码逻辑来避免。之后会继续讲解。</p>
<p>最后再说一点，对于秘钥，我们最终还会被载入我们的内存，如果直接dump我们的内存，会是一个人什么样的结果呢？</p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」Android闹钟遇到的那些坑]]></title>
      <url>/1970/01/01/%5BAndroid%5DAndroid%E9%97%B9%E9%92%9F%E9%81%87%E5%88%B0%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</url>
      <content type="html"><![CDATA[<h2 id="0x00-做过闹钟的话你才会理解的坑"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x00-做过闹钟的话你才会理解的坑" class="headerlink" title="0x00 做过闹钟的话你才会理解的坑"></a>0x00 做过闹钟的话你才会理解的坑</h2><p>第一次做闹钟程序是在2012年，那时候android最新版本是2.2，2.3发布在即，做了一个整点提醒的小工具，记得很清楚，主要的问题是锁屏之后闹钟不能准时被唤醒，总会晚那么几秒钟，后来没办法把闹钟提前设置几秒钟。不过那时候环境还好，没有遇到攻克不了的问题，重启也可以唤起闹钟的。</p>
<p>但是随着android版本的进化，开发者节操的丢失，问题就越来越难做了。闹钟明明设置了却不能到来；不再设置的时间到来，晚了好久才到；重启之后闹钟就没了等等。当然，还有好多好多，总之很多东西不按照自己期待的来。</p>
<p>项目上线，踩过之后挑一些做总结。</p>
<p>由于时间关系，项目比较赶，所以没有去考虑闹钟无法及时触发的问题，假设了一个最理想的环境。（更多的信息可以参考下面的文章）</p>
<h2 id="0x01-闹钟的创建"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x01-闹钟的创建" class="headerlink" title="0x01 闹钟的创建"></a>0x01 闹钟的创建</h2><p>这里涉及到不同版本设置闹钟的方法，下面的参考文章中已经提到：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startAlarm</span><span class="params">(Calendar calendar, PendingIntent pendingIntent)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">       <span class="comment">// mManager.setWindow(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), 1000* 5, mFirstPIntent);</span></div><div class="line">       mManager.setExact(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), pendingIntent);</div><div class="line">       <span class="comment">// mManager.set(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), mSecondPIntent);</span></div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       mManager.set(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), pendingIntent);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x02-闹钟的取消"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x02-闹钟的取消" class="headerlink" title="0x02 闹钟的取消"></a>0x02 闹钟的取消</h2><p>有的时候可能需要去取消一个闹钟。我们可以通过两种方式来取消：</p>
<ul>
<li><p>通过 <code>PendingIntent.cancel();</code> 来取消</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Cancel a currently active PendingIntent.  Only the original application</div><div class="line"> * owning a PendingIntent can cancel it.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ActivityManagerNative.getDefault().cancelIntentSender(mTarget);</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>这种方式只有能拿到 `PendingIntent` 才可以。
</code></pre><ul>
<li><p>通过 <code>AlarmManager.cancel(PendingIntent);</code> 来取消</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Remove any alarms with a matching &#123;<span class="doctag">@link</span> Intent&#125;.</div><div class="line"> * Any alarm, of any type, whose Intent matches this one (as defined by</div><div class="line"> * &#123;<span class="doctag">@link</span> Intent#filterEquals&#125;), will be canceled.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> operation IntentSender which matches a previously added</div><div class="line"> * IntentSender.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@see</span> #set</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">(PendingIntent operation)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        mService.remove(operation);</div><div class="line">    &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="0x03-闹钟的查看"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0x03-闹钟的查看" class="headerlink" title="0x03 闹钟的查看"></a>0x03 闹钟的查看</h2><p>又个adb命令可以用来查看当前系统中存在的闹钟：</p>
<p><code>adb shell dumpsys alarm</code></p>
<p><img src="http://img.blog.csdn.net/20170224183136089?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>不是在所有的设备上都好使，比如在我的魅族设备上可以正常使用，而在另一台 OPPO R7C上就不可以。</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Android]Android闹钟遇到的那些坑/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ul>
<li><a href="http://www.jianshu.com/p/1f919c6eeff6" target="_blank" rel="external">http://www.jianshu.com/p/1f919c6eeff6</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」Android Studio 1.x NDK环境搭建]]></title>
      <url>/1970/01/01/%5BAndroid%5DAndroid%20Studio%201.x%20NDK%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="下载NDK"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#下载NDK" class="headerlink" title="下载NDK"></a>下载NDK</h2><h3 id="下载"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="http://developer.android.com/ndk/downloads/index.html" target="_blank" rel="external">NDK Download</a></p>
<p><a href="http://dl.google.com/android/ndk/android-ndk-r10e-linux-x86.bin" target="_blank" rel="external">mac: android-ndk-r10e-linux-x86.bin</a></p>
<h3 id="安装"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ndk ls</div><div class="line">android-ndk-r10e-darwin-x86_64.bin</div><div class="line">➜  ndk chmod a+x android-ndk-r10e-darwin-x86_64.bin</div><div class="line">➜  ndk ./android-ndk-r10e-darwin-x86_64.bin</div></pre></td></tr></table></figure>
<h2 id="配置环境"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="gradle-properties"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h3><p>在末尾添加一行： <code>android.useDeprecatedNdk=true</code></p>
<h3 id="添加build工具"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#添加build工具" class="headerlink" title="添加build工具"></a>添加build工具</h3><p>AS &gt; Preferences &gt; Tools &gt; External Tools</p>
<h4 id="add-javah"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#add-javah" class="headerlink" title="add javah"></a>add javah</h4><ul>
<li>Name: javah</li>
<li>Group: default(External Tools)</li>
<li>Description: generate C header</li>
<li>Options: select all</li>
<li>Show in: select all</li>
<li>Tools Settings:<ul>
<li>Program:  <code>$JDKPath$/bin/javah</code></li>
<li>Parameters:  <code>-v -d $ModuleFileDir$/src/main/jni -jni $FileClass$</code></li>
<li>Parameters:  <code>-bootclasspath $ModuleSdkPath$/platforms/android-23/android.jar -v -d $ModuleFileDir$/src/main/jni -jni $FileClass$</code> (if you need android object)</li>
<li>Working directory:  <code>$SourcepathEntry$</code></li>
</ul>
</li>
</ul>
<p>(PS: Right click on the class)</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/ndkutil/image-javah.png" alt="项目结构"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  ~ javah</div><div class="line">用法:</div><div class="line">  javah [options] &lt;classes&gt;</div><div class="line">其中, [options] 包括:</div><div class="line">  -o &lt;file&gt;                输出文件 (只能使用 -d 或 -o 之一)</div><div class="line">  -d &lt;dir&gt;                 输出目录</div><div class="line">  -v  -verbose             启用详细输出</div><div class="line">  -h  --help  -?           输出此消息</div><div class="line">  -version                 输出版本信息</div><div class="line">  -jni                     生成 JNI 样式的标头文件 (默认值)</div><div class="line">  -force                   始终写入输出文件</div><div class="line">  -classpath &lt;path&gt;        从中加载类的路径</div><div class="line">  -bootclasspath &lt;path&gt;    从中加载引导类的路径</div><div class="line">&lt;classes&gt; 是使用其全限定名称指定的</div><div class="line">(例如, java.lang.Object)。</div></pre></td></tr></table></figure>
<h4 id="add-ndkBuild"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#add-ndkBuild" class="headerlink" title="add ndkBuild"></a>add ndkBuild</h4><ul>
<li>Name: ndkBuild</li>
<li>Group: default(External Tools)</li>
<li>Description: ndk build</li>
<li>Options: select all</li>
<li>Show in: select all</li>
<li>Tools Settings:<ul>
<li>Program:  <code>/Users/ttdevs/android/android-ndk-r10e/ndk-build</code></li>
<li>Parameters:  <code>NDK_LIBS_OUT=$ModuleFileDir$/libs</code></li>
<li>Working directory:  <code>$ModuleFileDir$/src/main</code></li>
</ul>
</li>
</ul>
<p>(PS: Right click on the module name)</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/ndkutil/image-ndkbuild.png" alt="项目结构"></p>
<h2 id="编写代码"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><h3 id="新建一个Module：ndkutil"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#新建一个Module：ndkutil" class="headerlink" title="新建一个Module：ndkutil"></a>新建一个Module：ndkutil</h3><h3 id="修改ndkutil的build-gradle"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#修改ndkutil的build-gradle" class="headerlink" title="修改ndkutil的build.gradle"></a>修改ndkutil的build.gradle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    defaultConfig &#123;</div><div class="line">        ...</div><div class="line">        ndk &#123;</div><div class="line">            moduleName <span class="string">"ndkutil"</span></div><div class="line">//            abiFilters <span class="string">"armeabi-v7a"</span>, <span class="string">"x86"</span></div><div class="line">//            stl <span class="string">"gnustl_static"</span></div><div class="line">//            cFlags <span class="string">"-std=c++11 -Wall"</span></div><div class="line">//            ldLibs <span class="string">"log"</span>, <span class="string">"jnigraphics"</span>, <span class="string">"EGL"</span>, <span class="string">"GLESv3"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sourceSets.main &#123;</div><div class="line">        jni.srcDirs = []</div><div class="line">        jniLibs.srcDir <span class="string">"libs"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建工具类CipherUtil"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#创建工具类CipherUtil" class="headerlink" title="创建工具类CipherUtil"></a>创建工具类CipherUtil</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ttdevs.ndk;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CipherUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"Cipher"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getCipherKey</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成头文件com-ttdevs-ndk-CipherUtil-h"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#生成头文件com-ttdevs-ndk-CipherUtil-h" class="headerlink" title="生成头文件com_ttdevs_ndk_CipherUtil.h"></a>生成头文件com_ttdevs_ndk_CipherUtil.h</h3><p>在刚才创建的CipherUtil.java上点击右键 &gt; External Tools &gt; javah<br>此时会在main目录下生成: jni/com_ttdevs_ndk_CipherUtil.h</p>
<h3 id="编写代码-1"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#编写代码-1" class="headerlink" title="编写代码"></a>编写代码</h3><p>都是在ndkutil/src/main/jni目录下</p>
<ul>
<li>创建C源码:Cipher.cpp</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_ttdevs_ndk_CipherUtil.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_ttdevs_ndk_CipherUtil_getCipherKey</span><span class="params">(JNIEnv *env, jclass)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (*env).NewStringUTF(<span class="string">"Hello World!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>创建Android.mk</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">LOCAL_MODULE := Cipher</div><div class="line">LOCAL_SRC_FILES := Cipher.cpp</div><div class="line"></div><div class="line">include $(BUILD_SHARED_LIBRARY)</div></pre></td></tr></table></figure>
<ul>
<li>创建Application.mk</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">APP_MODULE := Cipher</div><div class="line">APP_ABI := all</div></pre></td></tr></table></figure>
<h3 id="编译生成so文件"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#编译生成so文件" class="headerlink" title="编译生成so文件"></a>编译生成so文件</h3><p>在module（ndkutil）上点击右键 &gt; External Tools &gt; ndkBuild ，可以看到如下log：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/Users/ttdevs/android/android-ndk-r10d/ndk-build NDK_LIBS_OUT=/Users/ttdevs/android/workspace/Demo/ndkutil/libs</div><div class="line">[arm64-v8a] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[arm64-v8a] SharedLibrary  : libCipher.so</div><div class="line">[arm64-v8a] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/arm64-v8a/libCipher.so</div><div class="line">[x86_64] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[x86_64] SharedLibrary  : libCipher.so</div><div class="line">[x86_64] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/x86_64/libCipher.so</div><div class="line">[mips64] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[mips64] SharedLibrary  : libCipher.so</div><div class="line">[mips64] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/mips64/libCipher.so</div><div class="line">[armeabi-v7a] Compile++ thumb: Cipher &lt;= Cipher.cpp</div><div class="line">[armeabi-v7a] SharedLibrary  : libCipher.so</div><div class="line">[armeabi-v7a] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/armeabi-v7a/libCipher.so</div><div class="line">[armeabi] Compile++ thumb: Cipher &lt;= Cipher.cpp</div><div class="line">[armeabi] SharedLibrary  : libCipher.so</div><div class="line">[armeabi] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/armeabi/libCipher.so</div><div class="line">[x86] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[x86] SharedLibrary  : libCipher.so</div><div class="line">[x86] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/x86/libCipher.so</div><div class="line">[mips] Compile++      : Cipher &lt;= Cipher.cpp</div><div class="line">[mips] SharedLibrary  : libCipher.so</div><div class="line">[mips] Install        : libCipher.so =&gt; /Users/ttdevs/android/workspace/Demo/ndkutil/libs/mips/libCipher.so</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
<p>此时我们可以发现在ndkutil/libs/目录下生成的so文件。</p>
<h3 id="测试代码"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String cipher = CipherUtil.getCipherKey();</div></pre></td></tr></table></figure>
<h2 id="项目结构"><a href="/1970/01/01/[Android]Android Studio 1.x NDK环境搭建/#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://raw.githubusercontent.com/ttdevs/Demo/master/ndkutil/image-dir.png" alt="项目结构"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」DataBinding给Button设置背景无效]]></title>
      <url>/1970/01/01/%5BAndroid%5DDataBinding%E7%BB%99Button%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E6%97%A0%E6%95%88/</url>
      <content type="html"><![CDATA[<h2 id="0x00-问题"><a href="/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x00-问题" class="headerlink" title="0x00 问题"></a>0x00 问题</h2><p>通过Data Binding给Button设置背景无效。<br>具体表现为给Button设置不同的背景图片，但是无论怎样背景只会显示不同的颜色，而不是显示期望的图片。</p>
<h2 id="0x01-分析"><a href="/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>由于对Data Binding不是很熟悉，所以很奇怪为什么。不管怎样先打印下这个资源的值，发现在布局文件中打印资源值是有的。根据经验，设置不同的背景图片，背景会显示不同的颜色，那这个值可能被解析成了颜色值。</p>
<h2 id="0x02-解决"><a href="/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x02-解决" class="headerlink" title="0x02 解决"></a>0x02 解决</h2><p>在网上搜了一下（容我忘记了具体网址），需要通过不同的方式来设置背景：<br>之前的：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">      <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">      <span class="attr">android:onClick</span>=<span class="string">"@&#123;(view) -&gt; handler.onStartClick(view)&#125;"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"@string/button_start"</span></div><div class="line">      <span class="attr">android:textColor</span>=<span class="string">"@color/blueColor"</span></div><div class="line">      <span class="attr">android:textSize</span>=<span class="string">"@dimen/global_font_large"</span></div><div class="line">      <span class="attr">android:background</span>=<span class="string">"@&#123;handler.startButtonBg&#125;"</span></div><div class="line">      <span class="attr">tools:background</span>=<span class="string">"@drawable/btn_main_circle_start"</span> /&gt;</div></pre></td></tr></table></figure>
<p>修改之后：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">      <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">      <span class="attr">android:onClick</span>=<span class="string">"@&#123;(view) -&gt; handler.onStartClick(view)&#125;"</span></div><div class="line">      <span class="attr">android:text</span>=<span class="string">"@string/button_start"</span></div><div class="line">      <span class="attr">android:textColor</span>=<span class="string">"@color/blueColor"</span></div><div class="line">      <span class="attr">android:textSize</span>=<span class="string">"@dimen/global_font_large"</span></div><div class="line">      <span class="attr">app:backgroundResource</span>=<span class="string">"@&#123;handler.startButtonBg&#125;"</span></div><div class="line">      <span class="attr">tools:background</span>=<span class="string">"@drawable/btn_main_circle_start"</span> /&gt;</div></pre></td></tr></table></figure>
<p>也就是将之前的 <code>android:background</code> 换成 <code>app:backgroundResource</code></p>
<h2 id="0x03-总结"><a href="/1970/01/01/[Android]DataBinding给Button设置背景无效/#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>没啥总结的，Data Binding 还有很多等待探究。</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」Android Studio 2.0 NDK开发环境搭建]]></title>
      <url>/1970/01/01/%5BAndroid%5DAndroid%20Studio%202.0%20NDK%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="0x00-前情回顾"><a href="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x00-前情回顾" class="headerlink" title="0x00 前情回顾"></a>0x00 前情回顾</h2><p>前不久写了一篇环境搭建，虽然可以跑一个demo，但是如果你跟着做的话就会发现，仅仅是可以跑一个Demo，真做起来很是蛋疼。编写源码，生成so，跑App，改一点代码，再生成so，跑app。而且编写代码没有提示，不能格式化，各种不能，就是最基本的文本开发。经过一段时间折腾和Android Studio 2.0的 release，发现有更完美的方式，而且不用编写Android.mk和Application.mk。看在我刚开始学的份上，容我再来写一遍。看完这篇，你会发现JNI的开发也是如此的so easy。</p>
<h2 id="0x01-环境搭建"><a href="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>所需环境：</p>
<ol>
<li>Android Studio 2.0</li>
<li>Gradle 2.10（最低要求）</li>
<li>NDK：ndk-r11c（目前最新版：2016-04-16）</li>
<li>LLDB：2.1（目前最新版：2016-04-16）</li>
</ol>
<p>下面开始正式操作：</p>
<ul>
<li><p>安装Android Studio 2.0</p>
<p>  这个就不细说了。</p>
</li>
<li><p>配置Gradle</p>
<p>  最低要求Gradle版本为2.10，目前最新版本为2.12。修改方法：</p>
<p>  <code>项目根目录/gradle/wrapper/gradle-wrapper.properties</code></p>
<p>  将最下面的一行改成你要的版本，如：</p>
<p>  <code>distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip</code></p>
</li>
<li><p>安装NDK</p>
<p>  安装NDK有两种方式，一种是直接下载最新的NDK安装文件进行安装，另一种是通过SDK安装：</p>
<ol>
<li><p>NDK安装文件</p>
<p> 下载参考<a href="http://developer.android.com/ndk/downloads/index.html" target="_blank" rel="external">这里</a>。根据你的操作系统下载不同版本。</p>
</li>
<li><p>通过SDK安装</p>
<p> <code>Android Studio &gt; Preferences &gt; Appearance &amp; Behavior &gt; Syetem Settings &gt; Android SDK &gt; SDK Tools</code></p>
<p> 在这个Tab中找到 <code>Android NDK</code>，选中安装即可。安装之后我们可以在 Android SDK 的目录下看到一个 <code>ndk-bundle</code> 目录，这个就是我们的NDK目录。</p>
<p><img src="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/image.png" alt="ndk_lldb"></p>
</li>
</ol>
</li>
<li><p>LLDB</p>
<p>  和 GDB 类似，<a href="http://lldb.llvm.org/" target="_blank" rel="external">LLDB</a>  是一款调试器，可以调试我们的JNI代码。同上打开SDK设置界面：</p>
<p>  <code>Android Studio &gt; Preferences &gt; Appearance &amp; Behavior &gt; Syetem Settings &gt; Android SDK &gt; SDK Tools</code></p>
<p>  在这个Tab中找到 <code>LLDB</code>，选中安装即可。安装之后我们可以在 Android SDK 的目录下看到一个 <code>lldb</code> 目录，这个就是我们的 LLDB 目录。LLDB的更多信息可参考<a href="http://lldb.llvm.org/" target="_blank" rel="external">这里</a>。</p>
</li>
</ul>
<p>通过上面的配置，接下来就可以开始我们的JNI的开发了。 可能你会问之前我有介绍过一篇开发环境的搭建，这个有什么不同呢？如果你使用之前的方法，你需要配置 Android.mk、Application.mk，无代码自动完成，不能代码个时候，运行调试麻烦，等等。这些问题在这里都不存在了，让我们把更多的精力放到代码编写中。</p>
<h2 id="0x02-测试Demo"><a href="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x02-测试Demo" class="headerlink" title="0x02 测试Demo"></a>0x02 测试Demo</h2><p>新建java代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CipherUtils</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"CipherUtils"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成对应的C++代码：</p>
<p>令人兴奋的是，Android Studio可以帮我们自动生成 C 代码。点击 <code>add</code> 方法，Option ＋ Return 即可生成一个 <code>CipherUtils.c</code>文件，由于我打算使用C++，因此将扩展名改为 <code>cpp</code> ，同时添加头文件，最终如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utils/log.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_ttdevs_jniutils_CipherUtils_add</span><span class="params">(JNIEnv *env, jclass type, jint x, jint y)</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">input_str</span><span class="params">(<span class="string">"Test add two number!"</span>)</span></span>;</div><div class="line">    LOGE(<span class="string">"%s"</span>, input_str.c_str());</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>PS：如果报错，可是将错误的 cpp文件拷贝出来再考吧回去。</code></p>
<p>build.gradle 配置</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ......</div><div class="line">        defaultConfig &#123;</div><div class="line">        ......</div><div class="line">        ndk &#123;</div><div class="line">            moduleName <span class="string">"CipherUtils"</span></div><div class="line">            stl <span class="string">"gnustl_static"</span> <span class="comment">// stlport_static</span></div><div class="line">            abiFilters <span class="string">"armeabi"</span>, <span class="string">"armeabi-v7a"</span></div><div class="line">            ldLibs <span class="string">"log"</span>, <span class="string">"android"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">sourceSets</span>.main &#123;</div><div class="line">        <span class="comment">// 如果不写(jni.srcDirs = ['src/main/jni/'])</span></div><div class="line">        <span class="comment">// Android展示模式没有jni目录</span></div><div class="line">        <span class="comment">// this file has been added after the last project sync with gradle</span></div><div class="line">        <span class="comment">// 必须有值,如: 'src/main/jni/'</span></div><div class="line">        jni.srcDirs = [<span class="string">'src/main/jni/'</span>]</div><div class="line">        <span class="comment">// jniLibs.srcDir "libs"</span></div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接点击运行按钮，即可跑我们的测试程序了。就这么简单。</p>
<h2 id="0x03-JNI层的Debug"><a href="/1970/01/01/[Android]Android Studio 2.0 NDK开发环境搭建/#0x03-JNI层的Debug" class="headerlink" title="0x03 JNI层的Debug"></a>0x03 JNI层的Debug</h2><p>这个同样简单。首先需要在外面的build.gradle中配置一下：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ......</div><div class="line">    buildTypes &#123;</div><div class="line">        debug &#123;</div><div class="line">            jniDebuggable = <span class="keyword">true</span></div><div class="line">        &#125;</div><div class="line">        ......</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>C/C++</code> 源文件上添加断点，点击debug，就可以像debug我们的java代码一样调试我们的原生代码了。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」Android你可能要用到的自定义View分享]]></title>
      <url>/1970/01/01/%5BAndroid%5DAndroid%E4%BD%A0%E5%8F%AF%E8%83%BD%E8%A6%81%E7%94%A8%E5%88%B0%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h2 id="0x00-main"><a href="/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x00-main" class="headerlink" title="0x00 main"></a>0x00 main</h2><p>进步、创新都是在不断变化的需求中诞生的。<br>                        －－ By ttdevs</p>
<p>这不，新的需求又来了。废话不多说，先上设计稿：</p>
<p><img src="http://img.blog.csdn.net/20160619220030319" alt="boohee design"></p>
<p>简单分析上图包括三部分：最上面的类Progressbar，中间两个指示盘和最下面的指示盘。第一个类Progressbar我们项目之前有实现过，但是和这个需求有一些差异，因此决定重新实现一遍。另外两个圆形指示盘本想通过在一张背景图片上放一张指针图，控制指针图的旋转来实现，但是考虑到这样不够灵活，因此也决定自己来画。So，我们接下来实现这三个View。</p>
<p>正式开始之前，先看看我们最终效果图（当然，指针是可以动的）：</p>
<p><img src="http://img.blog.csdn.net/20160629135550259" alt="Indicator view"></p>
<h2 id="0x01-分析"><a href="/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><ul>
<li><p>LineIndicator （第一个，类Progressbar）</p>
<p>  主要包括三部分：左侧的提示和内容，右侧的提示和内容，中间的类Progressbar。两侧的文字比较容易处理，掌握了文字的基本绘制，画起来是很容易的。中间的类Progressbar由于打算自己画，所以不会直接贴个Progressbar在上面。我的思路是画一条长的直线作为背景，中间的指示也是直线，比背景直线粗，直线的Paint设置 <code>StrokeCap</code> 为 <code>Paint.Cap.ROUND</code> 即 <code>paint.setStrokeCap(Paint.Cap.ROUND);</code>，这样就可以有两头半圆的效果；中间的指示数字直接画在粗的指示直线上面即可。这里可能遇到的问题有下面两个：</p>
<ul>
<li><p><code>StrokeCap</code> 设置 为 <code>Paint.Cap.ROUND</code>时的位置关系</p>
<p>  <code>StrokeCap</code> 设置 为 <code>Paint.Cap.ROUND</code>，直线两侧的半圆是不算在直线的长度里的。简单来说，如果view的长度和我画的直线长度一致，那么这个直线就是矩形而不是期待的两侧都是半圆的椭圆。</p>
</li>
<li><p>当进度为0或者为100％时的展示</p>
<p>  如果我们背景直线和指示直线起点终点位置一致，那么最终效果就是当进度为0或者100%的时候，指示直线是显示不全的，因此我们需要对这两个位置进行矫正。我的矫正方法比较简单，在0～x和y～100%进度的时候分别显示x和y（本以为自己的思路很屌，后来发现别人也是这么干的）。</p>
</li>
</ul>
</li>
<li><p>CircleIndicator （中间的多种颜色环）</p>
<p>  这个View我将其分解为四部分，从上层到下层：中间指针，刻度环，显示的内容，圆环背景和外层指示文字。每一部分再做分解：</p>
<ul>
<li><p>中间指针</p>
<p>  这个又分解为六个部分：最下层大圆，两个圆形半圆，两个三角形和上层小圆。</p>
</li>
<li><p>刻度环</p>
<p>  由于是圆环，所以必须画弧线了。但是这个弧线又有点特殊，两侧带圆角，中间圆环直角，这个没想到啥好办法，用了很一般的思路：先用 <code>Paint.Cap.ROUND</code> 画两侧的弧，然后 <code>Paint.Style.STROKE</code> 画中间的部分。</p>
</li>
<li><p>显示的内容</p>
<p>  这个就比较简单了，主要在于计算文字的显示位置。</p>
</li>
<li><p>圆环背景和外层文字</p>
<p>  最简单的一个圆，加一个以圆为路径画的文字。</p>
</li>
</ul>
</li>
</ul>
<pre><code>最后我们画的顺序正好与上面所述顺序相反。
</code></pre><ul>
<li><p>ProgressIndicator （最下面的两种颜色环）</p>
<p>  这个相较 CircleIndicator 就简单了一些。在画圆环的时候，我们只需要先画一个灰色背景，然后再画一个绿色圆弧即可。</p>
</li>
</ul>
<h2 id="0x02-实现"><a href="/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x02-实现" class="headerlink" title="0x02 实现"></a>0x02 实现</h2><p>View的绘制我们应该都比较熟悉，主要有下面三个过程： onMeasure（测量）、onLayout（布局）、onDraw（绘制）。针对上述三个View：LineIndicator，我们根据实际的内容来计算View的高度，宽度用户设定；CircleIndicator和ProgressIndicator的宽度用户设定，高度自定计算与宽度相同。onLayout我们不需要。最后的根据实际的展示内容来绘制。</p>
<p>另外，由于CircleIndicator和ProgressIndicator和相似度高，很多代码可以拿来重用，因此，我写了一个基类来完成公共的部分，特殊部分每个 子类自己完成。最后再子类地onDraw方法中按照顺序调用即可。</p>
<p>由于主要是计算各种坐标位置，代码还是不少的，这里就不贴代码。最后的实现请移步我的 <a href="https://github.com/ttdevs/android/tree/master/modules/indicator" target="_blank" rel="external">github</a>。三个View的代码已经整理完LineIndicator，其它的两个还需要点时间（2016-06-19）。</p>
<h2 id="0x03-知识点"><a href="/1970/01/01/[Android]Android你可能要用到的自定义View分享/#0x03-知识点" class="headerlink" title="0x03 知识点"></a>0x03 知识点</h2><ul>
<li><p>自定义View的思路</p>
<ul>
<li>创建类，继承自View或者ViewGroup或者其它ViewGroup</li>
<li>定义View的可配置参数，如果你需要的话</li>
<li><p>实现View的具体逻辑</p>
<p>这个太粗略了，各位可以参考具体源码。</p>
</li>
</ul>
</li>
<li><p>文字位置的计算</p>
<p>  如果你没有自己画过文字，那你肯定不可能一下子明白文字的画法，或多或少的出现偏移。这里直接给大家推荐一篇讲的非常详细的文章：<a href="http://blog.csdn.net/aigestudio/article/details/41447349" target="_blank" rel="external">http://blog.csdn.net/aigestudio/article/details/41447349</a></p>
</li>
<li><p>位置、半径、弧长等的计算</p>
<p>  这里会涉及到简单的三角函数和圆的周长弧度的计算，可能要说的就是三角函数的参数是弧度制度。</p>
</li>
<li><p>ObjectAnimator</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置内容的颜色值（非resource的id）</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> contentColor 内容的颜色值</div><div class="line"> * <span class="doctag">@param</span> unitColor    单位的颜色值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentColor</span><span class="params">(<span class="keyword">int</span> contentColor, <span class="keyword">int</span> unitColor)</span> </span>&#123;</div><div class="line">    mContentColor = contentColor;</div><div class="line">    mUnitColor = unitColor;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置进度</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> indicator 进度值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndicator</span><span class="params">(<span class="keyword">float</span> indicator)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (indicator &lt;= mStartIndicator) &#123;</div><div class="line">        mIndicator = mStartIndicator;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (indicator &gt; mEndIndicator) &#123;</div><div class="line">        mIndicator = mEndIndicator;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mIndicator = indicator;</div><div class="line">    &#125;</div><div class="line">    postInvalidate();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取进度</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> 当前进度值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getIndicator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mStartIndicator;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">animateIndicator</span><span class="params">(<span class="keyword">float</span> indicator)</span> </span>&#123;</div><div class="line">    Interpolator interpolator = <span class="keyword">new</span> AnticipateOvershootInterpolator(<span class="number">1.8f</span>);</div><div class="line">    ObjectAnimator animation = ObjectAnimator.ofFloat(<span class="keyword">this</span>, <span class="string">"indicator"</span>, indicator);</div><div class="line">    animation.setDuration(<span class="number">2000</span>);</div><div class="line">    animation.setInterpolator(interpolator);</div><div class="line">    animation.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>处理屏幕的旋转</p>
<p>  由于时间比较紧，这个我还没做。主要在View的以下两个方法中实现：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Parcelable <span class="title">onSaveInstanceState</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">super</span>.onSaveInstanceState();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(Parcelable state)</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onRestoreInstanceState(state);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>最后欢迎各位吐槽并提供更好的建议～～</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」MediaPlayer单曲循环不卡顿]]></title>
      <url>/1970/01/01/%5BAndroid%5DMediaPlayer%E5%8D%95%E6%9B%B2%E5%BE%AA%E7%8E%AF%E4%B8%8D%E5%8D%A1%E9%A1%BF/</url>
      <content type="html"><![CDATA[<h2 id="0x00-需求"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x00-需求" class="headerlink" title="0x00 需求"></a>0x00 需求</h2><p>单曲循环播放歌曲，要求过度连贯，听不出来卡顿感觉。</p>
<h2 id="0x01-解决思路"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x01-解决思路" class="headerlink" title="0x01 解决思路"></a>0x01 解决思路</h2><ol>
<li><p>MediaPlayer</p>
<p> 对于常见的音乐播放，我们第一时间想到的应该就是它，它有一个方法</p>
<p> <code>MediaPlayer.setLooping(true);</code></p>
<p> 就是用来进行单曲循环的。但是很遗憾，如果你简单的这么做，上面的目的是达不到的，会出现上一遍结束出现一个明显的停止才开始播放下一次的现象。</p>
<p> 不过最后就是用的这个组件，不过不是简单的设置 <code>setLooping(true)</code>。</p>
</li>
<li><p>SoundPool</p>
<p>一段时间内可能会播放很多音乐的时候，我们首先应该选择这个。</p>
</li>
<li><p>第三方组件</p>
<p> 如果没有特殊的需求，这个不是首选，特别是当引入的组件特别重的时候。    </p>
</li>
</ol>
<p>因为之前踩过坑：iOS上直接播放mp3文件，单曲循环的时候播放的间隙特别长，卡顿的感觉无法接受，解决方法是将mp3转换成m4a，基本上听不出中间的过度间隙。<br>首先尝试了使用 <code>MediaPlayer</code> 来播放，在我的机器（MX4 Pro）上播放还勉强能接受，间隙不是非常明显，换到配置差一点的机器上就不能忍了。然后尝试了 <code>SoudPool</code> ，无论是预加载一次循环播放，还是预加载两次循环播放，中间的卡顿感觉和用 <code>MediaPlayer.setLooping(true);</code> 一样一样的。再然后，尝试macOS 下编译 <code>vlc for android</code> ，我失败了╮(╯▽╰)╭）问题总要解决的，再找其他办法。</p>
<h2 id="0x02-死循环"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x02-死循环" class="headerlink" title="0x02 死循环"></a>0x02 死循环</h2><p>找了很多资料，最后使用一个循环播放的方法解决了这个问题：</p>
<ul>
<li>创建第一个播放器，播放；</li>
<li>同时创建第二个播放器，准备；</li>
<li>第一个播放器播放完毕立马启动第二个；</li>
<li>然后创建第三个播放器，准备；</li>
<li>如此往复，直到用户停止…</li>
</ul>
<p>由于对 <code>MediaPlayer</code> 没有过深入的研究和使用，这个思路来一时半会自己还是想不出来的（总是会想只要创建一个播放器就够了）。这么做下来真的循环播放就没有间隙感了……</p>
<p>由于 <code>mPlayer.setLooping(true);</code> 是native方法，所以没有去跟具体的实现逻辑。猜测可能是重新加载或者其他原因导致单曲循环中间间隙较大（原谅我的懒，没有去拿大文件尝试）。而使用上面的方式，当播放时间大于预加载时间的时候，第一个播放器播放的时候有第二个播放器有充足的机会去完成加载然后等待播放（播放时间小于加载时间的可能性不是很大）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> MediaPlayer mPlayer, mNextPlayer;</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> mPlayResId = R.raw.water;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLoopPlayer</span><span class="params">()</span> </span>&#123;</div><div class="line">    mPlayer = MediaPlayer.create(<span class="keyword">this</span>, mPlayResId);</div><div class="line">    mPlayer.setOnPreparedListener(<span class="keyword">new</span> MediaPlayer.OnPreparedListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">(MediaPlayer mediaPlayer)</span> </span>&#123;</div><div class="line">            mPlayer.start();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    createNextMediaPlayer();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createNextMediaPlayer</span><span class="params">()</span> </span>&#123;</div><div class="line">    mNextPlayer = MediaPlayer.create(<span class="keyword">this</span>, mPlayResId);</div><div class="line">    mPlayer.setNextMediaPlayer(mNextPlayer);</div><div class="line">    mPlayer.setOnCompletionListener(<span class="keyword">new</span> MediaPlayer.OnCompletionListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(MediaPlayer mp)</span> </span>&#123;</div><div class="line">            mp.release();</div><div class="line"></div><div class="line">            mPlayer = mNextPlayer;</div><div class="line"></div><div class="line">            createNextMediaPlayer();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x03-总结"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>这更像一个开脑洞的问题。</p>
<h2 id="0x04-参考"><a href="/1970/01/01/[Android]MediaPlayer单曲循环不卡顿/#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><ul>
<li><a href="http://stackoverflow.com/questions/26274182/not-able-to-achieve-gapless-audio-looping-so-far-on-android" target="_blank" rel="external">http://stackoverflow.com/questions/26274182/not-able-to-achieve-gapless-audio-looping-so-far-on-android</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」Toobar的一个简单封装]]></title>
      <url>/1970/01/01/%5BAndroid%5DToobar%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>Toolbar和ActionBar的直观区别就是需要我们自己将ToolBar加到自己的布局文件中。目前的情况是：在我们的现有项目上改动，多数的Activity都是继承一个BaseActivity。为了用最小的代价达到目的，简单的思考之后，做了如下的改动：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 带ToolBar的基类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">ActionBarActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_VIEW_ID = R.layout.activity_base;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LayoutParams LAYOUT_PARAMS = <span class="keyword">new</span> LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinearLayout mParentView;</div><div class="line">    <span class="keyword">private</span> Toolbar mToolBar;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        ViewUtils.startTranslucent(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(BASE_VIEW_ID);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (BASE_VIEW_ID == layoutResID) &#123;</div><div class="line">            <span class="keyword">super</span>.setContentView(layoutResID);</div><div class="line"></div><div class="line">            mParentView = (LinearLayout) findViewById(R.id.base_parent_view);</div><div class="line">            mToolBar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">            initToolbar(mToolBar);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mParentView.addView(getLayoutInflater().inflate(layoutResID, <span class="keyword">null</span>), LAYOUT_PARAMS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        mParentView.addView(view, LAYOUT_PARAMS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initToolbar</span><span class="params">(Toolbar toolbar)</span> </span>&#123;</div><div class="line">        setSupportActionBar(toolbar);</div><div class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">        toolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Toolbar <span class="title">getToolBar</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mToolBar;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBackground</span><span class="params">(<span class="keyword">int</span> colorId)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mParentView) &#123;</div><div class="line">            mParentView.setBackgroundColor(getResources().getColor(colorId));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>布局文件activity_base.xml：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">   xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">   android:id="@+id/base_parent_view"</div><div class="line">   android:layout_width="match_parent"</div><div class="line">   android:layout_height="match_parent"</div><div class="line">   android:background="@color/global_background_status_bar"</div><div class="line">   android:fitsSystemWindows="true"</div><div class="line">   android:orientation="vertical"&gt;</div><div class="line">    </div><div class="line">   &lt;include layout="@layout/subview_toolbar"/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>在基类中添加如上代码，基本可以用最小的改动达到使用Toolbar的目的。但是，这样也存在一个问题，就是会使我们的每个Activity的布局层次多了一层。</p>
<p>如果有更好的思路，欢迎分享～～</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」*不同Context区别]]></title>
      <url>/1970/01/01/%5BAndroid%5D%E4%B8%8D%E5%90%8CContext%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">AlertDialog dialog = <span class="keyword">new</span> AlertDialog</div><div class="line">    .Builder(context)</div><div class="line">    .setTitle(title)</div><div class="line">    .setCancelable(<span class="keyword">false</span>)</div><div class="line">    .setPositiveButton(<span class="string">"确定"</span>, listener)</div><div class="line">    .create();</div><div class="line">dialog.show();</div></pre></td></tr></table></figure>
<p>错误信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">android.view.WindowManager$BadTokenException: Unable to add window -- token <span class="keyword">null</span> is not <span class="keyword">for</span> an </div><div class="line">	at android.view.ViewRootImpl.setView(ViewRootImpl.java:<span class="number">589</span>)</div><div class="line">	at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:<span class="number">326</span>)</div><div class="line">	at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:<span class="number">224</span>)</div><div class="line">	at android.view.WindowManagerImpl$CompatModeWrapper.addView(WindowManagerImpl.java:<span class="number">149</span>)</div><div class="line">	at android.app.Dialog.show(Dialog.java:<span class="number">293</span>)</div><div class="line">	at com.ttdevs.easysecuritysmartbar.StartHandler.handleMessage(StartHandler.java:<span class="number">39</span>)</div><div class="line">	at android.os.Handler.dispatchMessage(Handler.java:<span class="number">99</span>)</div><div class="line">	at android.os.Looper.loop(Looper.java:<span class="number">137</span>)</div><div class="line">	at android.app.ActivityThread.main(ActivityThread.java:<span class="number">4866</span>)</div><div class="line">	at java.lang.reflect.Method.invokeNative(Native Method)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">511</span>)</div><div class="line">	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">786</span>)</div><div class="line">	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">553</span>)</div><div class="line">	at dalvik.system.NativeStart.main(Native Method)</div></pre></td></tr></table></figure>
<p>其中context是通 <code>getApplicationContext()</code> 获取的，将其换成 <code>Activity</code> 问题解决。</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Android]不同Context区别/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/40481055" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/40481055</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」LayoutInflate遇到的坑]]></title>
      <url>/1970/01/01/%5BAndroid%5DLayoutInflate%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h2 id="0x01-问题"><a href="/1970/01/01/[Android]LayoutInflate遇到的坑/#0x01-问题" class="headerlink" title="0x01 问题"></a>0x01 问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initVoiceItem</span><span class="params">()</span> </span>&#123;</div><div class="line">    viewMusicList.removeAllViews();</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> localResource = SysPreferences.getAlarmVoiceResource();</div><div class="line">    LayoutInflater inflater = LayoutInflater.from(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VOICE_KEY.length; i++) &#123;</div><div class="line">        View view = inflater.inflate(R.layout.item_voice_name, viewMusicList); <span class="comment">// <span class="doctag">TODO:</span> 2017/2/10</span></div><div class="line">        view.setOnClickListener(mClickListener);</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> View.OnClickListener mClickListener = <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> size = viewMusicList.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            View view = viewMusicList.getChildAt(i);</div><div class="line">            ...</div><div class="line">            <span class="keyword">if</span> (v == view) &#123;</div><div class="line">                &#123;...<span class="number">1</span>...&#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                &#123;...<span class="number">2</span>...&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>有上面一串代码，你能发现有什么问题吗？</p>
<p>嗯嗯，是这样的：只会执行代码块{1}，并没有像我们期待的那样点击的时候执行到代码块{2}中去。没有细究，通过下面的代码直接跨过去：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initVoiceItem</span><span class="params">()</span> </span>&#123;</div><div class="line">   viewMusicList.removeAllViews();</div><div class="line">   </div><div class="line">   <span class="keyword">int</span> localResource = SysPreferences.getAlarmVoiceResource();</div><div class="line">   LayoutInflater inflater = LayoutInflater.from(<span class="keyword">this</span>);</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VOICE_KEY.length; i++) &#123;</div><div class="line">       View view = inflater.inflate(R.layout.item_voice_name, <span class="keyword">null</span>); <span class="comment">// <span class="doctag">TODO:</span> 2017/2/10</span></div><div class="line">       view.setOnClickListener(mClickListener);</div><div class="line">       ...</div><div class="line">       viewMusicList.addView(view);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然不知道什么原因，但是找到解决办法，不过还是挺惭愧的······</p>
<h2 id="0x02-分析"><a href="/1970/01/01/[Android]LayoutInflate遇到的坑/#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h2><p>很多人可能跟我一样，开始学的时候，记住该怎么写，这个方法是干嘛的。但是很难避免会记错某个方法，就像我们会写错某个字一样，当别人纠正的时候才知道，这个字自己已经写错十几活着几十年了。来看一下 <code>View.inflate()</code> 这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Inflate a new view hierarchy from the specified xml resource. Throws</div><div class="line">* &#123;<span class="doctag">@link</span> InflateException&#125; if there is an error.</div><div class="line">* </div><div class="line">* <span class="doctag">@param</span> resource ID for an XML layout resource to load (e.g.,</div><div class="line">*        &lt;code&gt;R.layout.main_page&lt;/code&gt;)</div><div class="line">* <span class="doctag">@param</span> root Optional view to be the parent of the generated hierarchy.</div><div class="line">* <span class="doctag">@return</span> The root View of the inflated hierarchy. If root was supplied,</div><div class="line">*         this is the root View; otherwise it is the root of the inflated</div><div class="line">*         XML file.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(@LayoutRes <span class="keyword">int</span> resource, @Nullable ViewGroup root)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> inflate(resource, root, root != <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们传入了 <code>root</code> View，那么返回的就是root View， 如果不传，则返回根据布局文件生成的 View。而根据我上面的代码，显然被我错误的理解，无论传不传 <code>root</code> View，返回的都是根据布局文件生成的 View，而我就这么相安无事的用了好几年······</p>
<h2 id="0x03-你以为这就这样结束了"><a href="/1970/01/01/[Android]LayoutInflate遇到的坑/#0x03-你以为这就这样结束了" class="headerlink" title="0x03 你以为这就这样结束了"></a>0x03 你以为这就这样结束了</h2><p>如果你执行我的错误代码，你会看到下面这个图：</p>
<p><img src="http://img.blog.csdn.net/20170212223305559?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>这个这个图有两个信息：</p>
<ul>
<li>后面几个Item显示的名称是错误的</li>
<li>点击某个Item，其他几个Item的checkbox也被选择</li>
</ul>
<p>我们按照错误的代码执行的逻辑进行分析。首先：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; VOICE_KEY.length; i++) &#123;</div><div class="line">  View view = inflater.inflate(R.layout.item_voice_name, viewMusicList);</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码会循环多次，将inflate后的布局添加到viewMusicList，这样viewMusicList下面就有多个 <code>item_voice_name</code> 因此最终给我们展现的结果就是看到有多个Item。</p>
<p>对于第一个问题，我们需要从 <code>view.findViewById()</code> 说起，从View中你会发现这两段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Look for a child view with the given id.  If this view has the given</div><div class="line">* id, return this view.</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> id The id to search for.</div><div class="line">* <span class="doctag">@return</span> The view that has the given id in the hierarchy or null</div><div class="line">*/</div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> View <span class="title">findViewById</span><span class="params">(@IdRes <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> findViewTraversal(id);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* &#123;<span class="doctag">@hide</span>&#125;</div><div class="line">* <span class="doctag">@param</span> id the id of the view to be found</div><div class="line">* <span class="doctag">@return</span> the view of the specified id, null if cannot be found</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">findViewTraversal</span><span class="params">(@IdRes <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (id == mID) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是不是太简单，根本没找到我们期待的逻辑——ViewGroup中怎么处理，细心的你会发现ViewGroup重写了 <code>findViewTraversal()</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">findViewTraversal</span><span class="params">(@IdRes <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (id == mID) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">final</span> View[] where = mChildren;</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> len = mChildrenCount;</div><div class="line"></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">       View v = where[i];</div><div class="line"></div><div class="line">       <span class="keyword">if</span> ((v.mPrivateFlags &amp; PFLAG_IS_ROOT_NAMESPACE) == <span class="number">0</span>) &#123;</div><div class="line">           v = v.findViewById(id);</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (v != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">return</span> v;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从这段代码可以看出，在ViewGroup中根据ID查找，找到就返回，而找到的永远是最前面的View。这就解释了为什么第一个Item和其他的不同了。</p>
<p>（对于点击某个Item，其他Item也出现波纹效果，猜测可能是因为波纹效果是根据ID来实现的。TODO ）</p>
<h2 id="0x04-总结"><a href="/1970/01/01/[Android]LayoutInflate遇到的坑/#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>上面遇到的View inflate是我个人遇到的问题，主要是因为对基础知识掌握有问题。另外在使用inflate的时候，可能还会遇到LayoutParam设置无效的问题，这个可以通过套一个View的方式解决，仅此记录。 </p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」从浏览器中打开我们的应用]]></title>
      <url>/1970/01/01/%5BAndroid%5D%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E6%89%93%E5%BC%80%E6%88%91%E4%BB%AC%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="0x01-需求"><a href="/1970/01/01/[Android]从浏览器中打开我们的应用/#0x01-需求" class="headerlink" title="0x01 需求"></a>0x01 需求</h2><p>有时候你会发现，用Android系统自带的浏览器（chrome）打开一个web页面，如果安装了相应的App，就会自动打开这个App并进入具体的界面中，比如手机上打开：</p>
<p><code>https://www.zhihu.com/openinapp_instruction?app-id=432274380&amp;app-argument=zhihu://questions/24122524</code></p>
<p>如果我们安装了知乎手机客户端，这个时候会自动打开知乎手机客户端，并且进入问题展示界面。还比如网易云音乐，今日头条等等App都是支持这个功能的。之前我们自家App的分享都是打开一个App介绍的界面，即使安装了手机客户端，也不会自动打开手机客户端。为了追求更好的体验，我们需要实现这个功能。</p>
<h2 id="0x01-Chrome浏览器"><a href="/1970/01/01/[Android]从浏览器中打开我们的应用/#0x01-Chrome浏览器" class="headerlink" title="0x01 Chrome浏览器"></a>0x01 Chrome浏览器</h2><p>研究这个功能，还是查阅了不少资料，比如 app link、deep link、chrome browser等等，如果紧紧是实现上面介绍的功能，还是 so easy的，仅仅需要了解 <code>Chrome</code> 浏览器 创建 Intent 的方法即可。</p>
<p>Chrome构造一个 Intent 的基本语法如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">intent:</div><div class="line">   HOST/URI-path // Optional host </div><div class="line">   #Intent; </div><div class="line">      package=[string]; </div><div class="line">      action=[string]; </div><div class="line">      category=[string]; </div><div class="line">      component=[string]; </div><div class="line">      scheme=[string]; </div><div class="line">   end;</div></pre></td></tr></table></figure>
<p>根据上面的语法，我们来看一个demo：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">intent:</div><div class="line">   //article/51348656</div><div class="line">   #Intent; </div><div class="line">      package=com.ttdevs.android; </div><div class="line">      scheme=ttdevs; </div><div class="line">   end;</div></pre></td></tr></table></figure>
<p>可以使用下面的 html 代码触发这个事件：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"intent://article/51348656/#Intent;scheme=ttdevs;package=com.ttdevs.android;end"</span>&gt;</span>ttdevs<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>另外还有个参数：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">S.browser_fallback_url=[encoded_full_url]</div></pre></td></tr></table></figure>
<p>介绍如下（不过我没搞明白）：</p>
<blockquote>
<p>When an intent could not be resolved, or an external application could not be launched, then the user will be redirected to the fallback URL if it was given.<br>Some example cases where Chrome does not launch an external application are as follows:</p>
<ul>
<li>The intent could not be resolved, i.e., no app can handle the intent.</li>
<li>JavaScript timer tried to open an application without user gesture.<br>Note that S.<name> is a way to define string extras. S.browser_fallback_url was chosen for backward compatibility, but the target app won’t see browser_fallback_url value as Chrome removes it.</name></li>
</ul>
</blockquote>
<h2 id="0x02-App内处理浏览器发来的Intent"><a href="/1970/01/01/[Android]从浏览器中打开我们的应用/#0x02-App内处理浏览器发来的Intent" class="headerlink" title="0x02 App内处理浏览器发来的Intent"></a>0x02 App内处理浏览器发来的Intent</h2><p>通过上面的介绍，如果我们点击链接，就会触发一个 Intent，有了Intent，我们还需要来处理它。在 <code>AndroidManifest.xml</code> 中相应的 Activity 中的配置中添加如下filter：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:host</span>=<span class="string">"article"</span> <span class="attr">android:pathPattern</span>=<span class="string">"/.*"</span> <span class="attr">android:scheme</span>=<span class="string">"ttdevs"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure>
<p>同时在Activity中处理Intent：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_router);</div><div class="line"></div><div class="line">        handleIntent(getIntent());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        String action = intent.getAction();</div><div class="line">        String data = intent.getDataString();</div><div class="line">        LogUtils.debug(action);</div><div class="line">        LogUtils.debug(data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行上面的代码，同时用系统浏览器打开上面的html，点击链接，即可调起我们的app。或者也可以通过下面的adb命令触发：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">adb shell am start \</div><div class="line">-a android.intent.action.VIEW \</div><div class="line">-c android.intent.category.BROWSABLE \</div><div class="line">-d &quot;ttdevs://article/12345&quot; com.ttdevs.android</div></pre></td></tr></table></figure>
<p>在我的设备（魅族MX4 Pro）上，如果没有安装处理这个 Intent 的App，则会打开系统自带的应用市场。</p>
<p>对于一个提供查询食物数据的App，如果我们分享出去的食物信息带上了相关的参数，在用户点击分享链接时，如果安装了我们的App则可以跳到App中展示食物的界面，如果没有安装，则会跳到应用市场下载，很好的逻辑～～</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Android]从浏览器中打开我们的应用/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ul>
<li><a href="https://developer.chrome.com/multidevice/android/intents" target="_blank" rel="external">https://developer.chrome.com/multidevice/android/intents</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」使用VideoView和MediaController进行视频播放]]></title>
      <url>/1970/01/01/%5BAndroid%5D%E4%BD%BF%E7%94%A8VideoView%E5%92%8CMediaController%E8%BF%9B%E8%A1%8C%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/</url>
      <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20131121171540296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 视频播放的activity&lt;br&gt;</div><div class="line"> * 使用方法：&lt;br&gt;</div><div class="line"> * 1、AndroidManifest.xml中添加此activity&lt;br&gt;</div><div class="line"> * 2、Intent中存入待播放视频的URL，支持本地和网络&lt;br&gt;</div><div class="line"> * 3、启动这个activity&lt;br&gt;</div><div class="line"> * &lt;br&gt;</div><div class="line"> * example：&lt;br&gt;</div><div class="line"> * String url = "play url";&lt;br&gt;</div><div class="line"> * Intent intent = new Intent();&lt;br&gt;</div><div class="line"> * intent.setClass(this, VideoPlayActivity.class);&lt;br&gt;</div><div class="line"> * intent.putExtra(VideoPlayActivity.KEY_URL, url);&lt;br&gt;</div><div class="line"> * startActivity(intent);&lt;br&gt;</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> ttworking</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoPlayActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnPreparedListener</span>, <span class="title">OnErrorListener</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_URL = <span class="string">"view_url"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"VideoPlayActivity"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PLAY_RETURN = <span class="number">2</span> * <span class="number">1000</span>; <span class="comment">// 2 seconds</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PLAY_POSITON = <span class="string">"paly_position"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOAST_ERROR_URL = <span class="string">"Paly url is null, please check parameter:"</span> + KEY_URL;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOAST_ERROR_PLAY = <span class="string">"Paly error, please check url exist!"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIALOG_TITILE = <span class="string">"奋力加载中，请稍后..."</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ProgressDialog progressDialog;</div><div class="line">    <span class="keyword">private</span> MediaController mc;</div><div class="line">    <span class="keyword">private</span> VideoView videoView;</div><div class="line">    <span class="keyword">private</span> LinearLayout llMain;</div><div class="line">    <span class="keyword">private</span> LayoutParams params = <span class="keyword">new</span> LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        url = getIntent().getStringExtra(KEY_URL);</div><div class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span> &amp;&amp; savedInstanceState != <span class="keyword">null</span>) &#123;</div><div class="line">            url = savedInstanceState.getString(KEY_URL);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</div><div class="line">            Toast.makeText(getApplicationContext(), TOAST_ERROR_URL, Toast.LENGTH_LONG).show();</div><div class="line">            finish();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setTheme(android.R.style.Theme_NoTitleBar_Fullscreen);</div><div class="line"></div><div class="line">        videoView = <span class="keyword">new</span> VideoView(<span class="keyword">this</span>);</div><div class="line">        videoView.setVideoURI(Uri.parse(url));</div><div class="line">        videoView.requestFocus();</div><div class="line">        videoView.setOnPreparedListener(<span class="keyword">this</span>);</div><div class="line">        videoView.setOnErrorListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        mc = <span class="keyword">new</span> MediaController(<span class="keyword">this</span>);</div><div class="line">        mc.setAnchorView(videoView);</div><div class="line">        mc.setKeepScreenOn(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        videoView.setMediaController(mc);</div><div class="line"></div><div class="line">        llMain = <span class="keyword">new</span> LinearLayout(<span class="keyword">this</span>);</div><div class="line">        llMain.setGravity(Gravity.CENTER_VERTICAL);</div><div class="line">        llMain.setOrientation(LinearLayout.VERTICAL);</div><div class="line">        llMain.setLayoutParams(params);</div><div class="line"></div><div class="line">        llMain.addView(videoView, params);</div><div class="line">        setContentView(llMain);</div><div class="line"></div><div class="line">        initDialog();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> palyPosition = videoView.getCurrentPosition();</div><div class="line">        <span class="keyword">if</span> (palyPosition &gt; PLAY_RETURN) &#123;</div><div class="line">            palyPosition -= PLAY_RETURN;</div><div class="line">        &#125;</div><div class="line">        outState.putInt(KEY_PLAY_POSITON, palyPosition);</div><div class="line">        outState.putString(KEY_URL, url);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onRestoreInstanceState(savedInstanceState);</div><div class="line"></div><div class="line">        videoView.seekTo(savedInstanceState.getInt(KEY_PLAY_POSITON));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">(MediaPlayer mp)</span> </span>&#123;</div><div class="line">        progressDialog.cancel();</div><div class="line"></div><div class="line">        videoView.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onError</span><span class="params">(MediaPlayer mp, <span class="keyword">int</span> what, <span class="keyword">int</span> extra)</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"onError:"</span> + url);</div><div class="line"></div><div class="line">        Toast.makeText(getApplicationContext(), TOAST_ERROR_PLAY + <span class="string">"\n"</span> + url, Toast.LENGTH_LONG).show();</div><div class="line">        progressDialog.cancel();</div><div class="line">        finish();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDialog</span><span class="params">()</span> </span>&#123;</div><div class="line">        progressDialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</div><div class="line">        progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);</div><div class="line">        progressDialog.setMessage(DIALOG_TITILE);</div><div class="line">        progressDialog.setCancelable(<span class="keyword">false</span>);</div><div class="line">        progressDialog.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」仿联系人列表上的字母索引]]></title>
      <url>/1970/01/01/%5BAndroid%5D%E4%BB%BF%E8%81%94%E7%B3%BB%E4%BA%BA%E5%88%97%E8%A1%A8%E4%B8%8A%E7%9A%84%E5%AD%97%E6%AF%8D%E7%B4%A2%E5%BC%95/</url>
      <content type="html"><![CDATA[<p>这个小功能github有很多。不同的应用需求会有少许差别，比如listview滑动时字母是不是跟随滑动；手动点击字母是不是在屏幕中间显示一个提示；点击时索引的背景显示出来，离开后背景消失等等，当然这些都是细节问题。实现思路上也可以有多种，比如自己去draw每个字母，然后处理滑动、借助TextView来展示字母列表等。看了几个demo，感觉和自己的需求有些差别，而且这些demo为了实现”大而全”有些多余的东西，因此决定自己写个。</p>
<h2 id="0x01-分析"><a href="/1970/01/01/[Android]仿联系人列表上的字母索引/#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>我们的需求是这样的：中文参与索引，字母或者其他开头的item不参与索引，直接放到第一个“#”里；点击字母索引其被点击字母列表颜色跟随变化；手动滑动listview字母索引的字母颜色也跟随变化；自己顺手加了个点击某个字母弹出提示的接口。最后效果如下图：</p>
<p><img src="http://img.blog.csdn.net/20140831140659685?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="Letter Index">  </p>
<h2 id="0x02-实现"><a href="/1970/01/01/[Android]仿联系人列表上的字母索引/#0x02-实现" class="headerlink" title="0x02 实现"></a>0x02 实现</h2><p>决定直接使用垂直方向的LinearLayout嵌套TextView来展示字母列表。思路如下：根据索引高度，大概计算每个字母的高度，然后添加到Linearlayout中；然后处理Linearlayout的touch事件，拿到坐标计算当前应该索引哪个。其中遇到的主要问题是对TextView的把握，比如它的高度如何计算？（真正实现的时候你会发现它有个paddingTop和paddingBottom）其他的比如滑动逻辑这些调试下即可，直接上代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 右侧字母索引。可作为一个独立的view插入自己的布局中&lt;br&gt;</div><div class="line"> * &lt;br&gt;</div><div class="line"> * 描述：&lt;br&gt;</div><div class="line"> * 线型布局中嵌套一个线型布局（目的为了增大可滑动区域的面积，若不考虑此可不使用嵌套）。&lt;br&gt;</div><div class="line"> * 每个字母插入内嵌的线性布局中，根据控件的高度计算每个字母的尺寸。&lt;br&gt;</div><div class="line"> * &lt;br&gt;</div><div class="line"> * 使用：&lt;br&gt;</div><div class="line"> * 将此view插入你的布局文件中，初始化完成之后设置你的ListView和索引用的数据源(需要自己组织排序数据源)即可。&lt;br&gt;</div><div class="line"> * &lt;br&gt;</div><div class="line"> * 数据源的组织：若某项不参与排序则数据源中设置为'0'或其他小于'A'的ASCII字符，内部会将所有字符转换成大写，所以务必在外部做好排序。&lt;br&gt;</div><div class="line"> * &lt;br&gt;</div><div class="line"> * 建议：若你的数据中包括ASCII码为a0、20的字符，建议剔除，如：&lt;br&gt;</div><div class="line"> * str.replace(' ', ' '); // a0-&gt;20 str.replaceAll(" ", "");&lt;br&gt;</div><div class="line"> * &lt;br&gt;</div><div class="line"> * 如果你处理的是中文，可使用libs中的pinyin4j处理</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> ttdevs 2014-07-31</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListViewLetterIndicator</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> <span class="keyword">implements</span> <span class="title">OnScrollListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INDICATOR = <span class="string">"#ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinearLayout llMain;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ListView mListView; <span class="comment">// ListView</span></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; mData; <span class="comment">// 数据源</span></div><div class="line">    <span class="keyword">private</span> TextView tvAlert; <span class="comment">// 显示当前的字母</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mIndex; <span class="comment">// 当前所处的indicator位置</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> scrollable = <span class="keyword">true</span>; <span class="comment">//</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewLetterIndicator</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewLetterIndicator</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line"></div><div class="line">        setOrientation(LinearLayout.VERTICAL);</div><div class="line">        setBackgroundColor(getResources().getColor(R.color.letter_indicator_background));</div><div class="line">        <span class="comment">// setPadding(8, 8, 8, 8);</span></div><div class="line"></div><div class="line">        llMain = <span class="keyword">new</span> LinearLayout(getContext());</div><div class="line">        llMain.setOrientation(LinearLayout.VERTICAL);</div><div class="line">        llMain.setGravity(Gravity.CENTER);</div><div class="line">        <span class="comment">// llMain.setPadding(2, 2, 2, 2);</span></div><div class="line"></div><div class="line">        <span class="keyword">int</span> width = (<span class="keyword">int</span>) getResources().getDimension(R.dimen.letter_indicator_width);</div><div class="line">        addView(llMain, width, LinearLayout.LayoutParams.MATCH_PARENT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置数据源</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> lv   绑定的ListView</div><div class="line">     * <span class="doctag">@param</span> data 排序用的数据源</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(ListView lv, List&lt;String&gt; data)</span> </span>&#123;</div><div class="line">        setData(lv, data, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置数据源</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> lv   绑定的ListView</div><div class="line">     * <span class="doctag">@param</span> data 排序用的数据源</div><div class="line">     * <span class="doctag">@param</span> tv   显示当前所处字母的TextView</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"DefaultLocale"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(ListView lv, List&lt;String&gt; data, TextView tv)</span> </span>&#123;</div><div class="line">        mListView = lv;</div><div class="line">        mData = data;</div><div class="line">        tvAlert = tv;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mData.size(); i++) &#123;</div><div class="line">            String str = mData.get(i);</div><div class="line">            mData.set(i, str.toUpperCase());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mListView.setOnScrollListener(<span class="keyword">this</span>);</div><div class="line">        mIndex = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> childCount = llMain.getChildCount();</div><div class="line">        <span class="keyword">if</span> (childCount == INDICATOR.length()) &#123;</div><div class="line">            <span class="comment">// llMain.invalidate();</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> height = llMain.getHeight();</div><div class="line">        <span class="keyword">int</span> textHeight = (<span class="keyword">int</span>) Math.floor(height / (INDICATOR.length() + <span class="number">6</span>));</div><div class="line"></div><div class="line">        LinearLayout.LayoutParams llpText = <span class="keyword">new</span> LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,</div><div class="line">                LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INDICATOR.length(); i++) &#123;</div><div class="line">            String str = String.valueOf(INDICATOR.charAt(i));</div><div class="line">            TextView tvIndicator = <span class="keyword">new</span> TextView(getContext());</div><div class="line">            tvIndicator.setText(str);</div><div class="line">            tvIndicator.setIncludeFontPadding(<span class="keyword">false</span>);</div><div class="line">            tvIndicator.setTextSize(TypedValue.COMPLEX_UNIT_PX, textHeight);</div><div class="line">            tvIndicator.setTextColor(getResources().getColor(R.color.letter_indicator_text_normal));</div><div class="line">            <span class="comment">// tvIndicator.setPadding(0, -4, 0, -4);</span></div><div class="line">            llMain.addView(tvIndicator, llpText);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"DefaultLocale"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> action = ev.getAction();</div><div class="line">        <span class="keyword">switch</span> (action) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                scrollable = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">float</span> y = ev.getY();</div><div class="line">                <span class="keyword">float</span> childY = <span class="number">0</span>;</div><div class="line">                <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; INDICATOR.length(); i++) &#123;</div><div class="line">                    TextView view = (TextView) llMain.getChildAt(i);</div><div class="line">                    childY = view.getTop();</div><div class="line">                    <span class="keyword">int</span> height = view.getHeight();</div><div class="line">                    <span class="keyword">if</span> (childY &lt; y &amp;&amp; childY + height &gt; y) &#123;</div><div class="line">                        index = i;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    view = <span class="keyword">null</span>; <span class="comment">// not neccessary</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                TextView view = (TextView) llMain.getChildAt(INDICATOR.length() - <span class="number">1</span>);</div><div class="line">                <span class="keyword">if</span> (y &gt; view.getTop()) &#123;</div><div class="line">                    index = INDICATOR.length() - <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                view = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">                changeIndicatorColor(index);</div><div class="line"></div><div class="line">                <span class="keyword">char</span> indexIndicator = INDICATOR.charAt(index);<span class="comment">// A:65, #:23</span></div><div class="line">                <span class="keyword">if</span> (indexIndicator &lt; <span class="string">'A'</span>) &#123;</div><div class="line">                    mListView.setSelection(<span class="number">0</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mData.size(); i++) &#123;</div><div class="line">                        <span class="keyword">if</span> (mData.get(i).charAt(<span class="number">0</span>) &gt;= indexIndicator) &#123;</div><div class="line">                            mListView.setSelection(i);</div><div class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        scrollable = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;, <span class="number">100</span>);</div><div class="line">                showText(<span class="string">""</span>, <span class="keyword">false</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(AbsListView view, <span class="keyword">int</span> scrollState)</span> </span>&#123;</div><div class="line">        <span class="comment">// invalidate();</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"DefaultLocale"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScroll</span><span class="params">(AbsListView view, <span class="keyword">int</span> firstVisibleItem, <span class="keyword">int</span> visibleItemCount, <span class="keyword">int</span> totalItemCount)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (!scrollable || <span class="keyword">null</span> == mData || mData.size() == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != mData) &#123;</div><div class="line">                String str = mData.get(firstVisibleItem);</div><div class="line">                <span class="keyword">char</span> indicator = str.charAt(<span class="number">0</span>);</div><div class="line">                <span class="keyword">if</span> (indicator &lt; <span class="string">'A'</span>) &#123;</div><div class="line">                    changeIndicatorColor(<span class="number">0</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; INDICATOR.length(); i++) &#123;</div><div class="line">                    <span class="keyword">if</span> (INDICATOR.charAt(i) == indicator) &#123;</div><div class="line">                        changeIndicatorColor(i);</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeIndicatorColor</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mIndex != <span class="number">0</span> &amp;&amp; mIndex == index) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        TextView tv = (TextView) llMain.getChildAt(mIndex);</div><div class="line">        tv.setTextColor(getResources().getColor(R.color.letter_indicator_text_normal));</div><div class="line"></div><div class="line">        tv = (TextView) llMain.getChildAt(index);</div><div class="line">        tv.setTextColor(getResources().getColor(R.color.letter_indicator_text_select));</div><div class="line"></div><div class="line">        mIndex = index;</div><div class="line"></div><div class="line">        showText(String.valueOf(INDICATOR.charAt(mIndex)), <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showText</span><span class="params">(String text, <span class="keyword">boolean</span> isShow)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != tvAlert) &#123;</div><div class="line">            tvAlert.setText(text);</div><div class="line">            tvAlert.setVisibility(isShow ? View.VISIBLE : View.INVISIBLE);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// private Drawable initBackground() &#123;</span></div><div class="line">    <span class="comment">// float[] roundRect = new float[] &#123; 12, 12, 12, 12, 12, 12, 12, 12 &#125;;</span></div><div class="line">    <span class="comment">// RoundRectShape reoundRechShape = new RoundRectShape(roundRect, null,</span></div><div class="line">    <span class="comment">// null);</span></div><div class="line">    <span class="comment">// ShapeDrawable drawable = new ShapeDrawable(reoundRechShape);</span></div><div class="line">    <span class="comment">// drawable.getPaint().setColor(Color.parseColor(GRAY_AA));</span></div><div class="line">    <span class="comment">// // drawable.getPaint().setStyle(Paint.Style.FILL);</span></div><div class="line">    <span class="comment">// return drawable;</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试过程中发现，有些item明明是汉字开头的（这个时候你可能还需要个汉字转拼音的工具包），却出现在“#”里，仔细检查，你会发现，那个并不是空格，细节请看代码注释。 由于很简单，不做详细介绍，仅仅做个记录，有问题可以留言一起讨论。</p>
<h2 id="0x04-Demo"><a href="/1970/01/01/[Android]仿联系人列表上的字母索引/#0x04-Demo" class="headerlink" title="0x04 Demo"></a>0x04 Demo</h2><p>最后附个测试demo： <a href="http://download.csdn.net/detail/ttdevs/7846559" target="_blank" rel="external">下载</a></p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」内存泄漏相关内容总结(上)]]></title>
      <url>/1970/01/01/%5BAndroid%5D%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93(%E4%B8%8A)/</url>
      <content type="html"><![CDATA[<h2 id="0x00-忏悔"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0x00-忏悔" class="headerlink" title="0x00 忏悔"></a>0x00 忏悔</h2><p>好久没有认真的写博客了，草稿箱中静静躺着好几篇，但总是不能把他们写完，一直没有写的心情把，罪过…</p>
<p>废话一句说完，进入今天的正题：内存泄露的相关知识。</p>
<h2 id="0x01-内存问题"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0x01-内存问题" class="headerlink" title="0x01 内存问题"></a>0x01 内存问题</h2><p>很多时候我们是需要查看自己的应用内存占用情况，比如当出现闪退，异常退出时：</p>
<ul>
<li><p>界面内存占用：比如我们的启动画面，如果出现OOM的问题，这个时候可以通过差看内存情况，如果确是内存占用比较大就可以考虑做相应优化</p>
</li>
<li><p>内存泄漏的初步查找：这个和直接的OOM有些差别，虽然他最终也会导致OOM。方法：反复打开、关闭可能内存泄漏的界面，如果每次打开关闭之后内存都有所增加，就可以初步判断为内存泄漏。正常情况应用是进入界面内存占用有所增加，但是离开后内存会降到之前的水平。</p>
</li>
</ul>
<h2 id="0x02-内存泄漏与内存溢出-OOM-的区别与联系"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0x02-内存泄漏与内存溢出-OOM-的区别与联系" class="headerlink" title="0x02 内存泄漏与内存溢出(OOM)的区别与联系"></a>0x02 内存泄漏与内存溢出(OOM)的区别与联系</h2><p>内存溢出做android开发的各位应该是比较熟悉，图片加载稍微不小心就会导致out of memory的错误，这个错误出现的原因就是我们的应用去申请内存时系统无法再分配导致的。所以我们需要有节制的使用内存。</p>
<p>和C++相比，java的一个很大特点就是有GC，我们不需要去专注内存的释放与回收。但是，这也不是绝对的：当我们的代码出现问题导致GC无法及时的回收相关的内存时就会导致内存泄漏。这句不算太规范的描述（语文太差，见谅）他的重点是什么呢——GC无法及时的回收相关内存——这将导致我们的内存占用越来越多——最终的体现就是OOM。</p>
<p>希望这个简单的描述，各位可以理解什么是memory leak和OOM。</p>
<h2 id="0x03-DDMS-给我们的提示"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0x03-DDMS-给我们的提示" class="headerlink" title="0x03 DDMS 给我们的提示"></a>0x03 DDMS 给我们的提示</h2><ul>
<li>logcat中的信息</li>
</ul>
<p>关于内存的信息，logcat会给我们一些提示信息，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D/dalvikvm( 9050): GC_CONCURRENT freed 2049K, 65% free 3571K/9991K, external 4703K/5261K, paused 2ms+2ms</div></pre></td></tr></table></figure>
<p>这行信息怎么理解？它包含哪些信息呢？通过 <a href="https://developer.android.com/tools/debugging/debugging-memory.html#LogMessages" target="_blank" rel="external">DDMS的文档</a> 我们可以得知这个信息的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D/dalvikvm(dvm pid): &lt;GC_Reason&gt; &lt;Amount_freed&gt;, &lt;Heap_stats&gt;, &lt;External_memory_stats&gt;, &lt;Pause_time&gt;</div></pre></td></tr></table></figure>
<p>这行信息我们主要关注的是：GC_Reason，他主要有下面几种：</p>
<pre><code>GC_CONCURRENT()

A concurrent garbage collection that frees up memory as your heap begins to
fill up.

GC_FOR_MALLOC(当我们的应用申请内存时触发)

A garbage collection caused because your app attempted to allocate memory when
your heap was already full, so the system had to stop your app and reclaim
memory.

GC_HPROF_DUMP_HEAP()

A garbage collection that occurs when you create an HPROF file to analyze your
heap.

GC_EXPLICIT(当我们手动点击DDMS&gt;heap&gt;Cause GC按钮时会触发)

An explicit garbage collection, such as when you call gc() (which you should
avoid calling and instead trust the garbage collector to run when needed).

GC_EXTERNAL_ALLOC()

This happens only on API level 10 and lower (newer versions allocate everything in the Dalvik heap). A garbage collection for externally allocated memory (such as the pixel data stored in native memory or NIO byte buffers).
</code></pre><p>当我们在app在出现问题时可以根据这些信息做初步判断。比如频繁出现GC_FOR_AMLLOC则预示着我们一直在申请内存。  </p>
<ul>
<li>heap页签的内存信息</li>
</ul>
<p>通过这个工具这个我们可以更详细的看到内存的分配与使用。启动方法：</p>
<p><code>点击DDMS中我们的进程</code> &gt; <code>上部的Update heap按钮</code> &gt; <code>Cause GC</code> 即可，如下图：</p>
<p><img src="http://img.blog.csdn.net/20141214202523491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h2 id="0x04-通过内存快照更精准的查找内存信息"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0x04-通过内存快照更精准的查找内存信息" class="headerlink" title="0x04 通过内存快照更精准的查找内存信息"></a>0x04 通过内存快照更精准的查找内存信息</h2><p>当我们出现内存泄漏问题是，初学者可能会一头雾水，不知道如何解决，从何下手。这个时候我们就可以考虑使用mat对我们的内存进行详细的分析，找到内存泄漏点，做相应的处理。</p>
<ul>
<li><code>Shallow size</code> 和 <code>Retained Size</code></li>
</ul>
<p>在进行内存分析之前我们需要首先了解这两个概念。</p>
<ul>
<li>Shallow size</li>
</ul>
<p>Shallow size就是对象本身占用内存的大小，不包含其引用的对象。常规对象（非数组）的Shallow size有其成员变量的数量和类型决定。数组的shallow size有数组元素的类型（对象类型、基本类型）和数组长度决定。Shallow size of a set of objects represents the sum of shallow sizes of all objects in the set.在32位系统上，对象头占用8字节，int占用4字节，不管成员变量（对象或数组）是否引用了其他对象（实例）或者赋值为null它始终占用4字节。故此，对于String对象实例来说，它有三个int成员（3<em>4=12字节）、一个char[]成员（1</em>4=4字节）以及一个对象头（8字节），总共3<em>4+1</em>4+8=24字节。根据这一原则，对String a=”rosen jiang”来说，实例a的shallow size也是24字节。</p>
<ul>
<li>Retained Size</li>
</ul>
<p>Retained Size=当前对象大小+当前对象可直接或间接引用到的对象的大小总和(间接引用的含义：A-&gt;B-&gt;C, C就是间接引用)。换句话说，Retained Size 就是当前对象被GC后，从Heap上总共能释放掉的内存。<br>不过，释放的时候还要排除被GC Roots直接或间接引用的对象。他们暂时不会被被当做Garbage。为了更好的理解retained size，不妨看个例子。把内存中的对象看成下图中的节点，并且对象和对象之间互相引用。这里有一个特殊的节点GC Roots，这就是reference chain的起点。</p>
<p><img src="http://img.blog.csdn.net/20141214203439460?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<p><img src="http://img.blog.csdn.net/20141214203446937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<p>从obj1入手，上图中蓝色节点代表仅仅只有通过obj1才能直接或间接访问的对象。因为可以通过GC Roots访问，所以左图的obj3不是蓝色节点；而在右图却是蓝色，因为它已经被包含在retained集合内。</p>
<p>所以对于左图，obj1的retained size是obj1、obj2、obj4的shallow size总和；右图的retained size是obj1、obj2、obj3、obj4的shallow size总和。</p>
<p>对于obj2，它的retained size是：在左图中，是obj2和obj4的shallow size的和；在右图中，是obj2、obj3和obj4的shallow size的和。</p>
<p>总之，retained size是一个整体度量，有助于理解内存结构和对象图中的依赖关系并找到根节点。</p>
<ul>
<li>HPROF file——内存快照文件</li>
</ul>
<p>首先这个文件可以通过点击 DDMS 中 Update heap 右侧的 Dump HPROF file 得到（这个有时候可能会比较慢，特别是内存占用高的时候，需要等一会，出现hprof: dumping heap strings to “[DDMS]”.即代表已经触发）。</p>
<p>得到这个文件之后，我们还需要使用SDK的platform-tools文件夹下的“hprof-conv”工具进行转换，然后就可以使用内存分析工具查看了。转换方法：</p>
<p><code>hprof-conv heap-original.hprof heap-converted.hprof</code></p>
<h2 id="0x05-内存分析工具MAT"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0x05-内存分析工具MAT" class="headerlink" title="0x05 内存分析工具MAT"></a>0x05 内存分析工具MAT</h2><p>这个是专门做内存分析的工具。通过它我们可以打开刚才转换后的到hprof文件，进行内存分析。每次都点击保存，转换，然后打开还是比较麻烦的。这个时候我们可以考虑<br>使用eclipse的mat插件。</p>
<p>这篇就先写到这里。下一篇简单介绍如何通过MAT查找内存泄漏的问题。  </p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Android]内存泄漏相关内容总结(上)/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://developer.android.com/tools/debugging/debugging-memory.html" target="_blank" rel="external">https://developer.android.com/tools/debugging/debugging-memory.html</a></li>
<li><a href="http://blog.csdn.net/kingzone_2008/article/details/9083327" target="_blank" rel="external">http://blog.csdn.net/kingzone_2008/article/details/9083327</a></li>
<li><a href="http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.mat.ui.help%2Fconcepts%2Fshallowretainedheap.html&amp;resultof=%22Shallow%22%20%22shallow%22%20%22size%22%20" target="_blank" rel="external">http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.mat.ui.help%2Fconcepts%2Fshallowretainedheap.html&amp;resultof=%22Shallow%22%20%22shallow%22%20%22size%22%20</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」用support annotation替代enum]]></title>
      <url>/1970/01/01/%5BAndroid%5D%E7%94%A8support%20annotation%E6%9B%BF%E4%BB%A3enum/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Allocation.MipmapControl,<br>Authenticator.RequestorType,<br>AvoidXfermode.Mode,<br>Bitmap.CompressFormat,<br>Bitmap.Config, BlurMaskFilter.Blur,<br>Canvas.EdgeType,<br>Canvas.VertexMode,<br>ClientInfoStatus,<br>ConsoleMessage.MessageLevel,<br>CursorJoiner.Result,<br>and 48 others.</p>
</blockquote>
<p>简单看了下，Android还是有好多地方使用了。那为什么还不建议使用呢？查了一番，看到google官方有一段关于enum使用的<a href="/1970/01/01/[Android]用support annotation替代enum/1">介绍</a>。既然使用不当可能会导致性能问题，那我们怎么办呢？</p>
<p>这里介绍下Support包中的annotation，使用 <code>@IntDef</code> 和 <code>@StringDef</code> 来达到我们枚举的效果。由于<code>@IntDef</code> 的介绍比较多，这里给个<code>@StringDef</code> 的Demo：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClient</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ONE = <span class="string">"one"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String RECORD = <span class="string">"record"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STATUS = <span class="string">"status"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@StringDef</span>(&#123;ONE, RECORD, STATUS&#125;)</div><div class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Client &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mClient;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClient</span><span class="params">(@Client String client)</span> </span>&#123;</div><div class="line">        mClient = client;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，在外面创建MyClient对象的时候，构造方法中传入的参数就必须为 <code>ONE, RECORD, STATUS</code> 其中之一，从而达到类似enum的效果。</p>
<h2 id="参考"><a href="/1970/01/01/[Android]用support annotation替代enum/#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://noobcoderblog.wordpress.com/2015/04/12/java-enum-and-android-intdefstringdef-annotation/" target="_blank" rel="external">https://noobcoderblog.wordpress.com/2015/04/12/java-enum-and-android-intdefstringdef-annotation/</a></li>
<li><a href="https://www.youtube.com/watch?v=Hzs6OBcvNQE" target="_blank" rel="external">The price of ENUMs</a></li>
<li><a href="http://tools.android.com/tech-docs/support-annotations" target="_blank" rel="external">http://tools.android.com/tech-docs/support-annotations</a></li>
<li><a href="http://developer.android.com/reference/java/lang/Enum.html" target="_blank" rel="external">http://developer.android.com/reference/java/lang/Enum.html</a></li>
<li><a href="http://stackoverflow.com/questions/29183904/should-i-strictly-avoid-using-enums-on-android" target="_blank" rel="external">http://stackoverflow.com/questions/29183904/should-i-strictly-avoid-using-enums-on-android</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」各种小记录]]></title>
      <url>/1970/01/01/%5BAndroid%5D%E5%90%84%E7%A7%8D%E5%B0%8F%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="0x00-小记录"><a href="/1970/01/01/[Android]各种小记录/#0x00-小记录" class="headerlink" title="0x00 小记录"></a>0x00 小记录</h2><p>这里是一些零碎知识点</p>
<h2 id="0x01-sqlite中处理单引号"><a href="/1970/01/01/[Android]各种小记录/#0x01-sqlite中处理单引号" class="headerlink" title="0x01 sqlite中处理单引号"></a>0x01 sqlite中处理单引号</h2><p>所有单引号换成双单引号，如：</p>
<p><code>content.replace(&quot;&#39;&quot;, &quot;&#39;&#39;&quot;);</code></p>
<p>这样是不行的，临时抱佛脚，换成了带”？”的通配形式</p>
<h2 id="0x02-SimpleCursorAdapter-notifyDataSetChanged无效"><a href="/1970/01/01/[Android]各种小记录/#0x02-SimpleCursorAdapter-notifyDataSetChanged无效" class="headerlink" title="0x02 SimpleCursorAdapter.notifyDataSetChanged无效"></a>0x02 SimpleCursorAdapter.notifyDataSetChanged无效</h2><p>可以使用SimpleCursorAdapter的changeCursor方法：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/1985955/android-simplecursoradapter-not-updating-with-database-changes" target="_blank" rel="external">http://stackoverflow.com/questions/1985955/android-simplecursoradapter-not-updating-with-database-changes</a></li>
<li><a href="http://stackoverflow.com/questions/14034770/using-notifydatasetchanged-on-simplecursoradapter-does-not-work" target="_blank" rel="external">http://stackoverflow.com/questions/14034770/using-notifydatasetchanged-on-simplecursoradapter-does-not-work</a>  </li>
</ul>
<h2 id="0x03-listview隐藏分割线"><a href="/1970/01/01/[Android]各种小记录/#0x03-listview隐藏分割线" class="headerlink" title="0x03 listview隐藏分割线"></a>0x03 listview隐藏分割线</h2><ul>
<li><code>setDriver(null)</code> </li>
<li>在xml文件中属性设置为 <code>@null</code></li>
</ul>
<h2 id="0x04-sqlite中replace-into无效"><a href="/1970/01/01/[Android]各种小记录/#0x04-sqlite中replace-into无效" class="headerlink" title="0x04 sqlite中replace into无效"></a>0x04 sqlite中replace into无效</h2><p>之前写好的代码调试都通过了，今天突然发现不能运行了：</p>
<blockquote>
<p>sqlite，表中创建唯一索引，然后使用replace into实现插入或者更新，结果变成了只插入</p>
</blockquote>
<p>折腾了几个小时，最后改掉了表中一个名为id的字段，实在是无语</p>
<h2 id="0x05-临时写java的Thread封装"><a href="/1970/01/01/[Android]各种小记录/#0x05-临时写java的Thread封装" class="headerlink" title="0x05 临时写java的Thread封装"></a>0x05 临时写java的Thread封装</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line">public abstract class BaseThread extends Thread &#123;</div><div class="line"></div><div class="line">    private volatile boolean mQuit = false;</div><div class="line"></div><div class="line">    public BaseThread() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * prepare if needed</div><div class="line">     */</div><div class="line">    public boolean prepare() &#123;</div><div class="line"></div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * run body</div><div class="line">     */</div><div class="line">    public abstract void execute() throws Exception; // third modify,second modify maybe not neccessary</div><div class="line"></div><div class="line">    /**</div><div class="line">     * recycle if needed</div><div class="line">     */</div><div class="line">    public void recycle() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * stop thread</div><div class="line">     */</div><div class="line">    public final void quit() &#123;</div><div class="line">        mQuit = true;</div><div class="line">        interrupt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        // TODO</div><div class="line">        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">        if (!prepare()) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        while (true) &#123;</div><div class="line">            if (mQuit) &#123; // second modify</div><div class="line">                recycle();</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            try &#123;</div><div class="line">                execute();</div><div class="line">            &#125; catch (Exception e) &#123;// &#125; catch (InterruptedException e) &#123;</div><div class="line">                if (mQuit) &#123;</div><div class="line">                    recycle();</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">```  </div><div class="line"></div><div class="line"></div><div class="line">## 0x06 Volley中设置连接超时</div><div class="line"></div><div class="line">设置超时的地方：</div><div class="line"></div><div class="line">HurlStack：</div><div class="line"></div><div class="line">``` java</div><div class="line">/**</div><div class="line">* Opens an &#123;@link HttpURLConnection&#125; with parameters.</div><div class="line">*</div><div class="line">* @param url</div><div class="line">* @return an open connection</div><div class="line">* @throws IOException</div><div class="line">*/</div><div class="line">private HttpURLConnection openConnection(URL url, Request&lt;?&gt; request) throws IOException &#123;</div><div class="line">   HttpURLConnection connection = createConnection(url);</div><div class="line"></div><div class="line">   int timeoutMs = request.getTimeoutMs();</div><div class="line">   connection.setConnectTimeout(timeoutMs);</div><div class="line">   connection.setReadTimeout(timeoutMs);</div><div class="line">   connection.setUseCaches(false);</div><div class="line">   connection.setDoInput(true);</div><div class="line"></div><div class="line">   // use caller-provided custom SslSocketFactory, if any, for HTTPS</div><div class="line">   if ("https".equals(url.getProtocol()) &amp;&amp; mSslSocketFactory != null) &#123;</div><div class="line">       ((HttpsURLConnection) connection).setSSLSocketFactory(mSslSocketFactory);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   return connection;</div><div class="line">&#125;</div><div class="line">```    </div><div class="line"></div><div class="line">HttpClientStack：  </div><div class="line"></div><div class="line">``` java</div><div class="line">@Override</div><div class="line">public HttpResponse performRequest(Request&lt;?&gt; request, Map&lt;String, String&gt; additionalHeaders)</div><div class="line">        throws IOException, AuthFailureError &#123;</div><div class="line">    HttpUriRequest httpRequest = createHttpRequest(request, additionalHeaders);</div><div class="line">    addHeaders(httpRequest, additionalHeaders);</div><div class="line">    addHeaders(httpRequest, request.getHeaders());</div><div class="line">    onPrepareRequest(httpRequest);</div><div class="line">    HttpParams httpParams = httpRequest.getParams();</div><div class="line">    int timeoutMs = request.getTimeoutMs();</div><div class="line">    // TODO: Reevaluate this connection timeout based on more wide-scale</div><div class="line">    // data collection and possibly different for wifi vs. 3G.</div><div class="line">    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);</div><div class="line">    HttpConnectionParams.setSoTimeout(httpParams, timeoutMs);</div><div class="line">    return mClient.execute(httpRequest);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Request中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Sets the retry policy for this request.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRetryPolicy</span><span class="params">(RetryPolicy retryPolicy)</span> </span>&#123;</div><div class="line">   mRetryPolicy = retryPolicy;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RetryPolicy ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Retry policy for a request.</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RetryPolicy</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Returns the current timeout (used for logging).</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentTimeout</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Returns the current retry count (used for logging).</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentRetryCount</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Prepares for the next retry by applying a backoff to the timeout.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> error The error code of the last attempt.</div><div class="line">    * <span class="doctag">@throws</span> VolleyError In the event that the retry could not be performed (for example if we</div><div class="line">    *                     ran out of attempts), the passed in error is thrown.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">retry</span><span class="params">(VolleyError error)</span> <span class="keyword">throws</span> VolleyError</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x07-Android与图片相关"><a href="/1970/01/01/[Android]各种小记录/#0x07-Android与图片相关" class="headerlink" title="0x07 Android与图片相关"></a>0x07 Android与图片相关</h2><p><a href="http://developer.android.com/training/displaying-bitmaps/index.html" target="_blank" rel="external">http://developer.android.com/training/displaying-bitmaps/index.html</a>  </p>
<h2 id="0x08-将eclipse项目中的文件夹移除SVN的控制（添加到svn-ignore）"><a href="/1970/01/01/[Android]各种小记录/#0x08-将eclipse项目中的文件夹移除SVN的控制（添加到svn-ignore）" class="headerlink" title="0x08 将eclipse项目中的文件夹移除SVN的控制（添加到svn:ignore）"></a>0x08 将eclipse项目中的文件夹移除SVN的控制（添加到svn:ignore）</h2><p>以删除android项目中的bin文件夹为例</p>
<p>a、关闭项目的自动build：project-Build Automatically<br>b、删除bin文件夹<br>c、提交<br>d、打开 项目的自动build，这个时候会生成bin文件夹<br>e、将bin添加到svn:ignore：右键-Team-添加至svn:ignore<br>f、提交</p>
<h2 id="0x09-屏幕旋转，Activity的成员变量被全部释放？！"><a href="/1970/01/01/[Android]各种小记录/#0x09-屏幕旋转，Activity的成员变量被全部释放？！" class="headerlink" title="0x09 屏幕旋转，Activity的成员变量被全部释放？！"></a>0x09 屏幕旋转，Activity的成员变量被全部释放？！</h2><p>貌似是这样子的</p>
<h2 id="0x10-ViewPager频繁被回收"><a href="/1970/01/01/[Android]各种小记录/#0x10-ViewPager频繁被回收" class="headerlink" title="0x10 ViewPager频繁被回收"></a>0x10 ViewPager频繁被回收</h2><p><a href="http://developer.android.com/reference/android/support/v4/view/ViewPager.html#setOffscreenPageLimit\(int\" target="_blank" rel="external">ViewPager</a>)  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Set the number of pages that should be retained to either side of the</div><div class="line">* current page in the view hierarchy in an idle state. Pages beyond this</div><div class="line">* limit will be recreated from the adapter when needed.</div><div class="line">*</div><div class="line">* &lt;p&gt;This is offered as an optimization. If you know in advance the number</div><div class="line">* of pages you will need to support or have lazy-loading mechanisms in place</div><div class="line">* on your pages, tweaking this setting can have benefits in perceived smoothness</div><div class="line">* of paging animations and interaction. If you have a small number of pages (3-4)</div><div class="line">* that you can keep active all at once, less time will be spent in layout for</div><div class="line">* newly created view subtrees as the user pages back and forth.&lt;/p&gt;</div><div class="line">*</div><div class="line">* &lt;p&gt;You should keep this limit low, especially if your pages have complex layouts.</div><div class="line">* This setting defaults to 1.&lt;/p&gt;</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> limit How many pages will be kept offscreen in an idle state.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOffscreenPageLimit</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (limit &lt; DEFAULT_OFFSCREEN_PAGES) &#123;</div><div class="line">       Log.w(TAG, <span class="string">"Requested offscreen page limit "</span> + limit + <span class="string">" too small; defaulting to "</span></div><div class="line">               + DEFAULT_OFFSCREEN_PAGES);</div><div class="line">       limit = DEFAULT_OFFSCREEN_PAGES;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (limit != mOffscreenPageLimit) &#123;</div><div class="line">       mOffscreenPageLimit = limit;</div><div class="line">       populate();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x11-Android-SQLite-分页查询，参数为页大小和起始编号"><a href="/1970/01/01/[Android]各种小记录/#0x11-Android-SQLite-分页查询，参数为页大小和起始编号" class="headerlink" title="0x11 Android SQLite 分页查询，参数为页大小和起始编号"></a>0x11 Android SQLite 分页查询，参数为页大小和起始编号</h2><p>先看数据：</p>
<p><img src="http://img.blog.csdn.net/20131126171733656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<p>查询第0条之后的5条：<br><code>select * from china_city where province = &#39;北京&#39; order by code limit 5 offset 0</code></p>
<p><img src="http://img.blog.csdn.net/20131126171744390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<p>查询第5条之后的5条：<br><code>select * from china_city where province = &#39;北京&#39; order by code limit 5 offset 5</code></p>
<p><img src="http://img.blog.csdn.net/20131126171750843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<h2 id="0x12-获取进程内存-和-已使用内存"><a href="/1970/01/01/[Android]各种小记录/#0x12-获取进程内存-和-已使用内存" class="headerlink" title="0x12 获取进程内存 和 已使用内存"></a>0x12 获取进程内存 和 已使用内存</h2><ul>
<li>进程内存</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> memClass = ((ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass();</div><div class="line"></div><div class="line"><span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().maxMemory() / <span class="number">1024</span>);</div></pre></td></tr></table></figure>
<ul>
<li><p>已使用内存</p>
<p>  <code>Log.i(&quot;tag&quot;, where+&quot;usedMemory: &quot;+Debug.getNativeHeapSize()/ 1048576L);</code></p>
</li>
</ul>
<h2 id="0x13-与联系人相关"><a href="/1970/01/01/[Android]各种小记录/#0x13-与联系人相关" class="headerlink" title="0x13 与联系人相关"></a>0x13 与联系人相关</h2><p><a href="http://developer.android.com/training/contacts-provider/display-contact-badge.html" target="_blank" rel="external">http://developer.android.com/training/contacts-provider/display-contact-badge.html </a>  </p>
<h2 id="0x14-设置字体大小"><a href="/1970/01/01/[Android]各种小记录/#0x14-设置字体大小" class="headerlink" title="0x14 设置字体大小"></a>0x14 设置字体大小</h2><p>可以用setTextSize()的另外一种形式，可以指定单位：<br><code>setTextSize(int unit, int size)</code></p>
<ul>
<li>TypedValue.COMPLEX_UNIT_PX: Pixels</li>
<li>TypedValue.COMPLEX_UNIT_SP: Scaled Pixels</li>
<li>TypedValue.COMPLEX_UNIT_DIP: Device Independent Pixels</li>
</ul>
<h2 id="0x15-交换两个变量的值"><a href="/1970/01/01/[Android]各种小记录/#0x15-交换两个变量的值" class="headerlink" title="0x15 交换两个变量的值"></a>0x15 交换两个变量的值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">date3 = date1;</div><div class="line">date1 = date2;</div><div class="line">date2 = date3;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (date2 &gt; date1) &#123;</div><div class="line">    date2 = date2 + date1;</div><div class="line">    date1 = date2 - date1;</div><div class="line">    date2 = date2 - date1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">date2 = date1 ^ date2;</div><div class="line">date1 = date1 ^ date2;</div><div class="line">date2 = date1 ^ date2;</div></pre></td></tr></table></figure>
<h2 id="0x16-获取URI真实的地址"><a href="/1970/01/01/[Android]各种小记录/#0x16-获取URI真实的地址" class="headerlink" title="0x16 获取URI真实的地址"></a>0x16 获取URI真实的地址</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">private String getRealPath(Uri uri) &#123;</div><div class="line">   String path = "";</div><div class="line">   String[] proj = &#123;MediaStore.Images.Media.DATA&#125;;</div><div class="line">   Cursor cursor = getActivity().getContentResolver().query(uri, proj, null, null, null);</div><div class="line">   if (cursor != null &amp;&amp; cursor.moveToFirst()) &#123;</div><div class="line">       path = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA));</div><div class="line">   &#125;</div><div class="line">   return path;</div><div class="line">&#125;</div><div class="line">```  </div><div class="line"></div><div class="line"></div><div class="line">## 0x17 自定义Gridview，解决ScrollView中嵌套Gridview显示不正常的问题</div><div class="line"></div><div class="line">网上到处都可以找到下面的解决办法，但是这样会有一个问题：当图片非常多的时候是一次加载完毕的，而我们希望的应该是本来的GridView可以通过滑动判断当前显示</div><div class="line">条目的情况，在此记录一下。</div><div class="line"></div><div class="line">``` java</div><div class="line">/**</div><div class="line">* 自定义Gridview，解决ScrollView中嵌套Gridview显示不正常的问题&lt;br&gt;</div><div class="line">* 但是，这又产生了一个新的问题：所有的item都是一次加载完毕的，再想滑动加载就不行了</div><div class="line">*</div><div class="line">* @author ttdevs</div><div class="line">*/</div><div class="line">public class ImageGridView extends GridView &#123;</div><div class="line">   public ImageGridView(Context context) &#123;</div><div class="line">       this(context, null);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public ImageGridView(Context context, AttributeSet attrs) &#123;</div><div class="line">       this(context, attrs, 0);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public ImageGridView(Context context, AttributeSet attrs, int defStyle) &#123;</div><div class="line">       super(context, attrs, defStyle);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   @Override</div><div class="line">   public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">       //super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">       int expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; 2, MeasureSpec.AT_MOST);</div><div class="line">       super.onMeasure(widthMeasureSpec, expandSpec);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x18-9图片的制作"><a href="/1970/01/01/[Android]各种小记录/#0x18-9图片的制作" class="headerlink" title="0x18 .9图片的制作"></a>0x18 .9图片的制作</h2><p>一个图片只想横向拉伸。所以就想当然的只在左边画了一条横线，运行的时候怎么都是有黑线，没拉伸。</p>
<p><code>最后解决：给左边也加一条竖线！</code></p>
<h2 id="0x20-listview点击背景不变"><a href="/1970/01/01/[Android]各种小记录/#0x20-listview点击背景不变" class="headerlink" title="0x20 listview点击背景不变"></a>0x20 listview点击背景不变</h2><p>这个应该还是焦点的问题，在item的view最上层布局中添加一个属性：</p>
<p><code>android:descendantFocusability=&quot;blocksDescendants&quot;</code></p>
<h2 id="0x21-Volley-Cookies"><a href="/1970/01/01/[Android]各种小记录/#0x21-Volley-Cookies" class="headerlink" title="0x21 Volley Cookies"></a>0x21 Volley Cookies</h2><p><a href="http://stackoverflow.com/questions/16680701/using-cookies-with-android-volley-library" target="_blank" rel="external">http://stackoverflow.com/questions/16680701/using-cookies-with-android-volley-library</a></p>
<h2 id="0x22-EditText设置readOnly"><a href="/1970/01/01/[Android]各种小记录/#0x22-EditText设置readOnly" class="headerlink" title="0x22 EditText设置readOnly"></a>0x22 EditText设置readOnly</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">et.setCursorVisible(<span class="keyword">false</span>); </div><div class="line">et.setFocusable(<span class="keyword">false</span>); </div><div class="line">et.setFocusableInTouchMode(<span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<h2 id="0x23-保存对象到SharedPreferences"><a href="/1970/01/01/[Android]各种小记录/#0x23-保存对象到SharedPreferences" class="headerlink" title="0x23 保存对象到SharedPreferences"></a>0x23 保存对象到SharedPreferences</h2><p>想保存一个List<javabean> 到SharedPreferences。网上找了一圈有一种说法利用set，或者base64，都感觉不好。朋友一句提示：json。然后豁然开朗。现转化成json，然后保存，效果不错。</javabean></p>
<h2 id="0x24-获取字符"><a href="/1970/01/01/[Android]各种小记录/#0x24-获取字符" class="headerlink" title="0x24 获取字符"></a>0x24 获取字符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCharacter</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</div><div class="line">        <span class="keyword">if</span> (String.valueOf(str.charAt(i)).getBytes().length &gt; <span class="number">1</span>) &#123;</div><div class="line">            sb.append(str.charAt(i));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sb.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x25-Android-4-按钮样式"><a href="/1970/01/01/[Android]各种小记录/#0x25-Android-4-按钮样式" class="headerlink" title="0x25 Android 4 按钮样式"></a>0x25 Android 4 按钮样式</h2><p><code>style=&quot;?android:attr/buttonBarButtonStyle&quot;</code></p>
<h2 id="0x26-几个sqlite的sql语句"><a href="/1970/01/01/[Android]各种小记录/#0x26-几个sqlite的sql语句" class="headerlink" title="0x26 几个sqlite的sql语句"></a>0x26 几个sqlite的sql语句</h2><ul>
<li>select count(*) from notes</li>
<li>create table notes_new as select * from notes;</li>
<li>select count(*) from notes_new</li>
<li>delete from notes_new where word like ‘% %’;</li>
<li>delete from notes_new where word like ‘%-%’;</li>
<li>delete from notes_new where phonetic like ‘’;</li>
<li>create table notes_new_new as select * from notes_new;</li>
<li>select count(*) from notes_new_new</li>
<li>delete from notes_new_new where _id not in (select min(_id) from notes_new_new group by word)</li>
<li>select * from notes_new_new</li>
<li>insert into notes_word(word,detail,created,phonetic) select word,detail,created,phonetic from notes_new_new;</li>
<li><p>Create Table:</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> notes_word(</div><div class="line">        _id <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT,</div><div class="line">        word <span class="built_in">TEXT</span>,</div><div class="line">        detail <span class="built_in">TEXT</span>,</div><div class="line">        created <span class="built_in">INT</span>,</div><div class="line">        phonetic <span class="built_in">TEXT</span></div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="0x27-加密相关"><a href="/1970/01/01/[Android]各种小记录/#0x27-加密相关" class="headerlink" title="0x27 加密相关"></a>0x27 加密相关</h2><ul>
<li><a href="http://blog.csdn.net/androidsecurity/article/details/8666954" target="_blank" rel="external">http://blog.csdn.net/androidsecurity/article/details/8666954</a>  </li>
<li><a href="http://blog.csdn.net/baolong47/article/details/17335227" target="_blank" rel="external">http://blog.csdn.net/baolong47/article/details/17335227</a>  </li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/11952409" target="_blank" rel="external">http://blog.csdn.net/guolin_blog/article/details/11952409</a>  </li>
</ul>
<h2 id="0x28-FaceBook开源项目"><a href="/1970/01/01/[Android]各种小记录/#0x28-FaceBook开源项目" class="headerlink" title="0x28 FaceBook开源项目"></a>0x28 FaceBook开源项目</h2><p><a href="http://facebook.github.io/rebound/" target="_blank" rel="external"></a></p>
<h2 id="0x29-ScrollView与高度固定的GridView或者ListView嵌套时，界面不显示在最上面"><a href="/1970/01/01/[Android]各种小记录/#0x29-ScrollView与高度固定的GridView或者ListView嵌套时，界面不显示在最上面" class="headerlink" title="0x29 ScrollView与高度固定的GridView或者ListView嵌套时，界面不显示在最上面"></a>0x29 ScrollView与高度固定的GridView或者ListView嵌套时，界面不显示在最上面</h2><ul>
<li><p>gvGroup.setFocusable(false);</p>
<p>  lvGroup.setFocusable(false);在设置Adapter之前让其失去焦点</p>
</li>
<li><p>svMain.fullScroll(ScrollView.FOCUS_UP);</p>
<p>  在合适的时候(如delay10ms)让ScrollView滚动到最顶端</p>
</li>
</ul>
<h2 id="0x30-获取view的高度"><a href="/1970/01/01/[Android]各种小记录/#0x30-获取view的高度" class="headerlink" title="0x30 获取view的高度"></a>0x30 获取view的高度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Rect rect = <span class="keyword">new</span> Rect();</div><div class="line">getDrawingRect(rect);</div><div class="line"><span class="keyword">int</span> height = rect.bottom - rect.top;</div></pre></td></tr></table></figure>
<h2 id="0x31-http-hold-on-iteye-com-blog-1943437"><a href="/1970/01/01/[Android]各种小记录/#0x31-http-hold-on-iteye-com-blog-1943437" class="headerlink" title="0x31 http://hold-on.iteye.com/blog/1943437"></a>0x31 <a href="http://hold-on.iteye.com/blog/1943437" target="_blank" rel="external">http://hold-on.iteye.com/blog/1943437</a></h2><h2 id="0x32-调用系统的浏览器打开网页"><a href="/1970/01/01/[Android]各种小记录/#0x32-调用系统的浏览器打开网页" class="headerlink" title="0x32 调用系统的浏览器打开网页"></a>0x32 调用系统的浏览器打开网页</h2><p><code>区分大小写，http必须为小写</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String url = <span class="string">"http://www.baidu.com"</span>;</div><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">intent.setData(Uri.parse(url));</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<h2 id="0x33-HTTP-POST-乱码"><a href="/1970/01/01/[Android]各种小记录/#0x33-HTTP-POST-乱码" class="headerlink" title="0x33 HTTP POST 乱码"></a>0x33 HTTP POST 乱码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">List&lt;NameValuePair&gt; postParameters = <span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</div><div class="line">postParameters.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"v"</span>, param));</div><div class="line">postParameters.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"s"</span>, Utils.MD5Encode(param, <span class="string">""</span>)));</div><div class="line">postParameters.add(<span class="keyword">new</span> BasicNameValuePair(<span class="string">"e"</span>, String.valueOf(encryptType)));</div><div class="line"></div><div class="line">UrlEncodedFormEntity formEntity = <span class="keyword">new</span> UrlEncodedFormEntity(postParameters, <span class="string">"UTF-8"</span>);</div><div class="line">mPost.setEntity(formEntity);</div></pre></td></tr></table></figure>
<h2 id="0x34-读取联系人"><a href="/1970/01/01/[Android]各种小记录/#0x34-读取联系人" class="headerlink" title="0x34 读取联系人"></a>0x34 读取联系人</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 读取本地通讯录（手机）&lt;br&gt;</div><div class="line"> * 用户通讯录： 手机号码、联系人命名、备注信息、分组信息&lt;br&gt;</div><div class="line"> * 耗时</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> context</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@SuppressLint</span>(<span class="string">"UseSparseArrays"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, ContactInfo&gt; <span class="title">getContracts</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    Map&lt;String, ContactInfo&gt; contactMap = <span class="keyword">new</span> HashMap&lt;String, ContactInfo&gt;();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">        ContentResolver resolver = context.getContentResolver();</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == resolver) &#123;</div><div class="line">            <span class="keyword">return</span> contactMap;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 手机：姓名和手机号</span></div><div class="line">        Cursor curosr = resolver.query(Phone.CONTENT_URI, <span class="keyword">new</span> String[]&#123;Phone.CONTACT_ID, Phone.DISPLAY_NAME, Phone.NUMBER&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != curosr &amp;&amp; curosr.moveToFirst()) &#123;</div><div class="line">            <span class="keyword">int</span> keyId = curosr.getColumnIndex(Phone.CONTACT_ID);</div><div class="line">            <span class="keyword">int</span> keyName = curosr.getColumnIndex(Phone.DISPLAY_NAME);</div><div class="line">            <span class="keyword">int</span> keyNumber = curosr.getColumnIndex(Phone.NUMBER);</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                String id = curosr.getString(keyId);</div><div class="line">                String name = curosr.getString(keyName);</div><div class="line">                String number = curosr.getString(keyNumber);</div><div class="line">                ContactInfo info = <span class="keyword">new</span> ContactInfo();</div><div class="line">                info.setName(name);</div><div class="line">                <span class="keyword">if</span> (!TextUtils.isEmpty(number)) &#123;</div><div class="line">                    number = number.replace(<span class="string">"-"</span>, <span class="string">""</span>);</div><div class="line">                    number = number.replace(<span class="string">" "</span>, <span class="string">""</span>);</div><div class="line">                    info.setNumber(number);</div><div class="line">                &#125;</div><div class="line">                contactMap.put(id, info);</div><div class="line">            &#125; <span class="keyword">while</span> (curosr.moveToNext());</div><div class="line">        &#125;</div><div class="line">        curosr.close();</div><div class="line"></div><div class="line">        <span class="comment">// SIM卡：姓名和手机号</span></div><div class="line">        curosr = resolver.query(Uri.parse(<span class="string">"content://icc/adn"</span>), <span class="keyword">new</span> String[]&#123;Phone.CONTACT_ID, Phone.DISPLAY_NAME, Phone.NUMBER&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != curosr &amp;&amp; curosr.moveToFirst()) &#123;</div><div class="line">            <span class="keyword">int</span> keyId = curosr.getColumnIndex(Phone.CONTACT_ID);</div><div class="line">            <span class="keyword">int</span> keyName = curosr.getColumnIndex(Phone.DISPLAY_NAME);</div><div class="line">            <span class="keyword">int</span> keyNumber = curosr.getColumnIndex(Phone.NUMBER);</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                String id = curosr.getString(keyId);</div><div class="line">                String name = curosr.getString(keyName);</div><div class="line">                String number = curosr.getString(keyNumber);</div><div class="line">                ContactInfo info = <span class="keyword">new</span> ContactInfo();</div><div class="line">                info.setName(name);</div><div class="line">                info.setNumber(number);</div><div class="line">                contactMap.put(id, info);</div><div class="line">            &#125; <span class="keyword">while</span> (curosr.moveToNext());</div><div class="line">        &#125;</div><div class="line">        curosr.close();</div><div class="line"></div><div class="line">        <span class="comment">// 备注</span></div><div class="line">        curosr = resolver.query(Data.CONTENT_URI, <span class="keyword">new</span> String[]&#123;Data.CONTACT_ID, Data.DATA1&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != curosr &amp;&amp; curosr.moveToFirst()) &#123;</div><div class="line">            <span class="keyword">int</span> keyId = curosr.getColumnIndex(Data.CONTACT_ID);</div><div class="line">            <span class="keyword">int</span> keyRemark = curosr.getColumnIndex(Data.DATA1);</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                String id = curosr.getString(keyId);</div><div class="line">                String remark = curosr.getString(keyRemark);</div><div class="line">                ContactInfo info = contactMap.get(id);</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != info) &#123;</div><div class="line">                    info.setRemark(remark);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">while</span> (curosr.moveToNext());</div><div class="line">        &#125;</div><div class="line">        curosr.close();</div><div class="line"></div><div class="line">        <span class="comment">// 获取所有分组</span></div><div class="line">        Map&lt;String, String&gt; groupData = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">        curosr = resolver.query(Groups.CONTENT_URI, <span class="keyword">new</span> String[]&#123;Groups._ID, Groups.TITLE&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != curosr &amp;&amp; curosr.moveToFirst()) &#123;</div><div class="line">            <span class="keyword">int</span> keyId = curosr.getColumnIndex(Groups._ID);</div><div class="line">            <span class="keyword">int</span> keyGroupName = curosr.getColumnIndex(Groups.TITLE);</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                String id = curosr.getString(keyId);</div><div class="line">                String name = curosr.getString(keyGroupName);</div><div class="line">                groupData.put(id, name);</div><div class="line">            &#125; <span class="keyword">while</span> (curosr.moveToNext());</div><div class="line">        &#125;</div><div class="line">        curosr.close();</div><div class="line"></div><div class="line">        <span class="comment">// 关联联系人和分组</span></div><div class="line">        curosr = resolver.query(Data.CONTENT_URI, <span class="keyword">new</span> String[]&#123;GroupMembership.CONTACT_ID, GroupMembership.GROUP_ROW_ID&#125;, Data.MIMETYPE + <span class="string">" = ?"</span>,</div><div class="line">                <span class="keyword">new</span> String[]&#123;GroupMembership.CONTENT_ITEM_TYPE&#125;, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != curosr &amp;&amp; curosr.moveToFirst()) &#123;</div><div class="line">            <span class="keyword">int</span> keyId = curosr.getColumnIndex(GroupMembership.CONTACT_ID);</div><div class="line">            <span class="keyword">int</span> keyGroupId = curosr.getColumnIndex(GroupMembership.GROUP_ROW_ID);</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                String id = curosr.getString(keyId);</div><div class="line">                String groupId = curosr.getString(keyGroupId);</div><div class="line">                String groupName = groupData.get(groupId);</div><div class="line">                ContactInfo info = contactMap.get(id);</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != info &amp;&amp; !TextUtils.isEmpty(groupName)) &#123;</div><div class="line">                    info.setGroup(groupName);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">while</span> (curosr.moveToNext());</div><div class="line">        &#125;</div><div class="line">        curosr.close();</div><div class="line"></div><div class="line">        Iterator&lt;String&gt; iterator = contactMap.keySet().iterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</div><div class="line">            String id = iterator.next();</div><div class="line">            ContactInfo info = contactMap.get(id);</div><div class="line">            System.out.println(String.format(<span class="string">"%s, %s, %s, %s."</span>, info.getName(), info.getNumber(), info.getGroup(), info.getRemark()));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        groupData.clear();</div><div class="line">        groupData = <span class="keyword">null</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> contactMap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x35-单元测试——测试异步任务"><a href="/1970/01/01/[Android]各种小记录/#0x35-单元测试——测试异步任务" class="headerlink" title="0x35 单元测试——测试异步任务"></a>0x35 单元测试——测试异步任务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsynchronous</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        CountDownLatch signal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Looper.prepare();</div><div class="line">                signal.countDown();</div><div class="line">                Looper.loop();</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">        signal.await();</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x36-GridLayout合并"><a href="/1970/01/01/[Android]各种小记录/#0x36-GridLayout合并" class="headerlink" title="0x36 GridLayout合并"></a>0x36 GridLayout合并</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">GridLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/glNumber"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_below</span>=<span class="string">"@+id/etPassword"</span></div><div class="line">    <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:alignmentMode</span>=<span class="string">"alignBounds"</span></div><div class="line">    <span class="attr">android:columnCount</span>=<span class="string">"3"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:rowCount</span>=<span class="string">"4"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.ttdevs.blur.CircleButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/cbt1"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"64dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"64dp"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.ttdevs.blur.CircleButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/cbt2"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"64dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"64dp"</span></div><div class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"10dp"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.ttdevs.blur.CircleButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/cbt3"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"64dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"64dp"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.ttdevs.blur.CircleButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/cbt0"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"64dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"64dp"</span></div><div class="line">        <span class="attr">android:layout_columnSpan</span>=<span class="string">"2"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.ttdevs.blur.CircleButton</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/cbtDel"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"64dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"64dp"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">GridLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="0x37-PopupWindow显示的时候左右不靠边（有边缝）"><a href="/1970/01/01/[Android]各种小记录/#0x37-PopupWindow显示的时候左右不靠边（有边缝）" class="headerlink" title="0x37 PopupWindow显示的时候左右不靠边（有边缝）"></a>0x37 PopupWindow显示的时候左右不靠边（有边缝）</h2><p><code>setBackgroundDrawable(new ColorDrawable(0xa0000000));</code></p>
<h2 id="0x38-EditText限制可输入小数"><a href="/1970/01/01/[Android]各种小记录/#0x38-EditText限制可输入小数" class="headerlink" title="0x38 EditText限制可输入小数"></a>0x38 EditText限制可输入小数</h2><p><code>etInput.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);</code></p>
<p><a href="http://stackoverflow.com/questions/4276068/how-to-make-edittext-field-for-decimals" target="_blank" rel="external"></a></p>
<h2 id="0x39-隐藏键盘"><a href="/1970/01/01/[Android]各种小记录/#0x39-隐藏键盘" class="headerlink" title="0x39 隐藏键盘"></a>0x39 隐藏键盘</h2><p>隐藏键盘貌似在onDestory中调用无效，最后自己把它写在了onStop中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 关闭键盘</div><div class="line"> * <span class="doctag">@param</span> context</div><div class="line"> * <span class="doctag">@param</span> windowToken</div><div class="line"> * <span class="doctag">@param</span> flag</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Context context, IBinder windowToken, <span class="keyword">int</span> flag)</span> </span>&#123;</div><div class="line">    InputMethodManager imm = (InputMethodManager) context</div><div class="line">            .getSystemService(Context.INPUT_METHOD_SERVICE);</div><div class="line">    imm.hideSoftInputFromWindow(windowToken, flag);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x40-Android-TextView-显示不全的问题"><a href="/1970/01/01/[Android]各种小记录/#0x40-Android-TextView-显示不全的问题" class="headerlink" title="0x40 Android TextView 显示不全的问题"></a>0x40 Android TextView 显示不全的问题</h2><p>代码如下，当给TextView的属性设置成match_parent的时候，text中设置的文字比较长的时候会出现显示不全的问题</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"top"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">    <span class="attr">android:padding</span>=<span class="string">"@dimen/global_padding_normal"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_health_light"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"@dimen/detail_light_width"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/detail_light_height"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_appraise"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"@dimen/global_margin_normal"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"left|top"</span></div><div class="line">        <span class="attr">android:lineSpacingExtra</span>=<span class="string">"@dimen/global_line_space"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"@color/global_gray_dark"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"@dimen/global_font_small"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="0x41-查看系统alarm-闹钟-队列"><a href="/1970/01/01/[Android]各种小记录/#0x41-查看系统alarm-闹钟-队列" class="headerlink" title="0x41 查看系统alarm(闹钟)队列"></a>0x41 查看系统alarm(闹钟)队列</h2><ul>
<li><p>Alarm事件队列</p>
<p>  <code>adb shell dumpsys alarm</code></p>
</li>
<li><p>查看intent</p>
<p>  <code>adb shell dumpsys activity intents</code></p>
</li>
</ul>
<p><a href="https://plus.google.com/+RomanNurik/posts/5w3Mi9EoniT" target="_blank" rel="external"></a></p>
<h2 id="0x42-singleTask与onNewIntent"><a href="/1970/01/01/[Android]各种小记录/#0x42-singleTask与onNewIntent" class="headerlink" title="0x42 singleTask与onNewIntent"></a>0x42 singleTask与onNewIntent</h2><p>singleTask与onNewIntent同时存在时，onNewIntent不是总被调用。比如：当前App启动过，第三方App再次启动时是不会调用onNewIntent的，再或者我们从任务列表中再次启动当前App也是不会触发onNewIntent的。  </p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Flask」0x00Welcome]]></title>
      <url>/1970/01/01/%5BFlask%5D0x00Welcome/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Welcome-to-Flask"><a href="/1970/01/01/[Flask]0x00Welcome/#0x00-Welcome-to-Flask" class="headerlink" title="0x00 Welcome to Flask"></a>0x00 Welcome to Flask</h2><blockquote>
<p>Flask is a microframework for Python based on Werkzeug, Jinja 2 and good intentions. And before you ask: It’s BSD licensed! </p>
</blockquote>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Flask]0x00Welcome/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://pypi.python.org/pypi/Flask/0.10.1" target="_blank" rel="external">https://pypi.python.org/pypi/Flask/0.10.1</a></li>
<li><a href="http://flask.pocoo.org/docs/0.10/" target="_blank" rel="external">http://flask.pocoo.org/docs/0.10/</a></li>
<li><a href="https://github.com/pallets/flask" target="_blank" rel="external">https://github.com/pallets/flask</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」通过Intent传递数据]]></title>
      <url>/1970/01/01/%5BAndroid%5D%E9%80%9A%E8%BF%87Intent%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h2 id="0x00-需求"><a href="/1970/01/01/[Android]通过Intent传递数据/#0x00-需求" class="headerlink" title="0x00 需求"></a>0x00 需求</h2><p>日常开发中，我们经常遇到通过 Intent 来传递数据（如果你使用Bundle也是一样的），默认情况，我们可以看到支持的数据类型：</p>
<p><img src="http://img.blog.csdn.net/20160807214929418" alt="intent"></p>
<ul>
<li><p>基本类型</p>
<p>  boolean、byte、char 、short、double、float、int、long</p>
</li>
<li><p>字符串类型</p>
<p>  String、String[]、CharSequence、CharSequence[]</p>
</li>
<li><p>序列化类型</p>
<p>  Serializable、Parcelable</p>
</li>
<li><p>其他类型</p>
<p>  八种基本类型的数组、IntegerArray、StringArray、CharSequenceArray、ParcelableArray</p>
</li>
</ul>
<p>对于基本类型我们可以不做任何处理即可在Activity或者Service中传递。那么对于自定义类型，我们怎么做呢？</p>
<h2 id="0x01-何谓序列化"><a href="/1970/01/01/[Android]通过Intent传递数据/#0x01-何谓序列化" class="headerlink" title="0x01 何谓序列化"></a>0x01 何谓序列化</h2><p>当我们需要对JVM中的java对象进行转储时，就需要将其转化成二进制序列，然后才能存储到外部。这个序列中保存了java对象的类型，数据，数据类型等。当需要的时候，再对存储的二进制序列进行反序列化，即可将其还原。常见的场景比如：存储JVM中对象，通过Socket传递java对象，RMI等等。</p>
<h2 id="0x02-String类型"><a href="/1970/01/01/[Android]通过Intent传递数据/#0x02-String类型" class="headerlink" title="0x02 String类型"></a>0x02 String类型</h2><blockquote>
<p>为什么把这个放在第一位呢？<br>原因很简单：简单</p>
</blockquote>
<p>基本类型不用说，直接传递即可，对于我们的自定义类型，如果你跟我一样，不太喜欢（熟悉 T-T）Serializable和Parcelable，那用String类型最简单了。其实这个说法还有个前提，就是我们的项目中需要集成json工具（不过至少有gson）。使用方法如下：首先通过json工具将我们的Object转换成json字符串，然后在接收处在通过json工具还原为Object。</p>
<p>从效率来看，会比下面两种情况低。但是对初学者来说，会比下面两种用起来简单。目前还没有遇到出错的问题（可能时因为我传递的数据比较小比较简单吧）。</p>
<h2 id="0x02-Serializable"><a href="/1970/01/01/[Android]通过Intent传递数据/#0x02-Serializable" class="headerlink" title="0x02 Serializable"></a>0x02 Serializable</h2><p>Java中经常会遇到 Serializable，比如这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> login;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> score;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有些地方需要进行序列化时，IDE会提示我们实现一个接口：<code>Serializable</code>，然后我们乖乖地加上这个接口即可（有时候IDE还会自动生成一个静态常量：<code>private static final long serialVersionUID = 23333333333333333333L;</code>）。如果你没有去追究为什么，那么事情就此结束。通过Intent传递数据时，也是如此。好了，我们进入下一部分～～</p>
<p>哈哈，哪能这么简单。你可能会问，为什么加个这个接口即可？Serializable是一种 标记接口，当我们实现这个接口之后，系统会自动通过反射机制将我们对象的成员进行序列化。这里会涉及一些其他信息，比如：serialVersionUID、静态常量的序列化等等，更多信息请参考<a href="http://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html" target="_blank" rel="external">这里</a>。</p>
<h2 id="0x03-Parcelable"><a href="/1970/01/01/[Android]通过Intent传递数据/#0x03-Parcelable" class="headerlink" title="0x03 Parcelable"></a>0x03 Parcelable</h2><p>Parcelable是android特有的处理序列化的方法。先看简单的使用：</p>
<ul>
<li><p>创建一个类：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">	    <span class="keyword">public</span> String userName;</div><div class="line">	    <span class="keyword">public</span> <span class="keyword">int</span> age;</div><div class="line">	    <span class="keyword">public</span> <span class="keyword">boolean</span> login;</div><div class="line">	    <span class="keyword">public</span> <span class="keyword">float</span> score;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用AndroidStudio的代码生成功能生成如下 模版 代码：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String userName;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> login;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> score;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">User</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">        userName = in.readString();</div><div class="line">        age = in.readInt();</div><div class="line">        login = in.readByte() != <span class="number">0</span>;</div><div class="line">        score = in.readFloat();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</div><div class="line">        dest.writeString(userName);</div><div class="line">        dest.writeInt(age);</div><div class="line">        dest.writeByte((<span class="keyword">byte</span>) (login ? <span class="number">1</span> : <span class="number">0</span>));</div><div class="line">        dest.writeFloat(score);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Creator&lt;User&gt; CREATOR = <span class="keyword">new</span> Creator&lt;User&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(in);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> User[] newArray(<span class="keyword">int</span> size) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p> 对比上面的两段代码，我们可以发现：</p>
<ul>
<li>构造方法中接收一个 Parcel 对象，通过这个对象对成员变量赋值</li>
<li><p>实现了 <code>Parcelable</code> 接口的方法</p>
<ul>
<li>在 <code>writeToParcel</code> 方法中将我们的成员变量写入 <code>Parcel</code></li>
<li><p>在 <code>describeContents</code> 中返回一个数字 0</p>
<blockquote>
<p>Describe the kinds of special objects contained in this Parcelable instance’s marshaled representation. For example, if the object will include a file descriptor in the output of writeToParcel(Parcel, int), the return value of this method must include the CONTENTS_FILE_DESCRIPTOR bit.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>创建了一个 <code>public static final</code> 常量 <code>CREATOR</code></p>
</li>
</ul>
<p>这样我们就可以通过Intent传递对象了。</p>
<p>在android的很多文章中都可以看到，Intent中传递数据，强烈推荐使用  <code>Parcelable</code> 他的效率会比 <code>Serializable</code>更高（比如后者没有使用反射等等）。当然没有完美的事情，<code>Parcelable</code> 并不能完全取代<code>Serializable</code>，比如将JVM对象存储到磁盘等等。但是对于Android开发中的通过Intent传递数据来说，已经足够。</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Android]通过Intent传递数据/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="http://stackoverflow.com/questions/3611843/is-using-serializable-in-android-bad/3612364#3612364" target="_blank" rel="external">http://stackoverflow.com/questions/3611843/is-using-serializable-in-android-bad/3612364#3612364</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html" target="_blank" rel="external">http://www.ibm.com/developerworks/cn/java/j-lo-serial/index.html</a></li>
<li><a href="https://developer.android.com/reference/android/os/Parcelable.html" target="_blank" rel="external">https://developer.android.com/reference/android/os/Parcelable.html</a></li>
<li><a href="http://blog.csdn.net/js931178805/article/details/8268144" target="_blank" rel="external">http://blog.csdn.net/js931178805/article/details/8268144</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」滚轮刻度尺的实现]]></title>
      <url>/1970/01/01/%5BAndroid%5D%E6%BB%9A%E8%BD%AE%E5%88%BB%E5%BA%A6%E5%B0%BA%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="0x00-滚轮刻度尺（卷尺）"><a href="/1970/01/01/[Android]滚轮刻度尺的实现/#0x00-滚轮刻度尺（卷尺）" class="headerlink" title="0x00 滚轮刻度尺（卷尺）"></a>0x00 滚轮刻度尺（卷尺）</h2><p>遇到下面这样一个需求：</p>
<p><img src="http://img.blog.csdn.net/20140831150159887?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="滚轮刻度尺">  </p>
<h2 id="0x01-问题分析"><a href="/1970/01/01/[Android]滚轮刻度尺的实现/#0x01-问题分析" class="headerlink" title="0x01 问题分析"></a>0x01 问题分析</h2><p>卷尺，通过左右滑动来选择不同的刻度值。这方面的东西以前没弄过，以目前你的能力，想了几种思路都死在了半路上。比如上面的刻度线如何弄，滑动的时候又该如何弄；下面的数字又如何弄；看起来像圆圈的效果该如何弄。时间紧迫，就俩晚上的时间。没有好的思路就参考别人的先吧，说来也巧，两天前刚看过一个日期选择控件，还有以前看的一个<a href="http://blog.csdn.net/lilu_leo/article/details/7397697" target="_blank" rel="external">仿iPhone滚动控件</a> ，效果类似：</p>
<p><img src="http://img.blog.csdn.net/20140831151514968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""> </p>
<p><img src="http://img.blog.csdn.net/20140831151748056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="">  </p>
<p>本想找作者<a href="http://blog.csdn.net/lilu_leo" target="_blank" rel="external">傲慢的上校</a>交流下，但是时间比较紧，源码都给了也不是很好意思。大致的浏览了下，可能涉及下面几个东西：</p>
<ul>
<li>背景：这个用shape实现。之前有研究过，也用过，但是还没实现过要求的效果</li>
<li>刻度和数字：这个就不要乱想了，直接draw。相对来说还是比较简单的，就是画直线和字</li>
<li>滚动：滚动的时候不停的重绘实现一个滚动的效果。弄过，但是不确定实现的是啥样的效果</li>
<li>快速滚动：Scroller和VelocityTracker可能是需要用到的东西。几乎完全没弄过，骚年，学习吧（需求的要求中，这个优先级可以最低）</li>
<li>需求：刻度的单位是可以变的，比如十格一个单位，或者两格一个单位，在或者可以是任意的（这个前期思路没想好，实现起来就困难了，最后只弄了两种）</li>
</ul>
<p>其实，到了这一步基本上就已经可以实现了，看个最终效果先：</p>
<p><img src="http://img.blog.csdn.net/20140831153554458?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="">  </p>
<h2 id="0x02-实现"><a href="/1970/01/01/[Android]滚轮刻度尺的实现/#0x02-实现" class="headerlink" title="0x02 实现"></a>0x02 实现</h2><p>下面一步一步来。</p>
<p>在这之前还有个地方要说的，就是控件的接口：对外提供一个方法实现控件初始化和接收控件选择的值：显示的单位，最大值，最小值，当前值，回调接口。有了这些，先从最难的入手。</p>
<ul>
<li>实现刻度和数字，并可以滑动</li>
</ul>
<p>这个地方很关键，每个人有每个人的思路，而且思路的好坏直接影响到后面对不同单位的实现。目前的思路是根据当前显示的数值mValue，从控件中间向两边画刻度线，滑动的时候同时改变显示的值mValue，不足最小刻度的四舍五入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">   drawScaleLine(canvas);</div><div class="line">   <span class="comment">// drawWheel(canvas);</span></div><div class="line">   drawMiddleLine(canvas);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawWheel</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">   Drawable wheel = getResources().getDrawable(R.drawable.bg_wheel);</div><div class="line">   wheel.setBounds(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</div><div class="line">   wheel.draw(canvas);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 从中间往两边开始画刻度线</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> canvas</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawScaleLine</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">   canvas.save();</div><div class="line"></div><div class="line">   Paint linePaint = <span class="keyword">new</span> Paint();</div><div class="line">   linePaint.setStrokeWidth(<span class="number">2</span>);</div><div class="line">   linePaint.setColor(Color.BLACK);</div><div class="line"></div><div class="line">   TextPaint textPaint = <span class="keyword">new</span> TextPaint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">   textPaint.setTextSize(TEXT_SIZE * mDensity);</div><div class="line"></div><div class="line">   <span class="keyword">int</span> width = mWidth, drawCount = <span class="number">0</span>;</div><div class="line">   <span class="keyword">float</span> xPosition = <span class="number">0</span>, textWidth = Layout.getDesiredWidth(<span class="string">"0"</span>, textPaint);</div><div class="line"></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; drawCount &lt;= <span class="number">4</span> * width; i++) &#123;</div><div class="line">       <span class="keyword">int</span> numSize = String.valueOf(mValue + i).length();</div><div class="line"></div><div class="line">       xPosition = (width / <span class="number">2</span> - mMove) + i * mLineDivider * mDensity;</div><div class="line">       <span class="keyword">if</span> (xPosition + getPaddingRight() &lt; mWidth) &#123;</div><div class="line">           <span class="keyword">if</span> ((mValue + i) % mModType == <span class="number">0</span>) &#123;</div><div class="line">               canvas.drawLine(xPosition, getPaddingTop(), xPosition, mDensity * ITEM_MAX_HEIGHT, linePaint);</div><div class="line"></div><div class="line">               <span class="keyword">if</span> (mValue + i &lt;= mMaxValue) &#123;</div><div class="line">                   <span class="keyword">switch</span> (mModType) &#123;</div><div class="line">                       <span class="keyword">case</span> MOD_TYPE_HALF:</div><div class="line">                           canvas.drawText(String.valueOf((mValue + i) / <span class="number">2</span>), countLeftStart(mValue + i, xPosition, textWidth), getHeight() - textWidth, textPaint);</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                       <span class="keyword">case</span> MOD_TYPE_ONE:</div><div class="line">                           canvas.drawText(String.valueOf(mValue + i), xPosition - (textWidth * numSize / <span class="number">2</span>), getHeight() - textWidth, textPaint);</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                       <span class="keyword">default</span>:</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               canvas.drawLine(xPosition, getPaddingTop(), xPosition, mDensity * ITEM_MIN_HEIGHT, linePaint);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       xPosition = (width / <span class="number">2</span> - mMove) - i * mLineDivider * mDensity;</div><div class="line">       <span class="keyword">if</span> (xPosition &gt; getPaddingLeft()) &#123;</div><div class="line">           <span class="keyword">if</span> ((mValue - i) % mModType == <span class="number">0</span>) &#123;</div><div class="line">               canvas.drawLine(xPosition, getPaddingTop(), xPosition, mDensity * ITEM_MAX_HEIGHT, linePaint);</div><div class="line"></div><div class="line">               <span class="keyword">if</span> (mValue - i &gt;= <span class="number">0</span>) &#123;</div><div class="line">                   <span class="keyword">switch</span> (mModType) &#123;</div><div class="line">                       <span class="keyword">case</span> MOD_TYPE_HALF:</div><div class="line">                           canvas.drawText(String.valueOf((mValue - i) / <span class="number">2</span>), countLeftStart(mValue - i, xPosition, textWidth), getHeight() - textWidth, textPaint);</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                       <span class="keyword">case</span> MOD_TYPE_ONE:</div><div class="line">                           canvas.drawText(String.valueOf(mValue - i), xPosition - (textWidth * numSize / <span class="number">2</span>), getHeight() - textWidth, textPaint);</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                       <span class="keyword">default</span>:</div><div class="line">                           <span class="keyword">break</span>;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               canvas.drawLine(xPosition, getPaddingTop(), xPosition, mDensity * ITEM_MIN_HEIGHT, linePaint);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       drawCount += <span class="number">2</span> * mLineDivider * mDensity;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   canvas.restore();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>滑动的加速问题</li>
</ul>
<p>这里用到两个类Scroller和VelocityTracker，关于这两个类之后有机会会详细介绍，这里简单提下：VelocityTracker的作用是在用户加速滑动时计算该滑动多远，拿到这个之后通过Scroller来执行滑动过程的计算，最后是真实的“移动”——根据mValue的值进行重绘：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> action = event.getAction();</div><div class="line">   <span class="keyword">int</span> xPosition = (<span class="keyword">int</span>) event.getX();</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;</div><div class="line">       mVelocityTracker = VelocityTracker.obtain();</div><div class="line">   &#125;</div><div class="line">   mVelocityTracker.addMovement(event);</div><div class="line"></div><div class="line">   <span class="keyword">switch</span> (action) &#123;</div><div class="line">       <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line"></div><div class="line">           mScroller.forceFinished(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">           mLastX = xPosition;</div><div class="line">           mMove = <span class="number">0</span>;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">           mMove += (mLastX - xPosition);</div><div class="line">           changeMoveAndValue();</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">       <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">           countMoveEnd();</div><div class="line">           countVelocityTracker(event);</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       <span class="comment">// break;</span></div><div class="line">       <span class="keyword">default</span>:</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   mLastX = xPosition;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">countVelocityTracker</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">   mVelocityTracker.computeCurrentVelocity(<span class="number">1000</span>);</div><div class="line">   <span class="keyword">float</span> xVelocity = mVelocityTracker.getXVelocity();</div><div class="line">   <span class="keyword">if</span> (Math.abs(xVelocity) &gt; mMinVelocity) &#123;</div><div class="line">       mScroller.fling(<span class="number">0</span>, <span class="number">0</span>, (<span class="keyword">int</span>) xVelocity, <span class="number">0</span>, Integer.MIN_VALUE, Integer.MAX_VALUE, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeMoveAndValue</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> tValue = (<span class="keyword">int</span>) (mMove / (mLineDivider * mDensity));</div><div class="line">   <span class="keyword">if</span> (Math.abs(tValue) &gt; <span class="number">0</span>) &#123;</div><div class="line">       mValue += tValue;</div><div class="line">       mMove -= tValue * mLineDivider * mDensity;</div><div class="line">       <span class="keyword">if</span> (mValue &lt;= <span class="number">0</span> || mValue &gt; mMaxValue) &#123;</div><div class="line">           mValue = mValue &lt;= <span class="number">0</span> ? <span class="number">0</span> : mMaxValue;</div><div class="line">           mMove = <span class="number">0</span>;</div><div class="line">           mScroller.forceFinished(<span class="keyword">true</span>);</div><div class="line">       &#125;</div><div class="line">       notifyValueChange();</div><div class="line">   &#125;</div><div class="line">   postInvalidate();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">countMoveEnd</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> roundMove = Math.round(mMove / (mLineDivider * mDensity));</div><div class="line">   mValue = mValue + roundMove;</div><div class="line">   mValue = mValue &lt;= <span class="number">0</span> ? <span class="number">0</span> : mValue;</div><div class="line">   mValue = mValue &gt; mMaxValue ? mMaxValue : mValue;</div><div class="line"></div><div class="line">   mLastX = <span class="number">0</span>;</div><div class="line">   mMove = <span class="number">0</span>;</div><div class="line"></div><div class="line">   notifyValueChange();</div><div class="line">   postInvalidate();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyValueChange</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">null</span> != mListener) &#123;</div><div class="line">       <span class="keyword">if</span> (mModType == MOD_TYPE_ONE) &#123;</div><div class="line">           mListener.onValueChange(mValue);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (mModType == MOD_TYPE_HALF) &#123;</div><div class="line">           mListener.onValueChange(mValue / <span class="number">2f</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.computeScroll();</div><div class="line">   <span class="keyword">if</span> (mScroller.computeScrollOffset()) &#123;</div><div class="line">       <span class="keyword">if</span> (mScroller.getCurrX() == mScroller.getFinalX()) &#123; <span class="comment">// over</span></div><div class="line">           countMoveEnd();</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">int</span> xPosition = mScroller.getCurrX();</div><div class="line">           mMove += (mLastX - xPosition);</div><div class="line">           changeMoveAndValue();</div><div class="line">           mLastX = xPosition;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>圆圈背景的实现</li>
</ul>
<p>这个用shape来做，可以使用setBackgroundDrawable()来做，也可以在draw中进行直接绘制，效果相同。还有一些细节问题，比如滑动时刻度线超过边界，滑动距离大时候显示不完整等问题，这个只有做了才会发现。下面是shape背景的代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">   <span class="attr">android:shape</span>=<span class="string">"rectangle"</span> &gt;</div><div class="line">    </div><div class="line">   <span class="comment">&lt;!-- two set color way --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">gradient</span></span></div><div class="line">       <span class="attr">android:angle</span>=<span class="string">"0"</span></div><div class="line">       <span class="attr">android:centerColor</span>=<span class="string">"#66FFFFFF"</span></div><div class="line">       <span class="attr">android:endColor</span>=<span class="string">"#66AAAAAA"</span></div><div class="line">       <span class="attr">android:startColor</span>=<span class="string">"#66AAAAAA"</span> /&gt;</div><div class="line">    </div><div class="line">   <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"6dp"</span> /&gt;</span></div><div class="line">    </div><div class="line">   <span class="tag">&lt;<span class="name">stroke</span></span></div><div class="line">       <span class="attr">android:width</span>=<span class="string">"6dp"</span></div><div class="line">       <span class="attr">android:color</span>=<span class="string">"#FF666666"</span> /&gt;</div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<p>用代码可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> GradientDrawable <span class="title">createBackground</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">float</span> strokeWidth = <span class="number">4</span> * mDensity; <span class="comment">// 边框宽度</span></div><div class="line">   <span class="keyword">float</span> roundRadius = <span class="number">6</span> * mDensity; <span class="comment">// 圆角半径</span></div><div class="line">   <span class="keyword">int</span> strokeColor = Color.parseColor(<span class="string">"#FF666666"</span>);<span class="comment">// 边框颜色</span></div><div class="line">   <span class="comment">// int fillColor = Color.parseColor("#DFDFE0");// 内部填充颜色</span></div><div class="line"></div><div class="line">   setPadding((<span class="keyword">int</span>) strokeWidth, (<span class="keyword">int</span>) strokeWidth, (<span class="keyword">int</span>) strokeWidth, <span class="number">0</span>);</div><div class="line"></div><div class="line">   <span class="keyword">int</span> colors[] = &#123;<span class="number">0xFF999999</span>, <span class="number">0xFFFFFFFF</span>, <span class="number">0xFF999999</span>&#125;;<span class="comment">// 分别为开始颜色，中间夜色，结束颜色</span></div><div class="line">   GradientDrawable bgDrawable = <span class="keyword">new</span> GradientDrawable(GradientDrawable.Orientation.LEFT_RIGHT, colors);<span class="comment">// 创建drawable</span></div><div class="line">   <span class="comment">// bgDrawable.setColor(fillColor);</span></div><div class="line">   bgDrawable.setCornerRadius(roundRadius);</div><div class="line">   bgDrawable.setStroke((<span class="keyword">int</span>) strokeWidth, strokeColor);</div><div class="line">   <span class="comment">// setBackgroundDrawable(gd);</span></div><div class="line">   <span class="keyword">return</span> bgDrawable;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x03-完整的代码"><a href="/1970/01/01/[Android]滚轮刻度尺的实现/#0x03-完整的代码" class="headerlink" title="0x03 完整的代码"></a>0x03 完整的代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.ttdevs.wheel.widget;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 卷尺控件类。由于时间比较紧，只有下班后有时间，因此只实现了基本功能。&lt;br&gt;</div><div class="line"> * 细节问题包括滑动过程中widget边缘的刻度显示问题等&lt;br&gt;</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 周末有时间会继续更新&lt;br&gt;</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> ttdevs</div><div class="line"> * <span class="doctag">@version</span> create：2014年8月26日</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressLint</span>(<span class="string">"ClickableViewAccessibility"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TuneWheel</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnValueChangeListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onValueChange</span><span class="params">(<span class="keyword">float</span> value)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOD_TYPE_HALF = <span class="number">2</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOD_TYPE_ONE = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEM_HALF_DIVIDER = <span class="number">40</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEM_ONE_DIVIDER = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEM_MAX_HEIGHT = <span class="number">50</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ITEM_MIN_HEIGHT = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TEXT_SIZE = <span class="number">18</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mDensity;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mValue = <span class="number">50</span>, mMaxValue = <span class="number">100</span>, mModType = MOD_TYPE_HALF, mLineDivider = ITEM_HALF_DIVIDER;</div><div class="line">    <span class="comment">// private int mValue = 50, mMaxValue = 500, mModType = MOD_TYPE_ONE,</span></div><div class="line">    <span class="comment">// mLineDivider = ITEM_ONE_DIVIDER;</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLastX, mMove;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth, mHeight;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMinVelocity;</div><div class="line">    <span class="keyword">private</span> Scroller mScroller;</div><div class="line">    <span class="keyword">private</span> VelocityTracker mVelocityTracker;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OnValueChangeListener mListener;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TuneWheel</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line"></div><div class="line">        mScroller = <span class="keyword">new</span> Scroller(getContext());</div><div class="line">        mDensity = getContext().getResources().getDisplayMetrics().density;</div><div class="line"></div><div class="line">        mMinVelocity = ViewConfiguration.get(getContext()).getScaledMinimumFlingVelocity();</div><div class="line"></div><div class="line">        <span class="comment">// setBackgroundResource(R.drawable.bg_wheel);</span></div><div class="line">        setBackgroundDrawable(createBackground());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> GradientDrawable <span class="title">createBackground</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> strokeWidth = <span class="number">4</span> * mDensity; <span class="comment">// 边框宽度</span></div><div class="line">        <span class="keyword">float</span> roundRadius = <span class="number">6</span> * mDensity; <span class="comment">// 圆角半径</span></div><div class="line">        <span class="keyword">int</span> strokeColor = Color.parseColor(<span class="string">"#FF666666"</span>);<span class="comment">// 边框颜色</span></div><div class="line">        <span class="comment">// int fillColor = Color.parseColor("#DFDFE0");// 内部填充颜色</span></div><div class="line"></div><div class="line">        setPadding((<span class="keyword">int</span>) strokeWidth, (<span class="keyword">int</span>) strokeWidth, (<span class="keyword">int</span>) strokeWidth, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> colors[] = &#123;<span class="number">0xFF999999</span>, <span class="number">0xFFFFFFFF</span>, <span class="number">0xFF999999</span>&#125;;<span class="comment">// 分别为开始颜色，中间夜色，结束颜色</span></div><div class="line">        GradientDrawable bgDrawable = <span class="keyword">new</span> GradientDrawable(GradientDrawable.Orientation.LEFT_RIGHT, colors);<span class="comment">// 创建drawable</span></div><div class="line">        <span class="comment">// bgDrawable.setColor(fillColor);</span></div><div class="line">        bgDrawable.setCornerRadius(roundRadius);</div><div class="line">        bgDrawable.setStroke((<span class="keyword">int</span>) strokeWidth, strokeColor);</div><div class="line">        <span class="comment">// setBackgroundDrawable(gd);</span></div><div class="line">        <span class="keyword">return</span> bgDrawable;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 考虑可扩展，但是时间紧迫，只可以支持两种类型效果图中两种类型</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> value    初始值</div><div class="line">     * <span class="doctag">@param</span> maxValue 最大值</div><div class="line">     * <span class="doctag">@param</span> model    刻度盘精度：&lt;br&gt;</div><div class="line">     *                 &#123;<span class="doctag">@link</span> MOD_TYPE_HALF&#125;&lt;br&gt;</div><div class="line">     *                 &#123;<span class="doctag">@link</span> MOD_TYPE_ONE&#125;&lt;br&gt;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initViewParam</span><span class="params">(<span class="keyword">int</span> defaultValue, <span class="keyword">int</span> maxValue, <span class="keyword">int</span> model)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (model) &#123;</div><div class="line">            <span class="keyword">case</span> MOD_TYPE_HALF:</div><div class="line">                mModType = MOD_TYPE_HALF;</div><div class="line">                mLineDivider = ITEM_HALF_DIVIDER;</div><div class="line">                mValue = defaultValue * <span class="number">2</span>;</div><div class="line">                mMaxValue = maxValue * <span class="number">2</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MOD_TYPE_ONE:</div><div class="line">                mModType = MOD_TYPE_ONE;</div><div class="line">                mLineDivider = ITEM_ONE_DIVIDER;</div><div class="line">                mValue = defaultValue;</div><div class="line">                mMaxValue = maxValue;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        invalidate();</div><div class="line"></div><div class="line">        mLastX = <span class="number">0</span>;</div><div class="line">        mMove = <span class="number">0</span>;</div><div class="line">        notifyValueChange();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置用于接收结果的监听器</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> listener</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValueChangeListener</span><span class="params">(OnValueChangeListener listener)</span> </span>&#123;</div><div class="line">        mListener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取当前刻度值</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">        mWidth = getWidth();</div><div class="line">        mHeight = getHeight();</div><div class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">        drawScaleLine(canvas);</div><div class="line">        <span class="comment">// drawWheel(canvas);</span></div><div class="line">        drawMiddleLine(canvas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawWheel</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        Drawable wheel = getResources().getDrawable(R.drawable.bg_wheel);</div><div class="line">        wheel.setBounds(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</div><div class="line">        wheel.draw(canvas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从中间往两边开始画刻度线</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> canvas</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawScaleLine</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        canvas.save();</div><div class="line"></div><div class="line">        Paint linePaint = <span class="keyword">new</span> Paint();</div><div class="line">        linePaint.setStrokeWidth(<span class="number">2</span>);</div><div class="line">        linePaint.setColor(Color.BLACK);</div><div class="line"></div><div class="line">        TextPaint textPaint = <span class="keyword">new</span> TextPaint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">        textPaint.setTextSize(TEXT_SIZE * mDensity);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> width = mWidth, drawCount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">float</span> xPosition = <span class="number">0</span>, textWidth = Layout.getDesiredWidth(<span class="string">"0"</span>, textPaint);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; drawCount &lt;= <span class="number">4</span> * width; i++) &#123;</div><div class="line">            <span class="keyword">int</span> numSize = String.valueOf(mValue + i).length();</div><div class="line"></div><div class="line">            xPosition = (width / <span class="number">2</span> - mMove) + i * mLineDivider * mDensity;</div><div class="line">            <span class="keyword">if</span> (xPosition + getPaddingRight() &lt; mWidth) &#123;</div><div class="line">                <span class="keyword">if</span> ((mValue + i) % mModType == <span class="number">0</span>) &#123;</div><div class="line">                    canvas.drawLine(xPosition, getPaddingTop(), xPosition, mDensity * ITEM_MAX_HEIGHT, linePaint);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (mValue + i &lt;= mMaxValue) &#123;</div><div class="line">                        <span class="keyword">switch</span> (mModType) &#123;</div><div class="line">                            <span class="keyword">case</span> MOD_TYPE_HALF:</div><div class="line">                                canvas.drawText(String.valueOf((mValue + i) / <span class="number">2</span>), countLeftStart(mValue + i, xPosition, textWidth), getHeight() - textWidth, textPaint);</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            <span class="keyword">case</span> MOD_TYPE_ONE:</div><div class="line">                                canvas.drawText(String.valueOf(mValue + i), xPosition - (textWidth * numSize / <span class="number">2</span>), getHeight() - textWidth, textPaint);</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                            <span class="keyword">default</span>:</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    canvas.drawLine(xPosition, getPaddingTop(), xPosition, mDensity * ITEM_MIN_HEIGHT, linePaint);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            xPosition = (width / <span class="number">2</span> - mMove) - i * mLineDivider * mDensity;</div><div class="line">            <span class="keyword">if</span> (xPosition &gt; getPaddingLeft()) &#123;</div><div class="line">                <span class="keyword">if</span> ((mValue - i) % mModType == <span class="number">0</span>) &#123;</div><div class="line">                    canvas.drawLine(xPosition, getPaddingTop(), xPosition, mDensity * ITEM_MAX_HEIGHT, linePaint);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (mValue - i &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">switch</span> (mModType) &#123;</div><div class="line">                            <span class="keyword">case</span> MOD_TYPE_HALF:</div><div class="line">                                canvas.drawText(String.valueOf((mValue - i) / <span class="number">2</span>), countLeftStart(mValue - i, xPosition, textWidth), getHeight() - textWidth, textPaint);</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            <span class="keyword">case</span> MOD_TYPE_ONE:</div><div class="line">                                canvas.drawText(String.valueOf(mValue - i), xPosition - (textWidth * numSize / <span class="number">2</span>), getHeight() - textWidth, textPaint);</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                            <span class="keyword">default</span>:</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    canvas.drawLine(xPosition, getPaddingTop(), xPosition, mDensity * ITEM_MIN_HEIGHT, linePaint);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            drawCount += <span class="number">2</span> * mLineDivider * mDensity;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        canvas.restore();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 计算没有数字显示位置的辅助方法</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> value</div><div class="line">     * <span class="doctag">@param</span> xPosition</div><div class="line">     * <span class="doctag">@param</span> textWidth</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">countLeftStart</span><span class="params">(<span class="keyword">int</span> value, <span class="keyword">float</span> xPosition, <span class="keyword">float</span> textWidth)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> xp = <span class="number">0f</span>;</div><div class="line">        <span class="keyword">if</span> (value &lt; <span class="number">20</span>) &#123;</div><div class="line">            xp = xPosition - (textWidth * <span class="number">1</span> / <span class="number">2</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            xp = xPosition - (textWidth * <span class="number">2</span> / <span class="number">2</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> xp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 画中间的红色指示线、阴影等。指示线两端简单的用了两个矩形代替</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> canvas</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawMiddleLine</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="comment">// TOOD 常量太多，暂时放这，最终会放在类的开始，放远了怕很快忘记</span></div><div class="line">        <span class="keyword">int</span> gap = <span class="number">12</span>, indexWidth = <span class="number">8</span>, indexTitleWidth = <span class="number">24</span>, indexTitleHight = <span class="number">10</span>, shadow = <span class="number">6</span>;</div><div class="line">        String color = <span class="string">"#66999999"</span>;</div><div class="line"></div><div class="line">        canvas.save();</div><div class="line"></div><div class="line">        Paint redPaint = <span class="keyword">new</span> Paint();</div><div class="line">        redPaint.setStrokeWidth(indexWidth);</div><div class="line">        redPaint.setColor(Color.RED);</div><div class="line">        canvas.drawLine(mWidth / <span class="number">2</span>, <span class="number">0</span>, mWidth / <span class="number">2</span>, mHeight, redPaint);</div><div class="line"></div><div class="line">        Paint ovalPaint = <span class="keyword">new</span> Paint();</div><div class="line">        ovalPaint.setColor(Color.RED);</div><div class="line">        ovalPaint.setStrokeWidth(indexTitleWidth);</div><div class="line">        canvas.drawLine(mWidth / <span class="number">2</span>, <span class="number">0</span>, mWidth / <span class="number">2</span>, indexTitleHight, ovalPaint);</div><div class="line">        canvas.drawLine(mWidth / <span class="number">2</span>, mHeight - indexTitleHight, mWidth / <span class="number">2</span>, mHeight, ovalPaint);</div><div class="line"></div><div class="line">        <span class="comment">// RectF ovalRectF = new RectF(mWidth / 2 - 10, 0, mWidth / 2 + 10, 4 *</span></div><div class="line">        <span class="comment">// mDensity); //TODO 椭圆</span></div><div class="line">        <span class="comment">// canvas.drawOval(ovalRectF, ovalPaint);</span></div><div class="line">        <span class="comment">// ovalRectF.set(mWidth / 2 - 10, mHeight - 8 * mDensity, mWidth / 2 +</span></div><div class="line">        <span class="comment">// 10, mHeight); //TODO</span></div><div class="line"></div><div class="line">        Paint shadowPaint = <span class="keyword">new</span> Paint();</div><div class="line">        shadowPaint.setStrokeWidth(shadow);</div><div class="line">        shadowPaint.setColor(Color.parseColor(color));</div><div class="line">        canvas.drawLine(mWidth / <span class="number">2</span> + gap, <span class="number">0</span>, mWidth / <span class="number">2</span> + gap, mHeight, shadowPaint);</div><div class="line"></div><div class="line">        canvas.restore();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> action = event.getAction();</div><div class="line">        <span class="keyword">int</span> xPosition = (<span class="keyword">int</span>) event.getX();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mVelocityTracker == <span class="keyword">null</span>) &#123;</div><div class="line">            mVelocityTracker = VelocityTracker.obtain();</div><div class="line">        &#125;</div><div class="line">        mVelocityTracker.addMovement(event);</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (action) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line"></div><div class="line">                mScroller.forceFinished(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">                mLastX = xPosition;</div><div class="line">                mMove = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                mMove += (mLastX - xPosition);</div><div class="line">                changeMoveAndValue();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">                countMoveEnd();</div><div class="line">                countVelocityTracker(event);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="comment">// break;</span></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mLastX = xPosition;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">countVelocityTracker</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        mVelocityTracker.computeCurrentVelocity(<span class="number">1000</span>);</div><div class="line">        <span class="keyword">float</span> xVelocity = mVelocityTracker.getXVelocity();</div><div class="line">        <span class="keyword">if</span> (Math.abs(xVelocity) &gt; mMinVelocity) &#123;</div><div class="line">            mScroller.fling(<span class="number">0</span>, <span class="number">0</span>, (<span class="keyword">int</span>) xVelocity, <span class="number">0</span>, Integer.MIN_VALUE, Integer.MAX_VALUE, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeMoveAndValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> tValue = (<span class="keyword">int</span>) (mMove / (mLineDivider * mDensity));</div><div class="line">        <span class="keyword">if</span> (Math.abs(tValue) &gt; <span class="number">0</span>) &#123;</div><div class="line">            mValue += tValue;</div><div class="line">            mMove -= tValue * mLineDivider * mDensity;</div><div class="line">            <span class="keyword">if</span> (mValue &lt;= <span class="number">0</span> || mValue &gt; mMaxValue) &#123;</div><div class="line">                mValue = mValue &lt;= <span class="number">0</span> ? <span class="number">0</span> : mMaxValue;</div><div class="line">                mMove = <span class="number">0</span>;</div><div class="line">                mScroller.forceFinished(<span class="keyword">true</span>);</div><div class="line">            &#125;</div><div class="line">            notifyValueChange();</div><div class="line">        &#125;</div><div class="line">        postInvalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">countMoveEnd</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> roundMove = Math.round(mMove / (mLineDivider * mDensity));</div><div class="line">        mValue = mValue + roundMove;</div><div class="line">        mValue = mValue &lt;= <span class="number">0</span> ? <span class="number">0</span> : mValue;</div><div class="line">        mValue = mValue &gt; mMaxValue ? mMaxValue : mValue;</div><div class="line"></div><div class="line">        mLastX = <span class="number">0</span>;</div><div class="line">        mMove = <span class="number">0</span>;</div><div class="line"></div><div class="line">        notifyValueChange();</div><div class="line">        postInvalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyValueChange</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mListener) &#123;</div><div class="line">            <span class="keyword">if</span> (mModType == MOD_TYPE_ONE) &#123;</div><div class="line">                mListener.onValueChange(mValue);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (mModType == MOD_TYPE_HALF) &#123;</div><div class="line">                mListener.onValueChange(mValue / <span class="number">2f</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.computeScroll();</div><div class="line">        <span class="keyword">if</span> (mScroller.computeScrollOffset()) &#123;</div><div class="line">            <span class="keyword">if</span> (mScroller.getCurrX() == mScroller.getFinalX()) &#123; <span class="comment">// over</span></div><div class="line">                countMoveEnd();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> xPosition = mScroller.getCurrX();</div><div class="line">                mMove += (mLastX - xPosition);</div><div class="line">                changeMoveAndValue();</div><div class="line">                mLastX = xPosition;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」对App进行代码混淆]]></title>
      <url>/1970/01/01/%5BAndroid%5D%E5%AF%B9App%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/</url>
      <content type="html"><![CDATA[<p>接到一个新的任务，对现有项目进行代码混淆。之前对混淆有过一些了解，但是不够详细和完整，知道有些东西混淆起来还是比较棘手的。不过幸好目前的项目不是太复杂（针对混淆这块来说），提前完成～～ 现总结之。</p>
<h2 id="0x01-第一部分"><a href="/1970/01/01/[Android]对App进行代码混淆/#0x01-第一部分" class="headerlink" title="0x01 第一部分"></a>0x01 第一部分</h2><p>介绍下操作流程（eclipse）：</p>
<ul>
<li><p>打开混淆器</p>
<p>  找到项目根目录下的 <code>project.properties</code> 文件<br>  <code>#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt</code><br>  将上面这行前的 <code>#</code> 删除即可</p>
</li>
<li><p>修改混淆配置文件</p>
<p>  找到项目根目录下的 <code>proguard-project.txt</code> 文件，修改其中代码，这部分是最关键</p>
</li>
<li><p>保存相关文件供以后出错时使用</p>
<p>  主要有导出的apk文件、项目根目录下的proguard目录下的文件（主要的是mapping.txt）和项目源码</p>
</li>
<li><p>项目运行过程出错处理</p>
<p>  根据错误信息和第3步中保存的mapping定位错误位置</p>
</li>
</ul>
<p>知道这些之后，我们对其进行展开。</p>
<p>打开eclipse然后新建一个项目，默认会创建 <code>proguard-project.txt</code> 和<code>project.properties</code>。编写我们的代码，修改 <code>proguard-project.txt</code> ：</p>
<p><code>#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt</code></p>
<p><code>:proguard-project.txt</code> </p>
<p>将这行前的 <code>#</code> 删除，最后导出即可实现对代码的混淆（即使我们没有去编写proguard-<br>project.txt中的内容）。下面是我的测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mName;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        mName = <span class="string">"ttdevs"</span>;</div><div class="line"></div><div class="line">        getString(mName);</div><div class="line">        setName(mName);</div><div class="line">        showDialog();</div><div class="line">        <span class="comment">// testError();</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"I'm "</span> + name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showDialog</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                ScoreAlertDialog.showDialog(MainActivity.<span class="keyword">this</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">2000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreAlertDialog</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showDialog</span><span class="params">(<span class="keyword">final</span> Activity activity)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (activity.isFinishing()) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(activity);</div><div class="line">                builder.setTitle(<span class="string">"alert_title"</span>);</div><div class="line">                builder.setNegativeButton(<span class="string">"cancel"</span>, <span class="keyword">null</span>);</div><div class="line">                builder.setPositiveButton(<span class="string">"submit"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            Toast.makeText(activity, <span class="string">"Welcome"</span>, Toast.LENGTH_LONG).show();</div><div class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                builder.show();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testError</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">int</span> error = <span class="number">1</span> / <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打包，反编译，最后我们得到如下的代码：</p>
<p><img src="http://img.blog.csdn.net/20140928202555529?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<p>分析上面的代码我们会发现，自定义的方法名都被替换成无特殊意义的短字母，而activity的onCreate()方法却没变；最后一个testError()方法由于我们没有调用也被剔除掉了。这些就是默认的混淆处理策略。看到这里，感觉混淆还是小case的哈～～</p>
<p>继续往下，我们将注销的testError()打开，打包运行这个时候会报错，错误信息如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">java.lang.ArithmeticException: divide by zero</div><div class="line">	at com.ttdevs.proguard.MainActivity.b(Unknown Source)</div><div class="line">	at com.ttdevs.proguard.MainActivity.onCreate(Unknown Source)</div><div class="line">	at android.app.Activity.performCreate(Activity.java:<span class="number">4531</span>)</div><div class="line">	at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:<span class="number">1071</span>)</div><div class="line">	at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:<span class="number">2150</span>)</div><div class="line">	at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:<span class="number">2229</span>)</div><div class="line">	at android.app.ActivityThread.access$<span class="number">600</span>(ActivityThread.java:<span class="number">139</span>)</div><div class="line">	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:<span class="number">1261</span>)</div><div class="line">	at android.os.Handler.dispatchMessage(Handler.java:<span class="number">99</span>)</div><div class="line">	at android.os.Looper.loop(Looper.java:<span class="number">154</span>)</div><div class="line">	at android.app.ActivityThread.main(ActivityThread.java:<span class="number">4945</span>)</div><div class="line">	at java.lang.reflect.Method.invokeNative(Native Method)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:<span class="number">511</span>)</div><div class="line">	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">784</span>)</div><div class="line">	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">551</span>)</div><div class="line">	at dalvik.system.NativeStart.main(Native Method)</div></pre></td></tr></table></figure>
<p>由于这个例子比较简单，很容易看出来是何地方出了问题，不过还是可以用来说明我们想表达的问题：如何还原混淆后的代码的错误信息？<br>为了达到这个目的，我们需要三个文件:</p>
<ul>
<li>android-sdk-windows\tools\proguard\bin\retrace.bat</li>
<li>mapping.txt</li>
<li>log.info（上面的错误信息）</li>
</ul>
<p>然后执行下面的命令（window系统）</p>
<p><code>retrace.bat mapping.txt log.txt</code></p>
<p><img src="http://img.blog.csdn.net/20140928221717551?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<p>从上图中可以很清楚的看到错误日志中的b()方法为我们实际代码中的setName()方法。</p>
<p>这里需要注意的是每次导出apk都会在项目中目录下的proguard文件夹下生成一个对应的mapping.txt 文件，所以对于每个apk我们都需要保存与之对应的mapping.txt文件。至此整个混淆的流程介绍完毕。</p>
<h3 id="参考"><a href="/1970/01/01/[Android]对App进行代码混淆/#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li>官方文档</li>
</ul>
<p><a href="http://developer.android.com/tools/help/proguard.html" target="_blank" rel="external">http://developer.android.com/tools/help/proguard.html</a></p>
<ul>
<li>官方文档的翻译</li>
</ul>
<p><a href="http://www.cnblogs.com/over140/archive/2011/04/22/2024528.html" target="_blank" rel="external">http://www.cnblogs.com/over140/archive/2011/04/22/2024528.html</a></p>
<p>（本想自己去翻一个，结果发现很久以前农民伯伯已经翻译，在此直接引用并感谢之）</p>
<h2 id="0x02-第二部分"><a href="/1970/01/01/[Android]对App进行代码混淆/#0x02-第二部分" class="headerlink" title="0x02 第二部分"></a>0x02 第二部分</h2><p>第一部分讲了如何操作，参照官方文档，基本都会掌握。剩下的也是最难的就是 <code>proguard-project.txt</code> 文件的编写。对于这部分，两种处理策略：自己编写<br>和使用别人写好的。先说如何使用别人写好的，我们引用的第三方库无论开源还是闭源如有特殊情况我们都可以在他的User Guide中找到混淆代码的配置，如我们引用的大名鼎鼎的 <a href="https://github.com/guillep/PullToRefresh" target="_blank" rel="external">guillep PullToRefresh</a> ，我们可以在<a href="https://github.com/guillep/PullToRefresh/blob/master/PullToRefresh/proguard.cfg" target="_blank" rel="external">他的文档</a> 中找到如下的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">-optimizationpasses <span class="number">5</span></div><div class="line">-dontusemixedcaseclassnames</div><div class="line">-dontskipnonpubliclibraryclasses</div><div class="line">-dontpreverify</div><div class="line">-verbose</div><div class="line">-optimizations !code/simplification/arithmetic,!field<span class="comment">/*,!class/merging/*</span></div><div class="line">    </div><div class="line">-keep public class * extends android.app.Activity</div><div class="line">-keep public class * extends android.app.Application</div><div class="line">-keep public class * extends android.app.Service</div><div class="line">-keep public class * extends android.content.BroadcastReceiver</div><div class="line">-keep public class * extends android.content.ContentProvider</div><div class="line">-keep public class * extends android.app.backup.BackupAgentHelper</div><div class="line">-keep public class * extends android.preference.Preference</div><div class="line">-keep public class com.android.vending.licensing.ILicensingService</div><div class="line">    </div><div class="line">-keepclasseswithmembernames class * &#123;</div><div class="line">   native &lt;methods&gt;;</div><div class="line">&#125;</div><div class="line">    </div><div class="line">-keepclasseswithmembernames class * &#123;</div><div class="line">   public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</div><div class="line">&#125;</div><div class="line">    </div><div class="line">-keepclasseswithmembernames class * &#123;</div><div class="line">   public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</div><div class="line">&#125;</div><div class="line">    </div><div class="line">-keepclassmembers enum * &#123;</div><div class="line">   public static **[] values();</div><div class="line">   public static ** valueOf(java.lang.String);</div><div class="line">&#125;</div><div class="line">    </div><div class="line">-keep class * implements android.os.Parcelable &#123;</div><div class="line"> public static final android.os.Parcelable$Creator *;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有了这部分代码我们就可以直接copy插入我们的项目中即可。这种方式还是copy式的。那下面我们举个小例子看看如何自己写代码控制是否混淆。还是用第一部分的例子，我们在这个项目的 proguard-project.txt 文件中（之前为空）加入如下几行（proguard-project.txt中“#”代表注释）：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># -keep public class com.ttdevs.proguard.** &#123; *; &#125;</div><div class="line"># -keepclasseswithmembers public class com.ttdevs.proguard.** &#123; *; &#125;</div><div class="line">    </div><div class="line">-keep public class com.ttdevs.proguard.MainActivity &#123;</div><div class="line">java.lang.String getString(java.lang.String);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们导出apk再反编译，得到如下代码：</p>
<p><img src="http://img.blog.csdn.net/20140928225529585?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<p>和之前的对比，我们发现其中的getString方法没有被混淆。没错，上面 proguard-project.txt的意思就是保持MainActivity的getString()方法不要被混淆。大家也可以试试上述混淆代码中被注释的两行分别是什么效果。</p>
<p>讲到这里已经开始涉及ProGuard的核心部分了，剩下的就是研读 <a href="http://proguard.sourceforge.net" target="_blank" rel="external">ProGuard的文档</a> ，掌握的他的语法并使用之。本想找一个完整的ProGuard的翻译文档，但是找了N久没有发现一个，而且连零零散散的翻译也非常的少，最近时间很紧，加之能力有限，想翻译一下常用的几个命令也是很困，所以细读的想法只能暂时往后推了。这里先简单介绍下keep命令：</p>
<p><a href="http://proguard.sourceforge.net/manual/usage.html#keep" target="_blank" rel="external">-keep [,modifier,…] class_specification</a></p>
<p>在你的代码中指定作为切入点而被保留的类或者类的成员（属性和方法）。例如，为了保持一个应用，你可以指定主类和他的main方法。为了处理一个库，你需要详细说明他的public访问的元素。  </p>
<p><a href="http://proguard.sourceforge.net/manual/usage.html#keepoverview" target="_blank" rel="external">另外还有keep的简单概述</a> 和 <a href="http://proguard.sourceforge.net/manual/usage.html#classspecification" target="_blank" rel="external">语法中规范</a> 。</p>
<p>Class Specification中会告诉你如何表示构造方法，属性和方法，<code>*</code> 与<code>**</code>的区别等等。比如 <code>*</code> 表示匹配任何的类名但是不包括包的分隔符，而 <code>**</code> 则是匹配任何的类名并且包括任意数量的包分隔符，因此上面我们注释掉的代码意思如下：</p>
<ul>
<li><p>第一行 </p>
<p>  保持com.ttdevs.proguard下的所有类和子包下的类的所有方法都不混淆</p>
</li>
<li><p>第二行</p>
<p>  保持com.ttdevs.proguard下的所有类和子包下的类的所有方法和成员变量都不混淆。</p>
</li>
</ul>
<p>// TODO 细节还有很多，比如-libraryjars、-dontwarn、-keepattributes等等，这些待续吧</p>
<h3 id="参考-1"><a href="/1970/01/01/[Android]对App进行代码混淆/#参考-1" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p>ProGuard 5.0</p>
<p>  <a href="http://proguard.sourceforge.net/" target="_blank" rel="external">ProGuard 5.0</a> </p>
</li>
<li><p>ProGuard 4.7</p>
<p>  <a href="https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html" target="_blank" rel="external">ProGuard 4.7</a> </p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Flask」0x01FlaskMail]]></title>
      <url>/1970/01/01/%5BFlask%5D0x01FlaskMail/</url>
      <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="/1970/01/01/[Flask]0x01FlaskMail/#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><blockquote>
<p>Welcome to Flask-Mail, you can use to send mail in your web site.</p>
</blockquote>
<p>Flask-Mail 提供了一个简单的接口，让我们可以方便的在 Flask 应用中使用 SMTP协议 发送邮件。</p>
<h2 id="0x01-安装"><a href="/1970/01/01/[Flask]0x01FlaskMail/#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h2><p><code>pip install Flask-Mail</code></p>
<p>目前最新版本是 0.9.1 ，从 <a href="https://github.com/mattupstate/flask-mail" target="_blank" rel="external">Flask-Mail的github地址</a>可以发现，两年没有更新了。不过这个并不影响我们使用，毕竟发送邮件是个比较成熟的东西，只祈求和最新的Flask不要出现兼容问题即可。</p>
<p>如果你不想使用这个工具，可以找找其他的，不过你会发现，其他的可能更老，也是醉了=_=</p>
<p>如果时间充足，我们可以去读读 Flask-Mail 的源码，你会发现，最终是用系统自带的 smtplib 实现的。</p>
<h2 id="0x02-使用"><a href="/1970/01/01/[Flask]0x01FlaskMail/#0x02-使用" class="headerlink" title="0x02 使用"></a>0x02 使用</h2><p>一句话总结：Flask-Mail 的使用还是相当easy的。</p>
<h3 id="配置"><a href="/1970/01/01/[Flask]0x01FlaskMail/#配置" class="headerlink" title="配置"></a>配置</h3><p>Flask-Mail 使用 Flask 标准的配置 API 进行配置。下面是所有的配置选项：</p>
<ul>
<li>MAIL_SERVER : 默认为 ‘127.0.0.1’</li>
<li>MAIL_PORT : 默认为 25</li>
<li>MAIL_USE_TLS : 默认为 False</li>
<li>MAIL_USE_SSL : 默认为 False</li>
<li>MAIL_DEBUG : 默认为 app.debug</li>
<li>MAIL_USERNAME : 默认为 None</li>
<li>MAIL_PASSWORD : 默认为 None</li>
<li>MAIL_DEFAULT_SENDER : 默认为 None</li>
<li>MAIL_MAX_EMAILS : 默认为 None</li>
<li>MAIL_SUPPRESS_SEND : 默认为 app.testing</li>
<li>MAIL_ASCII_ATTACHMENTS : 默认为 False</li>
</ul>
<p>这个配置的参数我们可以在<a href="https://github.com/mattupstate/flask-mail/blob/master/flask_mail.py" target="_blank" rel="external">这里</a>看到。</p>
<h3 id="初始化"><a href="/1970/01/01/[Flask]0x01FlaskMail/#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>可以使用下面的两种方式进行初始化：</p>
<ul>
<li><p>第一种方式：</p>
<p>  使用传入到 Mail 实例中的应用程序的配置项进行邮件发送</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">mail = Mail(app)</div></pre></td></tr></table></figure>
</li>
<li><p>第二种方式：</p>
<p>  使用 Flask 的 current_app 中的配置项进行邮件发送，如果我们有多个 不同配置的应用程序 则使用此种方式比较方便</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mail = Mail()</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">mail.init_app(app)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="发送"><a href="/1970/01/01/[Flask]0x01FlaskMail/#发送" class="headerlink" title="发送"></a>发送</h3><p>发送之前我们需要先构建一个 Message 对象，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Message</div><div class="line"></div><div class="line">msg = Message(<span class="string">"Hello Flask"</span>, sender=<span class="string">"ttdevs@gmail.com"</span>,  recipients=[<span class="string">"ttdevs@live.com"</span>])</div></pre></td></tr></table></figure>
<p>我们也可以同时指定多个收件人</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msg.recipients = [<span class="string">"ttdevs@gmail.com"</span>, <span class="string">"ttdevs@foxmail.com"</span>]</div><div class="line">msg.add_recipient(<span class="string">"ttdevs@live.com"</span>)</div></pre></td></tr></table></figure>
<p>如果我们配置了 <code>MAIL_DEFAULT_SENDER</code> 字段，就可以不再设置 sender ，这个时候会使用  <code>MAIL_DEFAULT_SENDER</code> 中指定的发件人，像这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msg = Message(<span class="string">"Hello Flask"</span>, recipients=[<span class="string">"ttdevs@live.com"</span>])</div></pre></td></tr></table></figure>
<p>如果我们希望在收件列表中显示一个名字，可以通过一个二元祖来指定：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msg = Message(<span class="string">"Hello"</span>, sender=(<span class="string">"ttdevs"</span>, <span class="string">"ttdevs@live.com"</span>))</div></pre></td></tr></table></figure>
<p>同时， 我们还可以指定下面两个字段：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msg.body = <span class="string">"this is body string"</span></div><div class="line">msg.html = <span class="string">"&lt;h2&gt;this is html message&lt;/b&gt;"</span></div></pre></td></tr></table></figure>
<p>最后就是发送：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mail.send(msg)</div></pre></td></tr></table></figure>
<p>发送完毕后，与邮件服务器的链接就会关闭。</p>
<h3 id="发送大量邮件"><a href="/1970/01/01/[Flask]0x01FlaskMail/#发送大量邮件" class="headerlink" title="发送大量邮件"></a>发送大量邮件</h3><p>如果我们一次发送大量的邮件，可以通过下面的方式发送：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> mail.connect() <span class="keyword">as</span> conn:</div><div class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</div><div class="line">        message = <span class="string">'...'</span></div><div class="line">        subject = <span class="string">"hello, %s"</span> % user.name</div><div class="line">        msg = Message(recipients=[user.email],</div><div class="line">                      body=message,</div><div class="line">                      subject=subject)</div><div class="line">        conn.send(msg)</div></pre></td></tr></table></figure>
<p>与电子邮件服务器的连接会一直保持直到所有的邮件都已经发送完毕才会断开。</p>
<blockquote>
<p>Some mail servers set a limit on the number of emails sent in a single connection. You can set the max amount of emails to send before reconnecting by specifying theMAIL_MAX_EMAILS setting.</p>
</blockquote>
<h3 id="添加附件"><a href="/1970/01/01/[Flask]0x01FlaskMail/#添加附件" class="headerlink" title="添加附件"></a>添加附件</h3><p>在邮件中添加附件同样非常简单：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">image = <span class="string">'umbrella.jpg'</span></div><div class="line"><span class="keyword">with</span> app.open_resource(image) <span class="keyword">as</span> fp:</div><div class="line">    msg.attach(image, <span class="string">'image/jpg'</span>, fp.read())</div></pre></td></tr></table></figure>
<h2 id="0x03-Demo"><a href="/1970/01/01/[Flask]0x01FlaskMail/#0x03-Demo" class="headerlink" title="0x03 Demo"></a>0x03 Demo</h2><p>下面是一个简单的Demo，装好相关的类库， 直接可以跑，大家可以参考：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail</div><div class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Message</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.config[<span class="string">'MAIL_SERVER'</span>] = <span class="string">'smtp.qq.com'</span></div><div class="line">app.config[<span class="string">'MAIL_PORT'</span>] = <span class="number">465</span></div><div class="line">app.config[<span class="string">'MAIL_USE_SSL'</span>] = <span class="keyword">True</span></div><div class="line">app.config[<span class="string">'MAIL_USERNAME'</span>] = <span class="string">'iot.raspi@qq.com'</span></div><div class="line">app.config[<span class="string">'MAIL_PASSWORD'</span>] = <span class="string">'********'</span></div><div class="line">app.config[<span class="string">'MAIL_DEFAULT_SENDER'</span>] = <span class="string">'iot.raspi@qq.com'</span></div><div class="line"></div><div class="line">mail = Mail(app)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">welcome</span><span class="params">()</span>:</span></div><div class="line">    msg = Message(<span class="string">'这是一封测试邮件Header'</span>, recipients=[<span class="string">'56532799@qq.com'</span>])</div><div class="line">    msg.body = <span class="string">'这是一封测试邮件 bodyer'</span></div><div class="line">    msg.html = <span class="string">'这是一封测试邮件 htmler'</span></div><div class="line">    image = <span class="string">'umbrella_伞.jpg'</span></div><div class="line">    <span class="keyword">with</span> app.open_resource(image) <span class="keyword">as</span> fp:</div><div class="line">        msg.attach(image, <span class="string">'image/jpg'</span>, fp.read())</div><div class="line">    mail.send(msg)</div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello world!'</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(debug=tuple)</div></pre></td></tr></table></figure>
<h3 id="邮件参数说明"><a href="/1970/01/01/[Flask]0x01FlaskMail/#邮件参数说明" class="headerlink" title="邮件参数说明"></a>邮件参数说明</h3><p>上面的Demo中用到QQ邮箱，这里简单介绍下。由于QQ邮箱需要安全验证，所以我们配置下面几个参数：</p>
<ul>
<li><p>MAIL_SERVER</p>
<p>  SMTP地址：smtp.qq.com</p>
</li>
<li><p>MAIL_PORT</p>
<p>  由于需要安全验证，所以此处用465</p>
</li>
<li><p>MAIL_USE_SSL：True</p>
<p>  SSL，走加密方式</p>
</li>
<li><p>MAIL_USERNAME</p>
<p>  iot.raspi@qq.com</p>
</li>
<li><p>MAIL_PASSWORD</p>
<p>  这个地方我们需要使用授权码：<br>  打开 <code>QQ邮箱</code> &gt; <code>设置</code> &gt; <code>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务</code> &gt; <code>生成授权码</code></p>
</li>
</ul>
<p>最后别忘了打开SMTP服务～～</p>
<h2 id="0x04-其他"><a href="/1970/01/01/[Flask]0x01FlaskMail/#0x04-其他" class="headerlink" title="0x04 其他"></a>0x04 其他</h2><p>（TODO 留坑，其实暂时还没学到～～）</p>
<h3 id="单元测试"><a href="/1970/01/01/[Flask]0x01FlaskMail/#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><h3 id="禁止发送邮件"><a href="/1970/01/01/[Flask]0x01FlaskMail/#禁止发送邮件" class="headerlink" title="禁止发送邮件"></a>禁止发送邮件</h3><h3 id="头注入"><a href="/1970/01/01/[Flask]0x01FlaskMail/#头注入" class="headerlink" title="头注入"></a>头注入</h3><h3 id="信号量"><a href="/1970/01/01/[Flask]0x01FlaskMail/#信号量" class="headerlink" title="信号量"></a>信号量</h3><h3 id="API"><a href="/1970/01/01/[Flask]0x01FlaskMail/#API" class="headerlink" title="API"></a>API</h3><h2 id="0xFF-参考"><a href="/1970/01/01/[Flask]0x01FlaskMail/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="http://pythonhosted.org/Flask-Mail/" target="_blank" rel="external">http://pythonhosted.org/Flask-Mail/</a></li>
<li><a href="http://www.pythondoc.com/flask-mail/" target="_blank" rel="external">http://www.pythondoc.com/flask-mail/</a></li>
<li><a href="https://pypi.python.org/pypi/Flask-Mail/" target="_blank" rel="external">https://pypi.python.org/pypi/Flask-Mail/</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Flask」0x03树莓派上使用Nginx和uWSGI部署Flask应用]]></title>
      <url>/1970/01/01/%5BFlask%5D0x03%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E4%BD%BF%E7%94%A8Nginx%E5%92%8CuWSGI%E9%83%A8%E7%BD%B2Flask%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="0x00-部署：uWSGI-和-Nginx-介绍"><a href="/1970/01/01/[Flask]0x03树莓派上使用Nginx和uWSGI部署Flask应用/#0x00-部署：uWSGI-和-Nginx-介绍" class="headerlink" title="0x00 部署：uWSGI 和 Nginx 介绍"></a>0x00 部署：uWSGI 和 Nginx 介绍</h2><p>Deploy Flask Application with Nginx and uWSGI</p>
<p>考虑到部署的问题，相信您已经完成了自己Flask应用的开发工作，或者跟我一样，一个demo 应用已经完成。好奇自己的应用如何发布出去。接下来，通过介绍一些常用的工具来完成我们应用的部署。先简单介绍下我的环境：</p>
<ul>
<li>一台内网中的树莓派</li>
<li>一个花生棒(98RMB买的硬件)</li>
</ul>
<p>使用花生棒做了内网的端口映射，对外暴露80端口提供http服务，至于为什么这么做，请参考<a href="http://www.jianshu.com/p/9855c15a1dd7" target="_blank" rel="external">这里</a>。</p>
<p>好了，接下来进入正题。</p>
<p>uWSGI作为Web服务器使用，nginx做反向代理。</p>
<h3 id="uWSGI"><a href="/1970/01/01/[Flask]0x03树莓派上使用Nginx和uWSGI部署Flask应用/#uWSGI" class="headerlink" title="uWSGI"></a>uWSGI</h3><p>uWSGI做Web服务器</p>
<p>《Flask Web开发：基于Python的Web应用开发实战》有下面两段描述：</p>
<p>其一：</p>
<blockquote>
<p>Flask自带的开发Web服务器不够强健、安全和高效，无法在生产环境中使用。</p>
</blockquote>
<p>其二：</p>
<blockquote>
<p>Flask自带的开发Web服务器表现很差，因为它不是为生产环境设计的服务器。有两个可以在生产环境中使用、性能良好且支持Flask程序的服务器，分别是Gunicorn(<a href="http://gunicorn.org/" target="_blank" rel="external">http://gunicorn.org/</a>) 和 uWSGI(<a href="http://uwsgi-docs.readthedocs.org/en/latest/" target="_blank" rel="external">http://uwsgi-docs.readthedocs.org/en/latest/</a>) 。</p>
</blockquote>
<p>先介绍一下WSGI（from：<a href="https://zh.wikipedia.org/wiki/Web服务器网关接口" target="_blank" rel="external">维基百科</a>）：</p>
<blockquote>
<p>Web服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI）是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。自从WSGI被开发出来以后，许多其它语言中也出现了类似接口。<br>以前，如何选择合适的Web应用程序框架成为困扰Python初学者的一个问题，这是因为，一般而言，Web应用框架的选择将限制可用的Web服务器的选择，反之亦然。那时的Python应用程序通常是为CGI，FastCGI，mod_python中的一个而设计，甚至是为特定Web服务器的自定义的API接口而设计的。<br>WSGI[1] （有时发音作’wiz-gee’）是作为Web服务器与Web应用程序或应用框架之间的一种低级别的接口，以提升可移植Web应用开发的共同点。WSGI是基于现存的CGI标准而设计的。</p>
</blockquote>
<p>因此我们需要为我们的Flask应用配置一个 <code>Web服务器</code> 。《Flask Web开发》中介绍的部署到Heroku选择的是Gunicorn。Gunicorn  和 uWSGI 的比较网上很多，主要的问题可能就是谁的坑多坑少。经过比对，这里我选择uWSGI。</p>
<p>uWSGI 不仅仅是一个协议，同时也是一个应用服务器，可以服务于uWSGI、FastCGI和HTTP协议。uWSGI官方文档可参考<a href="http://uwsgi-docs.readthedocs.io/en/latest/" target="_blank" rel="external">这里</a> 。</p>
<p>支持WSGI的Web应用框架很多，比如：</p>
<ul>
<li>Django</li>
<li>Flask</li>
<li>web.py</li>
<li>web2py</li>
<li>Werkzeug</li>
<li>Tornado</li>
<li>and so on</li>
</ul>
<h3 id="Nginx"><a href="/1970/01/01/[Flask]0x03树莓派上使用Nginx和uWSGI部署Flask应用/#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>nginx做反向代理 </p>
<blockquote>
<p>Nginx（发音同engine x）是一个网页服务器，它能反向代理HTTP, HTTPS, SMTP, POP3, IMAP的协议链接，以及一个负载均衡器和一个HTTP缓存。</p>
<p>Nginx是一款面向性能设计的HTTP服务器，相较于Apache、lighttpd具有占有内存少，稳定性高等优势。与旧版本（&lt;=2.2）的Apache不同，nginx不采用每客户机一线程的设计模型，而是充分使用异步逻辑，削减了上下文调度开销，所以并发服务能力更强。整体采用模块化设计，有丰富的模块库和第三方模块库，配置灵活。 在Linux操作系统下，nginx使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。</p>
<p>Nginx在官方测试的结果中，能够支持五万个平行连接，而在实际的运作中，是可以支持二万至四万个平行链接。</p>
</blockquote>
<p>以上来信息自<a href="https://zh.wikipedia.org/wiki/Nginx" target="_blank" rel="external">维基百科</a>。</p>
<p>反向代理：</p>
<blockquote>
<p>使用代理服务器可以将请求转发给内部的Web服务器，使用这种加速模式显然可以提升静态网页的访问速度。因此也可以考虑使用这种技术，让代理服务器将请求 均匀转发给多台内部Web服务器之一上，从而达到负载均衡的目的。这种代理方式与普通的代理方式有所不同，标准代理方式是客户使用代理访问多个外部Web 服务器，而这种代理方式是多个客户使用它访问内部Web服务器，因此也被称为反向代理模式。</p>
</blockquote>
<p>参考：<a href="http://www.bing.com/knows/反向代理负载均衡" target="_blank" rel="external">http://www.bing.com/knows/反向代理负载均衡</a></p>
<p>虽然你可能不知道Nginx是做什么的，但是你应该听过，再或者你至少听过Apache，他们都是HTTP服务器。恕我能力有限，目前为止并不能很好的解释为什么非得用Nginx，能告诉大家的是：Nginx帮我们处理很多静态资源，同时将动态请求转发给不同的Web服务器（负载均衡）。此处留坑，等以后补上。</p>
<p>接下来通过最简单的配置，将我们的Flask应用部署到我们的树莓派上，达到对部署的流程有个总体把握的目的。如果你需要更多的配置，可以参考各自部分的官方文档。</p>
<h2 id="0x01-uWSGI"><a href="/1970/01/01/[Flask]0x03树莓派上使用Nginx和uWSGI部署Flask应用/#0x01-uWSGI" class="headerlink" title="0x01 uWSGI"></a>0x01 uWSGI</h2><ul>
<li><p>安装</p>
<p>  先从安装说起：<code>pip install uwsgi</code></p>
</li>
<li><p>配置</p>
<p>  在我们项目的根目录下，创建 <code>uwsgi.ini</code> 文件， 内容如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[uwsgi]</div><div class="line">socket = 127.0.0.1:5000</div><div class="line">processes = 4</div><div class="line">threads = 2</div><div class="line">plugins = python3</div><div class="line">master = true</div><div class="line">venv = venv</div><div class="line">pythonpath = .</div><div class="line">module = manage</div><div class="line">callable = application</div></pre></td></tr></table></figure>
<p>  配置参数说明：</p>
<ul>
<li>socket：应用程序所在地址，IP加端口号，当然，也可以有其他的形式</li>
<li>processes：开启的进程数量</li>
<li>threads：每个进程的线程数</li>
<li>plugins：加载的插件</li>
<li>module：加载指定的python WSGI模块</li>
<li><p>callable：在收到请求时，uWSGI加载的模块中哪个变量将被调用，默认是名字为“application”的变量。</p>
<p>顺便贴一下我的Flask项目文件：manage.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">from</span> flask.ext.script <span class="keyword">import</span> Manager</div><div class="line">config = <span class="string">'development'</span></div><div class="line">application = create_app(config)</div><div class="line">manager = Manager(application)</div><div class="line">...</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">        manager.run()</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>操作</p>
<p>  启动：<code>uwsgi uwsig.ini</code>。如果启动成功，会看到类似下面的log：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">(venv)pi@raspberrypi:~/raspi $ uwsgi uwsgi.ini</div><div class="line">[uWSGI] getting INI configuration from uwsgi.ini</div><div class="line">open(&quot;./python3_plugin.so&quot;): No such file or directory [core/utils.c line 3684]</div><div class="line">!!! UNABLE to load uWSGI plugin: ./python3_plugin.so: cannot open shared object file: No such file or directory !!!</div><div class="line">*** Starting uWSGI 2.0.13.1 (32bit) on [Sun Jul  3 22:35:08 2016] ***</div><div class="line">compiled with version: 4.9.2 on 27 May 2016 15:15:57</div><div class="line">os: Linux-4.1.19-v7+ #858 树莓派 Tue Mar 15 15:56:00 GMT 2016</div><div class="line">nodename: raspberrypi</div><div class="line">machine: armv7l</div><div class="line">clock source: unix</div><div class="line">detected number of CPU cores: 4</div><div class="line">current working directory: /home/pi/raspi</div><div class="line">detected binary path: /home/pi/raspi/venv/bin/uwsgi</div><div class="line">!!! no internal routing support, rebuild with pcre support !!!</div><div class="line">your processes number limit is 6831</div><div class="line">your memory page size is 4096 bytes</div><div class="line">detected max file descriptor number: 65536</div><div class="line">lock engine: pthread robust mutexes</div><div class="line">thunder lock: disabled (you can enable it with --thunder-lock)</div><div class="line">uwsgi socket 0 bound to TCP address 127.0.0.1:5000 fd 3</div><div class="line">Python version: 3.4.2 (default, Oct 19 2014, 14:03:53)  [GCC 4.9.1]</div><div class="line">Set PythonHome to venv</div><div class="line">Python main interpreter initialized at 0xbaf828</div><div class="line">python threads support enabled</div><div class="line">your server socket listen backlog is limited to 100 connections</div><div class="line">your mercy for graceful operations on workers is 60 seconds</div><div class="line">mapped 358400 bytes (350 KB) for 8 cores</div><div class="line">*** Operational MODE: preforking+threaded ***</div><div class="line">added ./ to pythonpath.</div><div class="line">WSGI app 0 (mountpoint=&apos;&apos;) ready in 5 seconds on interpreter 0xbaf828 pid: 3418 (default app)</div><div class="line">*** uWSGI is running in multiple interpreter mode ***</div><div class="line">spawned uWSGI master process (pid: 3418)</div><div class="line">spawned uWSGI worker 1 (pid: 3428, cores: 2)</div><div class="line">spawned uWSGI worker 2 (pid: 3429, cores: 2)</div><div class="line">spawned uWSGI worker 3 (pid: 3431, cores: 2)</div><div class="line">spawned uWSGI worker 4 (pid: 3432, cores: 2)</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>- 停止

    - 如果还在同一个shell中，我们可以直接按 `Ctrl + C` 
    - 如果不在同一个shell中，可以这样结束掉 `killall -9 uwsgi`

启动成功之后就可以访问我们的Web应用了，默认地址是：http://127.0.0.1:5000 （这个地址和端口号是在我们的Flask应用中配配置的，这里不做介绍）。如果出现 `invalid request block size: 21573 (max 4096)...skip`这个错误，请将配置中的 `socket` 改为 `http`，具体可以参考[这里](http://stackoverflow.com/questions/15878176/uwsgi-invalid-request-block-size)。
</code></pre><h2 id="0x02-Nginx"><a href="/1970/01/01/[Flask]0x03树莓派上使用Nginx和uWSGI部署Flask应用/#0x02-Nginx" class="headerlink" title="0x02 Nginx"></a>0x02 Nginx</h2><ul>
<li><p>安装</p>
<p>  <code>sudo apt-get install ngnix</code></p>
</li>
<li><p>操作</p>
<ul>
<li><p>启动</p>
<p>  sudo /etc/init.d/nginx start<br>  sudo service nginx start</p>
</li>
<li><p>停止</p>
<p>  sudo /etc/init.d/nginx stop<br>  sudo service nginx stop</p>
</li>
<li><p>重启</p>
<p>  sudo /etc/init.d/nginx restart<br>  sudo service nginx restart</p>
<p>如果没问题，这个时候我们就可以打开浏览器访问：127.0.0.1，应该会看到一个静态页面。</p>
</li>
</ul>
</li>
<li><p>配置</p>
<p>  nginx 的配置文件时位于 <code>/etc/nginx/sites-available</code> 目录下的 <code>default</code> 文件，我们复制一份做修改，这里同样给一份最简单的配置：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line"></div><div class="line">    server_name ttdevs.vicp.net;</div><div class="line"></div><div class="line">    # access_log logs/access.log compression;</div><div class="line"></div><div class="line">    #默认请求</div><div class="line">    location / &#123;</div><div class="line">            include uwsgi_params;</div><div class="line">            uwsgi_pass 127.0.0.1:5000;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>配置好这些之后重启我们的nginx服务：`sudo service nginx restart`。即可访问我们的web应用了。    
</code></pre><h2 id="0x03-总结"><a href="/1970/01/01/[Flask]0x03树莓派上使用Nginx和uWSGI部署Flask应用/#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>如果中间没有出错，你的Flask应用已经部署成功。到此，我们来梳理下这个流程。首先，我们安装Nginx，他直接处理用户发送的HTTP请求（HTTP服务器），并将请求按照我们的配置（nginx中的配置）交给uWSGI服务器（Web服务器），最后uWSGI将请求交给我们的Flask应用，由Flask应用进行逻辑处理，处理完之后再将结果返回给用户。这些，就是我对这个流程的理解，相信中间肯定有错误或者不到位的地方，在对这些知识有更进一步理解的时候我会返回及时更新。同时也欢迎各位指正～～</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Flask]0x03树莓派上使用Nginx和uWSGI部署Flask应用/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="http://docs.jinkan.org/docs/flask/deploying/uwsgi.html" target="_blank" rel="external">http://docs.jinkan.org/docs/flask/deploying/uwsgi.html</a></li>
<li><a href="http://www.cnblogs.com/zhouej/archive/2012/03/25/2379646.html" target="_blank" rel="external">http://www.cnblogs.com/zhouej/archive/2012/03/25/2379646.html</a></li>
<li><a href="http://www.cnblogs.com/Ray-liang/p/4173923.html" target="_blank" rel="external">http://www.cnblogs.com/Ray-liang/p/4173923.html</a></li>
<li><a href="https://github.com/nginx/nginx/blob/master/conf/uwsgi_params" target="_blank" rel="external">https://github.com/nginx/nginx/blob/master/conf/uwsgi_params</a></li>
<li><a href="http://docs.jinkan.org/docs/flask/deploying/wsgi-standalone.html#deploying-proxy-setups" target="_blank" rel="external">http://docs.jinkan.org/docs/flask/deploying/wsgi-standalone.html#deploying-proxy-setups</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Python」使用requests处理cookie]]></title>
      <url>/1970/01/01/%5BPython%5D%E4%BD%BF%E7%94%A8requests%E5%A4%84%E7%90%86cookie/</url>
      <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/5e4574f4d470db274e80e7cb1464e426e643e084/687474703a2f2f646f63732e707974686f6e2d72657175657374732e6f72672f656e2f6d61737465722f5f7374617469632f72657175657374732d736964656261722e706e67" alt="requests"></p>
<h2 id="0x00-需求"><a href="/1970/01/01/[Python]使用requests处理cookie/#0x00-需求" class="headerlink" title="0x00 需求"></a>0x00 需求</h2><p>常见的 <code>application/json</code> 请求，如果token进行验证，我们可以在header或者body中直接添加，对于使用cookie进行验证的请求，虽然可以自己维护cookie，但是会比token麻烦很多。</p>
<p>之前的忘了请求都是使用python3的urllib进行，当处理cookie时，发现比较困难，因此着手另寻他法，这样就发现了requests。简单看了下，使用起来比urllib方便了好多，好多。不紧紧实现了手动添加cookie的需求，其他接口使用也是相当友好。有时间打算吧之前的代码重构一下。</p>
<p>下面简单介绍下requests的使用。</p>
<h2 id="0x01-requests"><a href="/1970/01/01/[Python]使用requests处理cookie/#0x01-requests" class="headerlink" title="0x01 requests"></a>0x01 requests</h2><h3 id="Request"><a href="/1970/01/01/[Python]使用requests处理cookie/#Request" class="headerlink" title="Request"></a>Request</h3><ul>
<li><p>GET</p>
<ul>
<li><p>无参数</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; r = requests.get(&apos;https://api.github.com/events&apos;)`</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>- url参数

    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; payload = &#123;&apos;key1&apos;: &apos;value1&apos;, &apos;key2&apos;: &apos;value2&apos;&#125;</div><div class="line">&gt;&gt;&gt; r = requests.get(&apos;http://httpbin.org/get&apos;, params=payload)</div><div class="line">&gt;&gt;&gt; print(r.url)</div><div class="line">http://httpbin.org/get?key2=value2&amp;key1=value1</div></pre></td></tr></table></figure>


    输出：

    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; print(r.url)</div><div class="line">http://httpbin.org/get?key2=value2&amp;key1=value1</div></pre></td></tr></table></figure>
</code></pre><ul>
<li>POST</li>
</ul>
<pre><code>- form参数

    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r = requests.post(&apos;http://httpbin.org/post&apos;, data = &#123;&apos;key&apos;:&apos;value&apos;&#125;)</div></pre></td></tr></table></figure>


- json参数

   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import json</div><div class="line">&gt;&gt;&gt; url = &apos;https://api.github.com/some/endpoint&apos;</div><div class="line">&gt;&gt;&gt; payload = &#123;&apos;some&apos;: &apos;data&apos;&#125;</div><div class="line">&gt;&gt;&gt; r = requests.post(url, data=json.dumps(payload))</div><div class="line">       ``` </div><div class="line">    </div><div class="line">    - file</div><div class="line">    </div><div class="line">        `TODO`</div><div class="line"></div><div class="line">- Other: </div><div class="line"></div><div class="line">    - PUT: `r = requests.put(&apos;http://httpbin.org/put&apos;, data = &#123;&apos;key&apos;:&apos;value&apos;&#125;)`</div><div class="line">    - DELETE: `r = requests.delete(&apos;http://httpbin.org/delete&apos;)`</div><div class="line">    - HEAD: `r = requests.head(&apos;http://httpbin.org/get&apos;)`</div><div class="line">    - OPTIONS: `r = requests.options(&apos;http://httpbin.org/get&apos;)`</div><div class="line">       </div><div class="line">- HEADER</div><div class="line"></div><div class="line">	``` shell</div><div class="line">&gt;&gt;&gt; url = &apos;https://api.github.com/some/endpoint&apos;</div><div class="line">&gt;&gt;&gt; headers = &#123;&apos;user-agent&apos;: &apos;my-app/0.0.1&apos;&#125;</div><div class="line">&gt;&gt;&gt; r = requests.get(url, headers=headers)</div></pre></td></tr></table></figure>
</code></pre><ul>
<li><p>COOKIES</p>
<p>  请求：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; url = &apos;http://httpbin.org/cookies&apos;</div><div class="line">&gt;&gt;&gt; cookies = dict(cookies_are=&apos;working&apos;)</div><div class="line">&gt;&gt;&gt; r = requests.get(url, cookies=cookies)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>   请求的数据：</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET /cookies HTTP/1.1</div><div class="line">Host: httpbin.org</div><div class="line">Connection: keep-alive</div><div class="line">User-Agent: python-requests/2.12.4</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Accept: */*</div><div class="line">Cookie: cookies_are=working</div></pre></td></tr></table></figure>
<h3 id="Response"><a href="/1970/01/01/[Python]使用requests处理cookie/#Response" class="headerlink" title="Response"></a>Response</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import requests</div><div class="line">&gt;&gt;&gt; response = requests.get(&apos;https://api.github.com/events&apos;)</div></pre></td></tr></table></figure>
<ul>
<li>response.url </li>
<li>response.encoding 编码</li>
<li>response.status_code 状态吗</li>
<li>response.headers headers</li>
<li>response.text 返回的文本</li>
<li>response.json() json</li>
<li>response.raw 原始数据</li>
<li>response.raise_for_status() 错误请求信息</li>
<li>response.cookies</li>
<li>response.history</li>
</ul>
<h2 id="0x03-总结"><a href="/1970/01/01/[Python]使用requests处理cookie/#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>使用过urllib的话，来看requests你会发现简单好多，同时支持python2 和 python3。</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Python]使用requests处理cookie/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ul>
<li><a href="https://pypi.python.org/pypi/requests" target="_blank" rel="external">https://pypi.python.org/pypi/requests</a></li>
<li><a href="http://docs.python-requests.org/en/master/" target="_blank" rel="external">http://docs.python-requests.org/en/master/</a></li>
<li><a href="https://github.com/kennethreitz/requests" target="_blank" rel="external">https://github.com/kennethreitz/requests</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Java」Java中获取本地IP和Port]]></title>
      <url>/1970/01/01/%5BJava%5DJava%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%9C%B0IP%E5%92%8CPort/</url>
      <content type="html"><![CDATA[<h2 id="0x00-问题"><a href="/1970/01/01/[Java]Java中获取本地IP和Port/#0x00-问题" class="headerlink" title="0x00 问题"></a>0x00 问题</h2><p>项目中要用到DatagramSocket，同时也要获取本地的IP和PORT，直接创建并获取端口获取的IP总是0.0.0.0，代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">private static void testGetDatagramSocket() &#123;</div><div class="line">	try &#123;</div><div class="line">		DatagramSocket socket = new DatagramSocket();</div><div class="line">		System.out.println(socket.getLocalSocketAddress());</div><div class="line">		socket.close();</div><div class="line">	&#125; catch (SocketException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">输出结果：</div><div class="line"></div><div class="line">`0.0.0.0/0.0.0.0:55816`</div><div class="line"></div><div class="line"></div><div class="line">## 0x01 解决</div><div class="line"></div><div class="line">查了些资料，比如查询可用端口并绑定，没有现成方法，好像实现不了。个中原因也没太多时间去细究，好像是还没和网卡关联（纯属个人YY）。由于项目对本地端口没有特别</div><div class="line">要求，自己写了一个方法获取DatagramSocket，如下：</div><div class="line"></div><div class="line">``` java</div><div class="line">/**</div><div class="line"> * 从最大端口开始向下遍历，有可能端口就返回</div><div class="line"> *</div><div class="line"> * @return DatagramSocket, 为null的可能性极小</div><div class="line"> */</div><div class="line">public static DatagramSocket getDatagramSocket() &#123;</div><div class="line">    DatagramSocket socket = null;</div><div class="line">    int port = 65535;</div><div class="line">    while (port &gt; 0) &#123;</div><div class="line">        try &#123;</div><div class="line">            socket = new DatagramSocket(new InetSocketAddress(InetAddress.getLocalHost(), --port));</div><div class="line">            System.out.println(port);</div><div class="line">            break;</div><div class="line">        &#125; catch (SocketException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            continue;</div><div class="line">        &#125; catch (UnknownHostException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            continue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return socket;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>出现异常继续运行，代价使用者自行斟酌。</p>
<h2 id="0x02-测试"><a href="/1970/01/01/[Java]Java中获取本地IP和Port/#0x02-测试" class="headerlink" title="0x02 测试"></a>0x02 测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        testGetDatagramSocket();</div><div class="line">        testGetUDPSocketInfo();</div><div class="line">        testGetLocalHost();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGetDatagramSocket</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</div><div class="line">            System.out.println(socket.getLocalSocketAddress());</div><div class="line">            socket.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGetUDPSocketInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        DatagramSocket socket = getDatagramSocket();</div><div class="line">        System.out.println(socket.getLocalSocketAddress());</div><div class="line">        socket.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从最大端口开始向下遍历，有可能端口就返回</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> DatagramSocket, 为null的可能性极小</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DatagramSocket <span class="title">getDatagramSocket</span><span class="params">()</span> </span>&#123;</div><div class="line">        DatagramSocket socket = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> port = <span class="number">65535</span>;</div><div class="line">        <span class="keyword">while</span> (port &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                socket = <span class="keyword">new</span> DatagramSocket(<span class="keyword">new</span> InetSocketAddress(InetAddress.getLocalHost(), --port));</div><div class="line">                System.out.println(port);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> socket;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGetLocalHost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            InetAddress address = InetAddress.getLocalHost();</div><div class="line">            System.out.println(address.getHostAddress());</div><div class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Python」Python中的Thread Local]]></title>
      <url>/1970/01/01/%5BPython%5DPython%E4%B8%AD%E7%9A%84Thread%20Local/</url>
      <content type="html"><![CDATA[<p>在线程内部，我们可能会用到线程内部的全局变量，这个也是比较常用的，因为可以全局访问。但是，如果线程内部的方法比较多，这个时候就需要我们一层层的传递，一层还好，二层三层甚至更多的时候就比较郁闷了。如果不传递，那么我们可能很难拿到线程内部的全局变量，这个时候我们就希望有个应用内的全局变量，供我们随时调用，thread local就可以满足我们的需求。看一个demo：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line">local = threading.local()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">end_learning</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'%s is finish.(Current Thread: %s)'</span> % (local.name, threading.current_thread().name))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_learning</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'%s is learning.(Current Thread: %s)'</span> % (local.name, threading.current_thread().name))</div><div class="line">    end_learning()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">learn_python</span><span class="params">(name)</span>:</span></div><div class="line">    local.name = name</div><div class="line">    start_learning()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    thread1 = threading.Thread(target=learn_python, args=(<span class="string">'ttdevs1'</span>,), name=<span class="string">'Thread-A'</span>)</div><div class="line">    thread1.start()</div><div class="line"></div><div class="line">    thread2 = threading.Thread(target=learn_python, args=(<span class="string">'ttdevs2'</span>,), name=<span class="string">'Thread-B'</span>)</div><div class="line">    thread2.start()</div></pre></td></tr></table></figure>
<p>执行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ttdevs1 is learning.(Current Thread: Thread-A)</div><div class="line">ttdevs1 is finish.(Current Thread: Thread-A)</div><div class="line">ttdevs2 is learning.(Current Thread: Thread-B)</div><div class="line">ttdevs2 is finish.(Current Thread: Thread-B)</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
<p>从上面的demo中，我们可以还可以看到：线程A和线程B之间的数据是没有相互干扰的。</p>
<p>看到这里你可能会感觉这个不是特别简单嘛。是的，这个就是很简单，通过查看源码我们可以发现，他的实现就是通过一个字典来存放我们不同线程的数据，我们也可以自己实现的。既然系统实现了，我们就可以直接拿来用了。</p>
<p>比如，在实际的应用中，我们可以为每个线程保存一个数据库连接，在线程的不同方法中使用就非常的方便了。</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Flask」0x02给我们的Flask应用配置Supervisor]]></title>
      <url>/1970/01/01/%5BFlask%5D0x02%E7%BB%99%E6%88%91%E4%BB%AC%E7%9A%84Flask%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AESupervisor/</url>
      <content type="html"><![CDATA[<h2 id="0x00-场景"><a href="/1970/01/01/[Flask]0x02给我们的Flask应用配置Supervisor/#0x00-场景" class="headerlink" title="0x00 场景"></a>0x00 场景</h2><blockquote>
<p> Nginx ＋ uWSGI ＋ Flask 的场景中，当我们的代码出现异常或者其他一些原因导致服务挂掉，我们会希望能自动重启 <code>uWSGI</code></p>
</blockquote>
<p>这个时候我们我们可以考虑使用 <code>supervisor</code>来达到我们的目的。此文接上一篇，因此我的系统还是Raspbian(Debian)。这里分享一些简单的配置使用。先看一下 <code>supervisor</code> 的介绍：</p>
<blockquote>
<p><a href="http://supervisord.org/" target="_blank" rel="external">Supervisor is a client/server system that allows its users to monitor and control a number of processes on UNIX-like operating systems.</a></p>
</blockquote>
<h2 id="0x01-安装"><a href="/1970/01/01/[Flask]0x02给我们的Flask应用配置Supervisor/#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h2><p>这个比较简单，我们直接使用 <code>apt-get</code> 即可安装。</p>
<p><code>pi@raspberrypi:~ $ sudo apt-get install supervisor</code> </p>
<p>(卸载用：apt-get remove)</p>
<p>当然，你也可以用 <code>pip</code> 进行安装：</p>
<p><code>sudo pip install supervisor</code></p>
<h2 id="0x02-配置"><a href="/1970/01/01/[Flask]0x02给我们的Flask应用配置Supervisor/#0x02-配置" class="headerlink" title="0x02 配置"></a>0x02 配置</h2><p><code>supervisor</code> 的配置文件位于 <code>/etc/supervisor/</code> 下，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:/etc/supervisor $ ls</div><div class="line">conf.d  supervisord.conf</div></pre></td></tr></table></figure>
<p><code>supervisord.conf</code> 是默认的配置文件，我们无需修改，在 <code>conf.d</code> 目录下，我们创建自己的配置文件即可，这里我建了一个 <code>uwsgi.conf</code>  文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:/etc/supervisor $ cd conf.d/</div><div class="line">pi@raspberrypi:/etc/supervisor/conf.d $ touch uwsgi.conf</div><div class="line">pi@raspberrypi:/etc/supervisor/conf.d $ sudo nano uwsgi.conf</div></pre></td></tr></table></figure>
<p><code>uwsgi.conf</code> 文件内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[program:raspi]</div><div class="line">command=/home/pi/raspi/venv/bin/uwsgi /home/pi/raspi/uwsgi.ini</div><div class="line">directory=/home/pi/raspi</div><div class="line">user=pi</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">stdout_logfile=/home/pi/raspi/logs/uwsgi_supervisor.log</div><div class="line">stderr_logfile=/home/pi/raspi/logs/uwsgi_supervisor_err.log</div></pre></td></tr></table></figure>
<ul>
<li>command：执行的命令</li>
<li>directory：工作的目录，在执行前会进行切换，由于上面我使用的绝对路径，可以不配置</li>
<li><p>stdout_logfile 和 stderr_logfile 配置我们日志输出位置</p>
<p>这个配置文件的更多可选参数可参考<a href="http://supervisord.org/configuration.html#program-x-section-settings" target="_blank" rel="external">这里</a>。</p>
</li>
</ul>
<p><code>supervisor</code> 还提供了一个web管理界面，我们需要先对其进行配置，修改 <code>/etc/supervisor/supervisord.conf</code> 文件，增加如下内容即可：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> [supervisorctl]</div><div class="line">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket</div><div class="line">serverurl=http://192.168.1.56:9000</div><div class="line">username=ttdevs            ; (default is no username (open server))</div><div class="line">password=admin             ; (default is no password (open server))</div><div class="line">; The [include] section can just contain the &quot;files&quot; setting.  This</div><div class="line">; setting can list multiple files (separated by whitespace or</div><div class="line">; newlines).  It can also contain wildcards.  The filenames are</div><div class="line">; interpreted as relative to this file.  Included files *cannot*</div><div class="line">; include files themselves.</div><div class="line"></div><div class="line">[include]</div><div class="line">files = /etc/supervisor/conf.d/*.conf</div><div class="line"></div><div class="line">[inet_http_server]         ; inet (TCP) server disabled by default</div><div class="line">port=192.168.1.56:9000 	           ; (ip_address:port specifier, *:port for all iface)</div><div class="line">username=ttdevs            ; (default is no username (open server))</div><div class="line">password=admin             ; (default is no password (open server))</div></pre></td></tr></table></figure>
<h2 id="0x03-操作"><a href="/1970/01/01/[Flask]0x02给我们的Flask应用配置Supervisor/#0x03-操作" class="headerlink" title="0x03 操作"></a>0x03 操作</h2><p>安装好以后，我们有两个命令可以使用，一个是 <code>supervisord</code>，另一个是 <code>supervisorctl</code>，<code>supervisord</code> 负责启动服务，<code>supervisorctl</code> 负责操作服务，C/S模式。</p>
<ul>
<li><p>启动 <code>supervisor</code>： <code>sudo supervisord</code></p>
<p>  更多的启动参数可以参考<a href="http://supervisord.org/running.html#supervisord-command-line-options" target="_blank" rel="external">这里</a>。</p>
</li>
<li><p>启动/重启/停止某个我们配置的进程：<code>supervisorctl start/restart/stop programABC</code></p>
</li>
</ul>
<p>另外在上面的配置中，我们还可以使用浏览器访问 <code>http://192.168.1.56:9000/</code>对我们的进程进行管理。</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Flask]0x02给我们的Flask应用配置Supervisor/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="http://blog.chinaunix.net/uid-26000296-id-4759916.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-26000296-id-4759916.html</a></li>
<li><a href="http://liyangliang.me/posts/2015/06/using-supervisor/" target="_blank" rel="external">http://liyangliang.me/posts/2015/06/using-supervisor/</a></li>
<li><a href="http://www.restran.net/2015/10/04/supervisord-tutorial/" target="_blank" rel="external">http://www.restran.net/2015/10/04/supervisord-tutorial/</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Android」让RecyclerView支持加载更多(Endless RecyclerView)]]></title>
      <url>/1970/01/01/%5BAndroid%5D%E8%AE%A9RecyclerView%E6%94%AF%E6%8C%81%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A(Endless%20RecyclerView)/</url>
      <content type="html"><![CDATA[<h2 id="0x00-问题"><a href="/1970/01/01/[Android]让RecyclerView支持加载更多(Endless RecyclerView)/#0x00-问题" class="headerlink" title="0x00 问题"></a>0x00 问题</h2><p>好久没有写博客，最近正好有时间，打算把之前很长很长一段时间落下的坑都给填了。</p>
<p>在Android的Support包中我们有很多新的组件可以使用，比如代替ListView的RecyclerView。使用RecyclerView和SwipeRefreshLayout组合，我们可以实现很酷炫的下拉刷新的功能。但是，事情总不是那么美好，有了下拉刷新，却找不到上拉加载更多（我们已经习惯了PullToRefresh），最终还是放弃了使用RecyclerView。现在看来，自己实在是太懒了。好了，今天就让我们的RecyclerView支持加载更多。</p>
<h2 id="0x01-Endless-RecyclerView"><a href="/1970/01/01/[Android]让RecyclerView支持加载更多(Endless RecyclerView)/#0x01-Endless-RecyclerView" class="headerlink" title="0x01 Endless RecyclerView"></a>0x01 Endless RecyclerView</h2><p>RecyclerView的的使用多数是与SwipeRefreshLayout进行组合，当然，你也可以算上CardView。使用SwipeRefreshLayout时，受PullToRefresh的影响，很自然的会想到给SwipeRefreshLayout加个上拉加载更多的功能。如果你也这么想，那么我们就一起来YY下google为什么没有官方支持这么做。</p>
<ul>
<li>给SwipeRefreshLayout添加加载更多功能：我们期望的(比如：SwipeRefreshLayout + RecyclerView，但是google没这么做)。如果SwipeRefreshLayout中是TextView或者自定义的View，很显然，我们并不能保证这个加载更多是可以实现的（即使实现了，他们耦合也会很高）。</li>
<li>给RecyclerView添加加载更多功能：这个方案是可行的</li>
<li>给其他更多SwipeRefreshLayout包含的view添加加载更多功能：第二种情况的扩展，这个根据具体的view来讨论</li>
</ul>
<p>因此，我们应该把加载更多放到具体的view中。</p>
<h2 id="0x02-实现"><a href="/1970/01/01/[Android]让RecyclerView支持加载更多(Endless RecyclerView)/#0x02-实现" class="headerlink" title="0x02 实现"></a>0x02 实现</h2><p>下面是我们支持加载更多的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">     * Created by ttdevs 9/3/15 1:31 PM. https://github.com/ttdevs</div><div class="line">     * Copyright (c) 2015 ttdevs, Inc. All rights reserved.</div><div class="line">     */</div><div class="line"></div><div class="line"><span class="keyword">package</span> com.ttdevs.support.recycler;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.ttdevs.utils.LogUtils;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * RecyclerView加载更多的类,支持LinearLayoutManager和GridLayoutManager</div><div class="line"> * 使用:</div><div class="line"> * RecyclerView.addOnScrollListener(new OnRecyclerLoadMoreListener()&#123;</div><div class="line"> * public void onLoadMore()&#123;...&#125;</div><div class="line"> * &#125;);</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OnRecyclerLoadMoreListener</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">OnScrollListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinearLayoutManager mLayoutManager;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mItemCount, mLastCompletely, mLastLoad;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * load more</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onLoadMore</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (recyclerView.getLayoutManager() <span class="keyword">instanceof</span> LinearLayoutManager) &#123;</div><div class="line">            mLayoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();</div><div class="line"></div><div class="line">            mItemCount = mLayoutManager.getItemCount();</div><div class="line">            mLastCompletely = mLayoutManager.findLastCompletelyVisibleItemPosition();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mLastLoad != mItemCount &amp;&amp; mItemCount == mLastCompletely + <span class="number">1</span>) &#123;</div><div class="line">            LogUtils.debug(String.format(<span class="string">"****************load more****************"</span>));</div><div class="line">            LogUtils.debug(String.format(<span class="string">"mItemCount:%d \t mLastCompletely:%d"</span>, mItemCount, mLastCompletely));</div><div class="line">            LogUtils.debug(String.format(<span class="string">"****************load more****************"</span>));</div><div class="line"></div><div class="line">            mLastLoad = mItemCount;</div><div class="line">            onLoadMore();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Python」文件拷贝工具Shutil介绍]]></title>
      <url>/1970/01/01/%5BPython%5D%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D%E5%B7%A5%E5%85%B7Shutil%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>一哥们让帮写个脚本：从一个文件夹中按照指定的规则拷贝部分文件。给半小时时间，虽然水平很菜没有信心，但还是应下了这个需求。</p>
<h2 id="0x01-分析"><a href="/1970/01/01/[Python]文件拷贝工具Shutil介绍/#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>首先想到的就是os，sys这些系统库完成这些操作，由于不熟悉这几个库，还是google一下。不过在搜索的时候发现了这个库： <code>shutil</code>。查看了下简直太简单，一行代码完成拷贝。自己之前还想着创建目录，检查文件是否存在，文件读写，各种问题……</p>
<h2 id="0x02-shutil"><a href="/1970/01/01/[Python]文件拷贝工具Shutil介绍/#0x02-shutil" class="headerlink" title="0x02 shutil"></a>0x02 shutil</h2><p>shutil是一个python提供的高级文件操作工具，他可以帮助我们快速的进行常规文件操作。文件拷贝操作如下：</p>
<p><code>shutil.copyfile(src, dst, *, follow_symlinks=True)</code></p>
<p>第一个参数原文件，第二个参数目标文件位置。简单吧，想想如果java写的话，各种判断，各种iostream，各种蛋疼啊，python就一行啊啊啊啊……</p>
<h3 id="方法说明"><a href="/1970/01/01/[Python]文件拷贝工具Shutil介绍/#方法说明" class="headerlink" title="方法说明"></a>方法说明</h3><ul>
<li><p>copy(src, dst)</p>
<p>  将文件src复制到文件dst，包含权限</p>
</li>
<li><p>copy2(src, dst)</p>
<p>  同copy，同时复制文件元数据</p>
</li>
<li><p>copyfile(src, dst)</p>
<p>  将文件src复制到文件dst，但不包含元数据</p>
</li>
<li><p>copymode(src, dst)</p>
<p>  复制文件权限</p>
</li>
<li><p>copystat(src, dst)</p>
<p>  将权限位、 最后存取时间、 最后修改时间和标志从src复制到dst</p>
</li>
<li><p>copytree(src, dst, symlinks=False, ignore=None)</p>
<p>  递归复制目录</p>
</li>
<li><p>rmtree(path[, ignore_errors[, onerror]])</p>
<p>  删除目录</p>
</li>
<li><p>move(src, dst)</p>
<p>  递归移动目录</p>
</li>
</ul>
<h3 id="Demo"><a href="/1970/01/01/[Python]文件拷贝工具Shutil介绍/#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> shutil</div><div class="line">    </div><div class="line">SOURCE = &#123;</div><div class="line">   <span class="string">"1f604"</span>,</div><div class="line">   ...</div><div class="line">   <span class="string">"1f349"</span>&#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace</span><span class="params">()</span>:</span></div><div class="line">   base_path = <span class="string">"drawable/"</span></div><div class="line">   dest_path = <span class="string">"drawable_dest/"</span></div><div class="line">   <span class="keyword">for</span> name <span class="keyword">in</span> SOURCE:</div><div class="line">       file_name = base_path + <span class="string">"emoji_"</span> + name + <span class="string">".png"</span></div><div class="line">       dest_name = dest_path + <span class="string">"emoji_"</span> + name + <span class="string">".png"</span></div><div class="line">       shutil.copy(file_name, dest_name)</div><div class="line">    </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">   replace()</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Retrofit」0x01请求参数]]></title>
      <url>/1970/01/01/%5BRetrofit%5D0x01%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="0x00-请求参数"><a href="/1970/01/01/[Retrofit]0x01请求参数/#0x00-请求参数" class="headerlink" title="0x00 请求参数"></a>0x00 请求参数</h2><p>常见的Http请求，除了指定的请求地址，很多时候我们还需要加上一些请求参数，这些参数可能是固定的，也可能是动态添加的。在Retrofit中，我们该如何处理呢？这里以GET方式中添加请求参数为例。</p>
<h2 id="0x01-固定请求参数"><a href="/1970/01/01/[Retrofit]0x01请求参数/#0x01-固定请求参数" class="headerlink" title="0x01 固定请求参数"></a>0x01 固定请求参数</h2><p>这里说的固定请求参数是指每次请求我们都在Url中添加相同的请求的参数。这种场景多出现在需要认证的情况，比如添加 Token 字段等。</p>
<p>在之前的文章中，我们有提到在构建OkHttpClient对象的时候使用过 <code>Interceptor</code> ，在 <code>Interceptor</code> 的逻辑中，我们会重新创建一个 <code>Request</code> 对象，在这个对象中我们可以传入一个 <code>HttpUrl</code> ，在这个对象中，我们可以传入一些需要的请求参数。通过之前对 <code>Interceptor</code> 了解，我们应该知道，这里做的操作是对所有的请求都有效的。这样就可以完成我们为每个请求添加固定请求参数的目的。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">                .addInterceptor(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> okhttp3.<span class="function">Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                        Request original = chain.request();</div><div class="line"></div><div class="line">                        HttpUrl originalHttpUrl = original.url();</div><div class="line"></div><div class="line">                        HttpUrl url = originalHttpUrl</div><div class="line">                                .newBuilder()</div><div class="line">                                .addQueryParameter(<span class="string">"token"</span>, <span class="string">"I_am_user_token"</span>)</div><div class="line">                                .addQueryParameter(<span class="string">"user_key"</span>, <span class="string">"I_am_user_user_key"</span>)</div><div class="line">                                .build();</div><div class="line"></div><div class="line">                        Request request = original</div><div class="line">                                .newBuilder()</div><div class="line">                                .url(url)</div><div class="line">                                .build();</div><div class="line"></div><div class="line">                        okhttp3.Response response = chain.proceed(request);</div><div class="line">                        <span class="keyword">return</span> response;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .build();</div></pre></td></tr></table></figure>
<h2 id="0x02-动态请求参数"><a href="/1970/01/01/[Retrofit]0x01请求参数/#0x02-动态请求参数" class="headerlink" title="0x02 动态请求参数"></a>0x02 动态请求参数</h2><p>这个指我们在不同的请求中添加不同过的请求参数。比如，在请求用户信息的接口中我们可能需要传入用户ID，在请求记录的接口中我们需要传入起止时间等。由于这样的参数是针对接口的，因此我们就需要在每一个接口做中处理。</p>
<ul>
<li><p>@Query 添加一个请求参数</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// http://119.29.29.29/d?dn=ttdevs.vicp.com</span></div><div class="line"><span class="meta">@GET</span>(<span class="string">"/d"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Call&lt;ResponseBody&gt; <span class="title">singleParams</span><span class="params">(@Query(<span class="string">"dn"</span>)</span> String domain)</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>通过上面的方式，我们发出的请求就是：

`http://119.29.29.29/d?dn={domain}`
</code></pre><ul>
<li><p>@QueryMap 添加一组请求参数</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"/record"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Call&lt;ResponseBody&gt; <span class="title">multiParams</span><span class="params">(@QueryMap(encoded = <span class="keyword">true</span>)</span> Map&lt;String, String&gt; options)</span>;</div></pre></td></tr></table></figure>
<p>  上面我们发出的请求是：</p>
<p>  <code>http://ttdevs.vicp.net/record?p1=v1&amp;p2=v2</code></p>
<p>  这个这个例子中还可以看到，我们使用了一个参数：<code>encoded = true</code>，这个参数的意思是，对我们的参数进行URL<br>  Encode。</p>
</li>
</ul>
<h2 id="0x03-总结"><a href="/1970/01/01/[Retrofit]0x01请求参数/#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>通过上面的介绍，我们可以了解，如果添加我们的请求参数。当需要给每一个请求都添加相同参数时该如何封装，把Retrofit打造成更适合我们使用的工具。</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Retrofit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Retrofit」0x02Header问题补充]]></title>
      <url>/1970/01/01/%5BRetrofit%5D0x02Header%E9%97%AE%E9%A2%98%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Retrofit-Header"><a href="/1970/01/01/[Retrofit]0x02Header问题补充/#0x00-Retrofit-Header" class="headerlink" title="0x00 Retrofit Header"></a>0x00 Retrofit Header</h2><p>上一篇中我们介绍Retrofit的一个简单的Demo和添加Header方法，这一篇在补充一下Header的另外几种处理方法。</p>
<h2 id="0x01-Header"><a href="/1970/01/01/[Retrofit]0x02Header问题补充/#0x01-Header" class="headerlink" title="0x01 Header"></a>0x01 Header</h2><p>  使用OkHTTP的Interceptor来处理Header信息，这种方法是需要我们在封装Retrofit的时候考虑的。但是有时候我们还希望能灵活的控制每一个请求的Header信息，接下来的几种方法满足我们这样的要求。他们都是在各自的Service方法上添加注解来达到添加Header的目的。</p>
<h3 id="添加单个Header字段"><a href="/1970/01/01/[Retrofit]0x02Header问题补充/#添加单个Header字段" class="headerlink" title="添加单个Header字段"></a>添加单个Header字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Headers</span>(<span class="string">"User-Agent: Your-App-Name"</span>)</div><div class="line"><span class="meta">@GET</span></div><div class="line"><span class="function"><span class="keyword">public</span> Call&lt;ResponseBody&gt; <span class="title">weatherReport</span><span class="params">(String cityCode)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="添加多个Header字段"><a href="/1970/01/01/[Retrofit]0x02Header问题补充/#添加多个Header字段" class="headerlink" title="添加多个Header字段"></a>添加多个Header字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Headers</span>(&#123;</div><div class="line">       <span class="string">"Accept: application/json"</span>,</div><div class="line">       <span class="string">"User-Agent: ttdevs"</span></div><div class="line">&#125;)</div><div class="line"><span class="meta">@GET</span></div><div class="line"><span class="function"><span class="keyword">public</span> Call&lt;ResponseBody&gt; <span class="title">weatherReport</span><span class="params">(String cityCode)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="使用Map添加单个Header字段"><a href="/1970/01/01/[Retrofit]0x02Header问题补充/#使用Map添加单个Header字段" class="headerlink" title="使用Map添加单个Header字段"></a>使用Map添加单个Header字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span></div><div class="line"><span class="function"><span class="keyword">public</span> Call&lt;ResponseBody&gt; <span class="title">requestWithHeaderMap</span><span class="params">(@HeaderMap Map&lt;String, String&gt; header)</span></span>;</div></pre></td></tr></table></figure>
<p>源码参考：<a href="https://github.com/ttdevs/android/tree/master/modules/retrofit" target="_blank" rel="external">ttdevs</a></p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Retrofit]0x02Header问题补充/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://github.com/square/retrofit" target="_blank" rel="external">https://github.com/square/retrofit</a></li>
<li><a href="http://square.github.io/retrofit/" target="_blank" rel="external">http://square.github.io/retrofit/</a></li>
<li><a href="https://futurestud.io/" target="_blank" rel="external">https://futurestud.io/</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Retrofit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Retrofit」0x03同步与异步请求]]></title>
      <url>/1970/01/01/%5BRetrofit%5D0x03%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h2 id="0x00-请求的形式"><a href="/1970/01/01/[Retrofit]0x03同步与异步请求/#0x00-请求的形式" class="headerlink" title="0x00 请求的形式"></a>0x00 请求的形式</h2><p>我们正常的网络请求有两种形式：同步方式和异步方式。所谓同步方式，是指我们在在发出网络请求之后当前线程呗阻塞，直到请求的结果（成功或者失败）到来，才继续向下执行。所谓异步，是指我们的网络请求发出之后，不必等待请求结果的到来，就可以去做其他的事情，当请求结果到来时，我们在做处理结果的动作。当时无论是同步还是异步，最终都是同步请求。</p>
<h2 id="0x01-同步请求"><a href="/1970/01/01/[Retrofit]0x03同步与异步请求/#0x01-同步请求" class="headerlink" title="0x01 同步请求"></a>0x01 同步请求</h2><p>Retrofit的同步请求比较简单，直接调用 <code>Call</code> 的execute方法即可。这个时候我们会拿到请求的结果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synchronousRequest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">     Retrofit retrofit = RetrofitManager.getRetrofit();</div><div class="line">     GitHubService service = retrofit.create(GitHubService.class);</div><div class="line">     Call&lt;User&gt; example = service.userInfo(<span class="string">"ttdevs"</span>);</div><div class="line">     Response&lt;User&gt; response = example.execute();</div><div class="line">     print(response.body().getName());</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="0x02-异步请求"><a href="/1970/01/01/[Retrofit]0x03同步与异步请求/#0x02-异步请求" class="headerlink" title="0x02 异步请求"></a>0x02 异步请求</h2><p>之前文章的请求都是异步方式，在请求的回调中我们会拿到请求结果，接下来 处理这个结果即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestHeader</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        OkHttpClient client = RetrofitManager.getClient(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> okhttp3.<span class="function">Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                Request original = chain.request();</div><div class="line">                Request request = original.newBuilder()</div><div class="line">                        .header(<span class="string">"Time-Zone"</span>, <span class="string">"Asia/Shanghai"</span>) <span class="comment">//https://developer.github.com/v3/#timezones</span></div><div class="line">                        .header(<span class="string">"user_key"</span>, <span class="string">"I_am_user_key"</span>)</div><div class="line">                        .method(original.method(), original.body())</div><div class="line">                        .build();</div><div class="line">                okhttp3.Response response = chain.proceed(request);</div><div class="line">                <span class="keyword">return</span> response;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        Retrofit retrofit = RetrofitManager.getRetrofit(client);</div><div class="line">        ExampleService service = retrofit.create(ExampleService.class);</div><div class="line"></div><div class="line">        String url = <span class="string">"http://www.weather.com.cn/adat/sk/101020100.html"</span>;</div><div class="line">        Call&lt;ResponseBody&gt; example = service.requestWithHeader(url);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">        example.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    print(response.body().string());</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                countDownLatch.countDown();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</div><div class="line">                countDownLatch.countDown();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        countDownLatch.await();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="/1970/01/01/[Retrofit]0x03同步与异步请求/#总结" class="headerlink" title="总结"></a>总结</h2><p>由于同步请求会阻塞当前线程，android的设计逻辑不能在主线程中发起网络请求（可能会导致ANR），所以我们比较常见的都是异步形式的网络请求。但是，有时候我们在工作线程中处理一些网络请求的时候，可以接受阻塞的情况（这个时候使用回调往往会使问题复杂化），那么我们就可以使用同步的方式来发起网络请求，比如，在使用Rxjava封装某个网络功能的逻辑是（如图片上传）我们就可以同步形式的网络请求。</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Retrofit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Retrofit」0x04POST方式提交JSON数据]]></title>
      <url>/1970/01/01/%5BRetrofit%5D0x04POST%E6%96%B9%E5%BC%8F%E6%8F%90%E4%BA%A4JSON%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h2 id="0x00-HTTP-Method：POST"><a href="/1970/01/01/[Retrofit]0x04POST方式提交JSON数据/#0x00-HTTP-Method：POST" class="headerlink" title="0x00 HTTP Method：POST"></a>0x00 HTTP Method：POST</h2><p>POST请求再日常的使用中很常见，比如登录，上传数据中使用。之前介绍了GET方式，今天简单介绍下如何使用POST来提交数据。</p>
<h2 id="0x01-常用的POST方式"><a href="/1970/01/01/[Retrofit]0x04POST方式提交JSON数据/#0x01-常用的POST方式" class="headerlink" title="0x01 常用的POST方式"></a>0x01 常用的POST方式</h2><p>POST方式提交数据再浏览器中的表现主要是使用Form，在客户端中国中的主要表现是提交JSON数据。当然，具体是什么数据格式并不重要，我们可以通过抓包来分析：最终数据都是一样的。</p>
<h3 id="使用Model对象"><a href="/1970/01/01/[Retrofit]0x04POST方式提交JSON数据/#使用Model对象" class="headerlink" title="使用Model对象"></a>使用Model对象</h3><p>首先新建一个model对象，比如：User，添加常用的熟悉和get／set方法。新建我们的Service：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span>(<span class="string">"/send"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Call&lt;ResponseBody&gt; <span class="title">modelPost</span><span class="params">(@Url String url, @Body User user)</span></span>;</div></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modelPost</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">   HttpLoggingInterceptor logging = <span class="keyword">new</span> HttpLoggingInterceptor();</div><div class="line">   logging.setLevel(HttpLoggingInterceptor.Level.BASIC);</div><div class="line"></div><div class="line">   OkHttpClient client = RetrofitManager.getClient(logging);</div><div class="line"></div><div class="line">   Retrofit retrofit = RetrofitManager.getRetrofit(client);</div><div class="line">   ExampleService service = retrofit.create(ExampleService.class);</div><div class="line"></div><div class="line">   String url = <span class="string">"http://www.remoteurl.com"</span>;</div><div class="line">   User user = <span class="keyword">new</span> User();</div><div class="line">   user.setName(<span class="string">"ttdevs"</span>);</div><div class="line">   Call&lt;ResponseBody&gt; example = service.modelPost(url, user);</div><div class="line"></div><div class="line">   <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">   example.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               print(response.body().string());</div><div class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">               e.printStackTrace();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           countDownLatch.countDown();</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</div><div class="line">           countDownLatch.countDown();</div><div class="line">       &#125;</div><div class="line">   &#125;);</div><div class="line">   countDownLatch.await();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用RequestBody对象"><a href="/1970/01/01/[Retrofit]0x04POST方式提交JSON数据/#使用RequestBody对象" class="headerlink" title="使用RequestBody对象"></a>使用RequestBody对象</h3><p>这里我们来提交一份JSON数据，首先还是再Service中创建一个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@POST</span>(<span class="string">"/send"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Call&lt;ResponseBody&gt; <span class="title">withRequestBody</span><span class="params">(@Url String url, @Body RequestBody body)</span></span>;</div></pre></td></tr></table></figure>
<p>再接着创建我们的请求：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withRequestBody</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    HttpLoggingInterceptor logging = <span class="keyword">new</span> HttpLoggingInterceptor();</div><div class="line">    logging.setLevel(HttpLoggingInterceptor.Level.BASIC);</div><div class="line"></div><div class="line">    OkHttpClient client = RetrofitManager.getClient(logging);</div><div class="line"></div><div class="line">    Retrofit retrofit = RetrofitManager.getRetrofit(client);</div><div class="line">    ExampleService service = retrofit.create(ExampleService.class);</div><div class="line"></div><div class="line">    String url = <span class="string">"http://www.remoteurl.com"</span>;</div><div class="line"></div><div class="line">    JSONObject result = <span class="keyword">new</span> JSONObject();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        result.put(<span class="string">"record"</span>, <span class="string">"hello"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    RequestBody body = RequestBody.create(MediaType.parse(<span class="string">"application/json"</span>), result.toString());</div><div class="line">    Call&lt;ResponseBody&gt; example = service.withRequestBody(url, body);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">    example.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                print(response.body().string());</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            countDownLatch.countDown();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</div><div class="line">            countDownLatch.countDown();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    countDownLatch.await();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x02-总结"><a href="/1970/01/01/[Retrofit]0x04POST方式提交JSON数据/#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>第一种方法，我们需要为每一个请求的对象创建一个Model，如果你不想创建model则可以选择第二种方式，直接创建一个JSON字符串，然后提交即可。还是相当简答的。</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Retrofit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Java」(==)与(equals)]]></title>
      <url>/1970/01/01/%5BJava%5D(==)%E4%B8%8E(equals)/</url>
      <content type="html"><![CDATA[<h2 id="0x01-两种比较方法"><a href="/1970/01/01/[Java](==)与(equals)/#0x01-两种比较方法" class="headerlink" title="0x01 两种比较方法"></a>0x01 两种比较方法</h2><ul>
<li><p><code>==</code></p>
<ul>
<li><p>基本类型</p>
<p>  对于基本类型，<code>==</code> 的功能是比较值。</p>
</li>
<li><p><code>Object</code></p>
<p>  比较对象在内存中的地址。</p>
</li>
</ul>
</li>
<li><p><code>equals</code></p>
<p>  基本类型无equals方法。Object对象默认equals的实现如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * ...</div><div class="line"> * <span class="doctag">@param</span>   obj   the reference object with which to compare.</div><div class="line"> * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if this object is the same as the obj</div><div class="line"> *          argument; &#123;<span class="doctag">@code</span> false&#125; otherwise.</div><div class="line"> * <span class="doctag">@see</span>     #hashCode()</div><div class="line"> * <span class="doctag">@see</span>     java.util.HashMap</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>有很长一段注释，最终的实现我们可以看到还是用的 `==` 来比较两个对象在内存中的地址。
</code></pre><h2 id="0x02-equals-amp-hashCode"><a href="/1970/01/01/[Java](==)与(equals)/#0x02-equals-amp-hashCode" class="headerlink" title="0x02 equals() &amp; hashCode()"></a>0x02 equals() &amp; hashCode()</h2><p>对于equals的默认实现——比较对象在内存中的地址——有时候可能并不是我们期望的，比如有一个Student类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">   <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</div><div class="line">       <span class="keyword">this</span>.id = id;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// ... getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当 Student.id 相同时，我们更愿意认为这是同一个学生，而下面这个测试是无法通过的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">equalsStudent</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">   Student st1 = <span class="keyword">new</span> Student(<span class="number">2333</span>);</div><div class="line">   Student st2 = <span class="keyword">new</span> Student(<span class="number">2333</span>);</div><div class="line">   assertEquals(st1, st2);</div><div class="line">   <span class="comment">// assertNotEquals(st1, st2);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了达到我们的目的——相同的学号就认为是同一个人——我们可以重写Student类的 equals 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">   <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.id = id;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">null</span> == o) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line">       Student std = (Student) o;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.id == std.id) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.equals(o);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// ... getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改之后上面的测试就可以通过了。Demo毕竟是简单的，当我们在实际的使用中需要重写equals方法时还是需要遵守它的生成规则，这里贴出来供参考：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public boolean equals(Object obj)</div><div class="line"></div><div class="line">    指示其他某个对象是否与此对象“相等”。</div><div class="line"></div><div class="line">    equals 方法在非空对象引用上实现相等关系：</div><div class="line"></div><div class="line">        自反性：对于任何非空引用值 x，x.equals(x) 都应返回 true。</div><div class="line">        对称性：对于任何非空引用值 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才应返回 true。</div><div class="line">        传递性：对于任何非空引用值 x、y 和 z，如果 x.equals(y) 返回 true，并且 y.equals(z) 返回 true，那么 x.equals(z) 应返回 true。</div><div class="line">        一致性：对于任何非空引用值 x 和 y，多次调用 x.equals(y) 始终返回 true 或始终返回 false，前提是对象上 equals 比较中所用的信息没有被修改。</div><div class="line">        对于任何非空引用值 x，x.equals(null) 都应返回 false。 </div><div class="line"></div><div class="line">    Object 类的 equals 方法实现对象上差别可能性最大的相等关系；即，对于任何非空引用值 x 和 y，当且仅当 x 和 y 引用同一个对象时，此方法才返回 true（x == y 具有值 true）。</div><div class="line"></div><div class="line">    注意：当此方法被重写时，通常有必要重写 hashCode 方法，以维护 hashCode 方法的常规协定，该协定声明相等对象必须具有相等的哈希码。</div><div class="line"></div><div class="line">    参数：</div><div class="line">        obj - 要与之比较的引用对象。 </div><div class="line">    返回：</div><div class="line">        如果此对象与 obj 参数相同，则返回 true；否则返回 false。</div><div class="line">    另请参见：</div><div class="line">        hashCode(), Hashtable</div><div class="line">``` </div><div class="line"></div><div class="line">事情还没有结束。看下面代码：</div><div class="line"></div><div class="line">``` java</div><div class="line">@Test</div><div class="line">public void studentSet() throws Exception &#123;</div><div class="line">   Student st1 = new Student(2333);</div><div class="line">   Student st2 = new Student(2333);</div><div class="line"></div><div class="line">   Set&lt;Student&gt; stds = new HashSet&lt;&gt;();</div><div class="line">   stds.add(st1);</div><div class="line">   stds.add(st2);</div><div class="line">   assertEquals(1, stds.size());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你会发现这段代码测试不通过。set不是重复对象只会保留一份吗，为什么不是 1 呢？</p>
<p>这里就要介绍 hashCode() 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public int hashCode()</div><div class="line"></div><div class="line">    返回该对象的哈希码值。支持此方法是为了提高哈希表（例如 java.util.Hashtable 提供的哈希表）的性能。</div><div class="line"></div><div class="line">    hashCode 的常规协定是：</div><div class="line"></div><div class="line">        在 Java 应用程序执行期间，在对同一对象多次调用 hashCode 方法时，必须一致地返回相同的整数，前提是将对象进行 equals 比较时所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。</div><div class="line">        如果根据 equals(Object) 方法，两个对象是相等的，那么对这两个对象中的每个对象调用 hashCode 方法都必须生成相同的整数结果。</div><div class="line">        如果根据 equals(java.lang.Object) 方法，两个对象不相等，那么对这两个对象中的任一对象上调用 hashCode 方法不 要求一定生成不同的整数结果。但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。 </div><div class="line"></div><div class="line">    实际上，由 Object 类定义的 hashCode 方法确实会针对不同的对象返回不同的整数。（这一般是通过将该对象的内部地址转换成一个整数来实现的，但是 JavaTM 编程语言不需要这种实现技巧。）</div><div class="line"></div><div class="line">    返回：</div><div class="line">        此对象的一个哈希码值。</div><div class="line">    另请参见：</div><div class="line">        equals(java.lang.Object), Hashtable</div></pre></td></tr></table></figure>
<p>当我们使用用哈希表实现的工具类时，这个方法的价值就体现了。由于之前我们没有重写这个方法，把Student对象存入HashSet时还是按照之前系统默认的方式计算他们的hash值，导致Set中存在两个Student对象。</p>
<p>下面做一个简单修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">   <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.id = id;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">null</span> == o) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// 有时候instanceof不合适的时候可以考虑用getClass()方法</span></div><div class="line">       <span class="keyword">if</span> (getClass() != o.getClass()) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Student) &#123;</div><div class="line">           Student std = (Student) o;</div><div class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.id == std.id) &#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.equals(o);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.id; </div><div class="line">       <span class="comment">// return super.hashCode();</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// ... getter and setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再运行下面的测试，你会发现和我们期待的一致了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studentSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">   Student st1 = <span class="keyword">new</span> Student(<span class="number">2333</span>);</div><div class="line">   Student st2 = <span class="keyword">new</span> Student(<span class="number">2333</span>);</div><div class="line"></div><div class="line">   Set&lt;Student&gt; stds = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">   stds.add(st1);</div><div class="line">   stds.add(st2);</div><div class="line">   assertEquals(<span class="number">1</span>, stds.size());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Demo中直接将id作为hashcode返回不是一种好的生成方式，具体的生成规则请参考上面的注释。</p>
<h2 id="0x03-Demo"><a href="/1970/01/01/[Java](==)与(equals)/#0x03-Demo" class="headerlink" title="0x03 Demo"></a>0x03 Demo</h2><p>再来看一个demo：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">   String str1 = <span class="string">"abc"</span>;</div><div class="line">   String str2 = <span class="string">"abc"</span>;</div><div class="line">   String str3 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div><div class="line"></div><div class="line">   System.out.println(str1 == str2);</div><div class="line">   System.out.println(str1 == str3);</div><div class="line"></div><div class="line">   assertEquals(str1, str2);</div><div class="line">   assertEquals(str1, str3);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果会怎样？没错，测试通过，输出：true，false。</p>
<p>首先我们来看下String类重写的equals()和hashCOde():</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (other == <span class="keyword">this</span>) &#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (other <span class="keyword">instanceof</span> String) &#123;</div><div class="line">       String s = (String)other;</div><div class="line">       <span class="keyword">int</span> count = <span class="keyword">this</span>.count;</div><div class="line">       <span class="keyword">if</span> (s.count != count) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (hashCode() != s.hashCode()) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">           <span class="keyword">if</span> (charAt(i) != s.charAt(i)) &#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> hash = hashCode;</div><div class="line">   <span class="keyword">if</span> (hash == <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</div><div class="line">           hash = <span class="number">31</span> * hash + charAt(i);</div><div class="line">       &#125;</div><div class="line">       hashCode = hash;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> hash;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面可以看出，String类重写了这两个方法，equals()中的逻辑是比较字符串中每个字符是否相同。因此 str1, str2, str3相同就可以理解了。<br>对于 <code>str1 == str2</code> 和 <code>str1 != str3</code> 这涉及到不同字符串创建方法。</p>
<blockquote>
<p><a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.md" target="_blank" rel="external">在开始这个例子之前，同学们需要知道JVM处理String的一些特性。Java的虚拟机在内存中开辟出一块单独的区域，用来存储字符串对象，这块内存区域被称为字符串缓冲池。当使用 String a = “abc”这样的语句进行定义一个引用的时候，首先会在字符串缓冲池中查找是否已经相同的对象，如果存在，那么就直接将这个对象的引用返回给a，如果不存在，则需要新建一个值为”abc”的对象，再将新的引用返回a。String a = new String(“abc”);这样的语句明确告诉JVM想要产生一个新的String对象，并且值为”abc”，于是就在堆内存中的某一个小角落开辟了一个新的String对象。</a> </p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Java」NumberFormatException之InvalidFloat分析]]></title>
      <url>/1970/01/01/%5BJava%5DNumberFormatException%E4%B9%8BInvalidFloat%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="0x00-问题"><a href="/1970/01/01/[Java]NumberFormatException之InvalidFloat分析/#0x00-问题" class="headerlink" title="0x00 问题"></a>0x00 问题</h2><p>新版本上线，4天时间一个错误出现一百多次，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">java.lang.NumberFormatException: Invalid <span class="keyword">float</span>: <span class="string">"55,4"</span></div><div class="line">	at java.lang.StringToReal.invalidReal(StringToReal.java:<span class="number">63</span>)</div><div class="line">	at java.lang.StringToReal.initialParse(StringToReal.java:<span class="number">164</span>)</div><div class="line">	at java.lang.StringToReal.parseFloat(StringToReal.java:<span class="number">323</span>)</div><div class="line">	at java.lang.Float.parseFloat(Float.java:<span class="number">306</span>)</div></pre></td></tr></table></figure>
<h2 id="0x01-分析"><a href="/1970/01/01/[Java]NumberFormatException之InvalidFloat分析/#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>发现此问题后感觉很熟悉，以前应该是见过，但是忘记怎么解决的了，没办法，踩过的坑再踩一遍。涉及的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnePreference</span></span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setLatestWeight</span><span class="params">(<span class="keyword">float</span> weight)</span> </span>&#123;</div><div class="line">       getInstance(MyApplication.getContext()).putFloat(PREFS_LATEST_WEIGHT, Float.parseFloat(NumberUtils.formatFloatWithOneDot(weight)));</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberUtils</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatFloatWithOneDot</span><span class="params">(<span class="keyword">float</span> number)</span> </span>&#123;</div><div class="line">        number = Math.round(number * <span class="number">10</span>) / <span class="number">10f</span>;</div><div class="line">        <span class="keyword">return</span> String.format(<span class="string">"%.1f"</span>, number);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>确认问题</p>
<p>  android无法复现，iOS后台未报此错误</p>
</li>
<li><p>怀疑是数据的问题</p>
<p>  这是一个记录体重的功能，新版体重输入已经做了限制，所以怀疑可能是老数据的问题。因此找后端的同事降此数据做处理：如果此字段无法解析为数字则过滤掉。<br>  但是遗憾的，后端发布之后问题依然存在。</p>
</li>
<li><p>分析代码</p>
<p>  <code>setLatestWeight(float weight)</code> 这个传入的是float，所以之前的假设是错误的 —— 如果是数据的问题，那根本走不到方法里。<br>  这样的话那就是 <code>formatFloatWithOneDot(float number)</code> 这个方法的问题，但是想了下之前都有这么写过 —— 将float类型格式化为一位小数的字符串，应该没问题啊。那会是怎样呢？可能很自然会想到国际化的问题。遂作了一个简单的测试：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleUnitTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStringLocale</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Locale[] locales = <span class="keyword">new</span> Locale[]&#123;</div><div class="line">                Locale.CANADA,</div><div class="line">                Locale.CANADA_FRENCH,</div><div class="line">                Locale.CHINESE,</div><div class="line">                Locale.ENGLISH,</div><div class="line">                Locale.FRANCE,</div><div class="line">                Locale.GERMAN,</div><div class="line">                Locale.GERMANY,</div><div class="line">                Locale.ITALIAN,</div><div class="line">                Locale.ITALY,</div><div class="line">                Locale.JAPAN,</div><div class="line">                Locale.JAPANESE,</div><div class="line">                Locale.KOREA,</div><div class="line">                Locale.KOREAN,</div><div class="line">                Locale.PRC,</div><div class="line">                Locale.ROOT,</div><div class="line">                Locale.SIMPLIFIED_CHINESE,</div><div class="line">                Locale.TAIWAN,</div><div class="line">                Locale.TRADITIONAL_CHINESE,</div><div class="line">                Locale.UK,</div><div class="line">                Locale.US</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        String weightString = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span> (Locale locale : locales) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                weightString = formatFloatWithOneDot(locale, <span class="number">55.4f</span>);</div><div class="line">                <span class="keyword">float</span> weight = Float.parseFloat(weightString);</div><div class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">                System.out.println(locale + <span class="string">"&gt;&gt;&gt;&gt;&gt;"</span> + weightString + <span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; error"</span>);</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            System.out.println(locale + <span class="string">"&gt;&gt;&gt;&gt;&gt;"</span> + weightString);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatFloatWithOneDot</span><span class="params">(Locale locale, <span class="keyword">float</span> number)</span> </span>&#123;</div><div class="line">        number = Math.round(number * <span class="number">10</span>) / <span class="number">10f</span>;</div><div class="line">        <span class="keyword">return</span> String.format(locale, <span class="string">"%.1f"</span>, number);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>输出结果如下：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">en_CA&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line">fr_CA&gt;&gt;&gt;&gt;&gt;55,4&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; error</div><div class="line">zh&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line">en&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line">fr_FR&gt;&gt;&gt;&gt;&gt;55,4&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; error</div><div class="line">de&gt;&gt;&gt;&gt;&gt;55,4&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; error</div><div class="line">de_DE&gt;&gt;&gt;&gt;&gt;55,4&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; error</div><div class="line">it&gt;&gt;&gt;&gt;&gt;55,4&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; error</div><div class="line">it_IT&gt;&gt;&gt;&gt;&gt;55,4&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; error</div><div class="line">ja_JP&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line">ja&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line">ko_KR&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line">ko&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line">zh_CN&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line">&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line">zh_CN&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line">zh_TW&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line">zh_TW&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line">en_GB&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line">en_US&gt;&gt;&gt;&gt;&gt;55.4</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>


我们可以看到，在不同的语言下 `String.format(locale, &quot;%.1f&quot;, number)` 格式化的结果是不一样的，55.4可能会被格式化为55,4，然后就出现了上面的错误。将我们的测试机语言设置成出错的语言，问题可以复现。

再来看下后台的错误：

![错误信息]()

- 大部分是华为的设备，然后是三星，索尼
- 各个版本都有，从4.4到最新的7.0
- 不同的渠道都有，主要的渠道来自华为

这些信息也从侧面反映了问题的原因。看来华为的国际化之路还是很屌的。
</code></pre><h2 id="0x02-解决"><a href="/1970/01/01/[Java]NumberFormatException之InvalidFloat分析/#0x02-解决" class="headerlink" title="0x02 解决"></a>0x02 解决</h2><ul>
<li><p>由于我们并没有做国际化的适配，因此这里改起来还是很方便的，直接给 <code>String.format()</code> 方法指定Locale信息：</p>
<p>  <code>String.format(Locale.ENGLISH, &quot;%.1f&quot;, number);</code></p>
<p>  or</p>
<p>  <code>String.format(Locale.CHINA, &quot;%.1f&quot;, number);</code>        </p>
</li>
<li><p>NumberFormat(DecimalFormat)</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Retrofit」0x00初探]]></title>
      <url>/1970/01/01/%5BRetrofit%5D0x00%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Retrofit"><a href="/1970/01/01/[Retrofit]0x00初探/#0x00-Retrofit" class="headerlink" title="0x00 Retrofit"></a>0x00 Retrofit</h2><p>很久以前就计划要研究一下，但是一直拖到现在，不知道是因为优先级放的比较低还是因为拖延症。总只，现在要完整的看一遍。</p>
<p>由于这个已经出来很久了，所以我就直接选择了Refrofit2，没有去关注Refrofit1，等看完Refrofit2有时间的话再去看看Refrofit1，看看它们的变迁。好了，先从Refrofit2开始吧。</p>
<h2 id="0x01-简介"><a href="/1970/01/01/[Retrofit]0x00初探/#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><h3 id="简介"><a href="/1970/01/01/[Retrofit]0x00初探/#简介" class="headerlink" title="简介"></a>简介</h3><p>如果你接触Android时间比较长，从最初的自己封装线程，到使用异步任务，到开源的各种第三方网络请求框架如xUtils，到谷歌的Volley，androider总在探索一种更好的网络请求形式。Retrofit就是这样的一款产品。</p>
<p>PS：从上面一句话，我们也可以看到，android生态在不断的进步和完善～～</p>
<h3 id="引入"><a href="/1970/01/01/[Retrofit]0x00初探/#引入" class="headerlink" title="引入"></a>引入</h3><p>两个问题，gradle和混淆：</p>
<ul>
<li><p>Gradle：</p>
<ul>
<li>Retrofit： <code>compile &#39;com.squareup.retrofit2:retrofit:2.1.0&#39;</code></li>
<li>JSON解析器： <code>compile &#39;com.squareup.retrofit2:converter-gson:2.1.0&#39;</code></li>
</ul>
</li>
<li><p>Proguard：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">-dontwarn retrofit2.**</div><div class="line">-keep class retrofit2.** &#123; *; &#125;</div><div class="line">-keepattributes Signature</div><div class="line">-keepattributes Exceptions</div><div class="line">	``` </div><div class="line"></div><div class="line"></div><div class="line">## 0x02 从一个demo开始</div><div class="line"></div><div class="line">``` java </div><div class="line">public class ExampleUnitTest &#123;</div><div class="line">    @Test</div><div class="line">    public void test_retrofit() throws Exception&#123;</div><div class="line">        String url = &quot;http://api.github.com/&quot;;</div><div class="line">        OkHttpClient client = new OkHttpClient.Builder()</div><div class="line">                .build();</div><div class="line">        Retrofit.Builder builder = new Retrofit.Builder()</div><div class="line">                .client(client)</div><div class="line">                .baseUrl(url)</div><div class="line">                .addConverterFactory(GsonConverterFactory.create());</div><div class="line">        Retrofit retrofit = builder.build();</div><div class="line">        GitHubService github = retrofit.create(GitHubService.class);</div><div class="line">        Call&lt;User&gt; ttdevs = github.userInfo(&quot;ttdevs&quot;);</div><div class="line"></div><div class="line">        final CountDownLatch countDownLatch = new CountDownLatch(1);</div><div class="line">        ttdevs.enqueue(new Callback&lt;User&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onResponse(Call&lt;User&gt; call, Response&lt;User&gt; response) &#123;</div><div class="line">                User ttdevs = response.body();</div><div class="line">                </div><div class="line">                String message = String.format(</div><div class="line">                        &quot;I&apos;m %s.\n%s&quot;, </div><div class="line">                        ttdevs.getName(), </div><div class="line">                        ttdevs.getHtml_url());</div><div class="line">                System.out.println(message);</div><div class="line"></div><div class="line">                countDownLatch.countDown();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onFailure(Call&lt;User&gt; call, Throwable t) &#123;</div><div class="line">                countDownLatch.countDown();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        countDownLatch.await();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="0x03-第一个问题：Header"><a href="/1970/01/01/[Retrofit]0x00初探/#0x03-第一个问题：Header" class="headerlink" title="0x03 第一个问题：Header"></a>0x03 第一个问题：Header</h2><p>执行上面的小demo，我们通过抓包发现它的header信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Host: api.github.com:443</div><div class="line">Proxy-Connection: Keep-Alive</div><div class="line">User-Agent: okhttp/3.3.0</div></pre></td></tr></table></figure>
<p>这个header信息是不是很简单，如果你用这样的请求去写爬虫的话，多数情况下是得不到结果的。而实际情况也是：我们需要在header中使用标准http头信息，也可能需要加入自定义的头信息，比如token等。Retrofit2没有直接给他们提供这样的方法，但是我们知道，Retrofit2用的是Okhttp3，因此，我们可以从Okhttp3中下手，代码如下：</p>
<ul>
<li><p>创建 <code>HeadersInterceptor</code> 类，代码如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeadersInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Request original = chain.request();</div><div class="line"></div><div class="line">        Request request = original.newBuilder()</div><div class="line">                .header(<span class="string">"User-Agent"</span>, <span class="string">"ttdevs"</span>)</div><div class="line">                .header(<span class="string">"Content-Type"</span>, <span class="string">"application/json; charset=utf-8"</span>)</div><div class="line">                .header(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>)</div><div class="line">                .header(<span class="string">"token"</span>, <span class="string">"abcdefg_ttdevs_hijklmn"</span>)</div><div class="line">                .header(<span class="string">"user_key"</span>, <span class="string">"ttdevs"</span>)</div><div class="line">                .method(original.method(), original.body())</div><div class="line">                .build();</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line">        String requestHeader = String.format(<span class="string">"&gt;&gt;&gt;&gt;&gt;Sending request %s on %s%n%s"</span>,</div><div class="line">                request.url(), chain.connection(), request.headers())</div><div class="line">        System.out.println(requestHeader);</div><div class="line"></div><div class="line">        Response response = chain.proceed(request);</div><div class="line"></div><div class="line">        <span class="keyword">long</span> t2 = System.nanoTime();</div><div class="line">        System.out.println(String.format(<span class="string">"&gt;&gt;&gt;&gt;&gt;Received response for %s in %.1fms%n%s"</span>,</div><div class="line">                response.request().url(), (t2 - t1) / <span class="number">1e6</span>d, response.headers()));</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"====================================================="</span>);</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在 <code>Okhttp</code> 中加入 <code>HeadersInterceptor</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">String url = <span class="string">"http://api.github.com/"</span>;</div><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">        .addInterceptor(<span class="keyword">new</span> HeadersInterceptor())</div><div class="line">        .build();</div><div class="line">Retrofit.Builder builder = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">        .client(client)</div><div class="line">        .baseUrl(url)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create());</div><div class="line">Retrofit retrofit = builder.build();</div><div class="line">GitHubService github = retrofit.create(GitHubService.class);</div><div class="line">Call&lt;User&gt; ttdevs = github.userInfo(<span class="string">"ttdevs"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这样在运行上面的代码，我们就可以在 Http 请求的 Header 中看到我们加入的信息了。</p>
<p>源码参考：<a href="https://github.com/ttdevs/android/tree/master/modules/retrofit" target="_blank" rel="external">ttdevs</a></p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[Retrofit]0x00初探/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://github.com/square/retrofit" target="_blank" rel="external">https://github.com/square/retrofit</a></li>
<li><a href="http://square.github.io/retrofit/" target="_blank" rel="external">http://square.github.io/retrofit/</a></li>
<li><a href="https://futurestud.io/blog/retrofit-add-custom-request-header" target="_blank" rel="external">https://futurestud.io/blog/retrofit-add-custom-request-header</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Retrofit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Volley」0x04一些细节]]></title>
      <url>/1970/01/01/%5BVolley%5D0x04%E4%B8%80%E4%BA%9B%E7%BB%86%E8%8A%82/</url>
      <content type="html"><![CDATA[<p>最近又把volley拿出来整理了下。之前没有遇到过的一些小问题又来了，在此记录下：</p>
<h2 id="1、HttpUrlConnection-DELETE-方式无法添加body的问题：java-net-ProtocolException"><a href="/1970/01/01/[Volley]0x04一些细节/#1、HttpUrlConnection-DELETE-方式无法添加body的问题：java-net-ProtocolException" class="headerlink" title="1、HttpUrlConnection DELETE 方式无法添加body的问题：java.net.ProtocolException:"></a>1、HttpUrlConnection DELETE 方式无法添加body的问题：java.net.ProtocolException:</h2><p>DELETE does not support writing</p>
<p>这个可以算是一个系统级的bug，为什么这么说，请看这里，这个问题在java8中才得以解决。没办法直接过去，咱就绕过去。查看HttpUrlConnection<br>，我们发现他是一个抽象类，因此可以试试能不能通过它的其他实现来达到我们的目的。最终我们决定使用 <a href="https://github.com/square/okhttp" target="_blank" rel="external"> okhttp
</a> 这个实现。地址为： <a href="https://github.com/square/okhttp" target="_blank" rel="external"><br>https://github.com/square/okhttp </a> 。</p>
<p>接着我们还得去看看volley的源码，由于我们的app兼容的最低版本是4.0，因此我们知道最终调用的是HurlStack：</p>
<pre><code>    public static RequestQueue newRequestQueue(Context context, HttpStack stack) {
...
        if (stack == null) {
            if (Build.VERSION.SDK_INT &gt;= 9) {
                stack = new HurlStack();
            } else {
                // Prior to Gingerbread, HttpUrlConnection was unreliable.
                // See: http://android-developers.blogspot.com/2011/09/androids-http-clients.html
                stack = new HttpClientStack(AndroidHttpClient.newInstance(userAgent));
            }
        }
...
    }
</code></pre><p>因此我们只需要将HurlStack的相关代码修改即可，如下：</p>
<p>volley.java</p>
<pre><code>public static RequestQueue newRequestQueue(Context context, HttpStack stack) {
...
        if (stack == null) {
            if (Build.VERSION.SDK_INT &gt;= 9) {
                // old way: stack = new HurlStack();
                    // http://square.github.io/okhttp/
                stack = new HurlStack(null, null, new OkUrlFactory(new OkHttpClient()));
            } else {
                // Prior to Gingerbread, HttpUrlConnection was unreliable.
                // See: http://android-developers.blogspot.com/2011/09/androids-http-clients.html
                stack = new HttpClientStack(AndroidHttpClient.newInstance(userAgent));
            }
        }
...
    }
</code></pre><p>HurlStack.java</p>
<pre><code>/**
 * An {@link HttpStack} based on {@link HttpURLConnection}.
 */
public class HurlStack implements HttpStack {

    private final OkUrlFactory mOkUrlFactory; 

    /**
     * @param urlRewriter Rewriter to use for request URLs
     * @param sslSocketFactory SSL factory to use for HTTPS connections
     * @param okUrlFactory solution delete body(https://github.com/square/okhttp)
     */
    public HurlStack(UrlRewriter urlRewriter, SSLSocketFactory sslSocketFactory, OkUrlFactory okUrlFactory) {
        mUrlRewriter = urlRewriter;
        mSslSocketFactory = sslSocketFactory;
        mOkUrlFactory = okUrlFactory;
    }
    /**
     * Create an {@link HttpURLConnection} for the specified {@code url}.
     */
    protected HttpURLConnection createConnection(URL url) throws IOException {
        if(null != mOkUrlFactory){
            return mOkUrlFactory.open(url);
        }
        return (HttpURLConnection) url.openConnection();
    }


    @SuppressWarnings(&quot;deprecation&quot;)
    /* package */ 
    static void setConnectionParametersForRequest(HttpURLConnection connection,
            Request&lt;?&gt; request) throws IOException, AuthFailureError {
        switch (request.getMethod()) {
            ...
            case Method.DELETE:
                connection.setRequestMethod(&quot;DELETE&quot;);
                addBodyIfExists(connection, request);
                break;
            ...
            default:
                throw new IllegalStateException(&quot;Unknown method type.&quot;);
        }
    }

...
}
</code></pre><p>2015-04-26更新：</p>
<p>再次使用到需要使用到okhttp，回头看下上面的代码，不知道当时怎么想的，使用这么复杂的方法引入Okhttp，估计是脑袋进水了。再来看下这个方法：newRe<br>questQueue(Context context, HttpStack<br>stack)，有两个参数：context和HttpStack，这里是要传入自己的HttpStack就好了。那么我们用OKhttp的实现：</p>
<pre><code>/**
 * An {@link com.android.volley.toolbox.HttpStack HttpStack} implementation which
 * uses OkHttp as its transport.
 */
public class OkHttpStack extends HurlStack {
  private final OkHttpClient client;

  public OkHttpStack() {
    this(new OkHttpClient());
  }

  public OkHttpStack(OkHttpClient client) {
    if (client == null) {
      throw new NullPointerException(&quot;Client must not be null.&quot;);
    }
    this.client = client;
  }

  @Override protected HttpURLConnection createConnection(URL url) throws IOException {
    return client.open(url);
  }   
}
</code></pre><p>参考： <a href="https://gist.github.com/JakeWharton/5616899" target="_blank" rel="external"> https://gist.github.com/JakeWharton/5616899
</a></p>
<h2 id="2、关于（修改）volley的缓存"><a href="/1970/01/01/[Volley]0x04一些细节/#2、关于（修改）volley的缓存" class="headerlink" title="2、关于（修改）volley的缓存"></a>2、关于（修改）volley的缓存</h2><p>volley有完整的一套缓存机制。而目前我们想做个简单的需求：部分界面（几乎不会改动的）简单的做一定时间的缓存，研究了下代码发现很容易修改达到自己的目的（有<br>时间在分析下volley的缓存机制，这个一定要做）。简单来说修改一个地方：request.  parseNetworkResponse中的</p>
<p>HttpHeaderParser（此处突然感慨volley的设计TMD灵活了，想怎么改就怎么改）。  HttpHeaderParser修改后的代码如下：</p>
<pre><code>/**
 * 修改后的，用户处理缓存
 */
public class BHHttpHeaderParser {

    /**
     * Extracts a {@link Cache.Entry} from a {@link NetworkResponse}.
     *
     * @param response The network response to parse headers from
     * @return a cache entry for the given response, or null if the response is not cacheable.
     */
    public static Cache.Entry parseCacheHeaders(NetworkResponse response, boolean isCustomCache) {
...
        if(isCustomCache){
                softExpire = now + Config.HTTP_CACHE_TTL;
        } else {
                if (hasCacheControl) {
                softExpire = now + maxAge * 1000;
            } else if (serverDate &gt; 0 &amp;&amp; serverExpires &gt;= serverDate) {
                // Default semantic for Expire header in HTTP specification is softExpire.
                softExpire = now + (serverExpires - serverDate);
            }
        }

        Cache.Entry entry = new Cache.Entry();
        entry.data = response.data;
        entry.etag = serverEtag;
        entry.softTtl = softExpire;
        entry.ttl = entry.softTtl;
        entry.serverDate = serverDate;
        entry.responseHeaders = headers;

        return entry;
    }
...
}
</code></pre><p>此处大家可以发现，我们主要是根据自定义的变量决定如何修改cache的TTL来达到自己的目的。</p>
<h1 id="3、HttpUrlConnection与PATCH（2015-04-26）"><a href="/1970/01/01/[Volley]0x04一些细节/#3、HttpUrlConnection与PATCH（2015-04-26）" class="headerlink" title="3、HttpUrlConnection与PATCH（2015-04-26）"></a>3、HttpUrlConnection与PATCH（2015-04-26）</h1><p>在使用Volley发送PATCH请求的时候，我们可能会遇到这样的问题：Unknown method ‘PATCH’; must be one of<br>[OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE]。这个时候你的第一反应是什么呢？是Volley不支持PATCH请<br>求吗？换成OkHttp是不是可以呢？查看了下Volley的源码，在HurlHttp.java中发现如下一段：</p>
<pre><code>/* package */ 
static void setConnectionParametersForRequest(HttpURLConnection connection,
            Request&lt;?&gt; request) throws IOException, AuthFailureError {
        switch (request.getMethod()) {
            case Method.DEPRECATED_GET_OR_POST:
                // This is the deprecated way that needs to be handled for backwards compatibility.
                // If the request&apos;s post body is null, then the assumption is that the request is
                // GET.  Otherwise, it is assumed that the request is a POST.
                byte[] postBody = request.getPostBody();
                if (postBody != null) {
                    // Prepare output. There is no need to set Content-Length explicitly,
                    // since this is handled by HttpURLConnection using the size of the prepared
                    // output stream.
                    connection.setDoOutput(true);
                    connection.setRequestMethod(&quot;POST&quot;);
                    connection.addRequestProperty(HEADER_CONTENT_TYPE,
                            request.getPostBodyContentType());
                    DataOutputStream out = new DataOutputStream(connection.getOutputStream());
                    out.write(postBody);
                    out.close();
                }
                break;
            case Method.GET:
                // Not necessary to set the request method because connection defaults to GET but
                // being explicit here.
                connection.setRequestMethod(&quot;GET&quot;);
                break;
            case Method.DELETE:
                connection.setRequestMethod(&quot;DELETE&quot;);
                break;
            case Method.POST:
                connection.setRequestMethod(&quot;POST&quot;);
                addBodyIfExists(connection, request);
                break;
            case Method.PUT:
                connection.setRequestMethod(&quot;PUT&quot;);
                addBodyIfExists(connection, request);
                break;
            case Method.HEAD:
                connection.setRequestMethod(&quot;HEAD&quot;);
                break;
            case Method.OPTIONS:
                connection.setRequestMethod(&quot;OPTIONS&quot;);
                break;
            case Method.TRACE:
                connection.setRequestMethod(&quot;TRACE&quot;);
                break;
            case Method.PATCH:
                connection.setRequestMethod(&quot;PATCH&quot;);
                addBodyIfExists(connection, request);
                break;
            default:
                throw new IllegalStateException(&quot;Unknown method type.&quot;);
        }
    }
</code></pre><p>通过这段代码，我们知道，Volley对PATCH还是支持的。在细看下错误这个是有HttpUrlConnection抛出的。因此我们需要在这方面下手。这里有一<br>个参考：</p>
<p><a href="https://github.com/adriancole/retrofit/commit/e704b800878b2e37f5a
c98b0139cb4994618ace0" target="_blank" rel="external"> https://github.com/adriancole/retrofit/commit/e704b800878b2e37f5ac98b0139cb4<br>994618ace0 </a>  </p>
<p>以后有其他关于volley的总结都记录在此。  </p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Volley </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Wechat」微信公众号开发流程]]></title>
      <url>/1970/01/01/%5BWechat%5D%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="0x01申请订阅号或者服务号"><a href="/1970/01/01/[Wechat]微信公众号开发流程/#0x01申请订阅号或者服务号" class="headerlink" title="0x01申请订阅号或者服务号"></a>0x01申请订阅号或者服务号</h2><p>微信有三种号：订阅号，公众号，服务号，所有人都可以注册订阅号，个人很难注册公众号和服务号；订阅号不能认证，开放的接口也是最少的。既然做开发，这种肯定不好使。因此我们需要选择订阅号或者服务号来做开发。自己没办法注册，可以考虑万能的淘宝。或者我们也可以使用<a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="external">测试账号</a></p>
<h2 id="0x02-服务器功能开发"><a href="/1970/01/01/[Wechat]微信公众号开发流程/#0x02-服务器功能开发" class="headerlink" title="0x02 服务器功能开发"></a>0x02 服务器功能开发</h2><h3 id="配置自己的服务器"><a href="/1970/01/01/[Wechat]微信公众号开发流程/#配置自己的服务器" class="headerlink" title="配置自己的服务器"></a>配置自己的服务器</h3><p>在开发之前我们需要进行服务器的配置，这个不涉及具体的语言。登录微信后台，在 开发 &gt; 基本配置 &gt; 服务器配置 中进行配置。这里需要配置四个参数：</p>
<ul>
<li><p>URL</p>
<p>  这个是我们服务器的地址，必须是80端口。微信会把所有的事件和消息等都推送到这个地址上。</p>
</li>
<li><p>Token</p>
<p>  这个Token是我们分配给微信的</p>
</li>
<li><p>EncodingAESKey</p>
<p>  微信消息的加密秘钥</p>
</li>
<li><p>消息加解密方式</p>
<p>  没有特殊要求我们可以选择明文模式</p>
</li>
</ul>
<p>更多信息可以参考<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">这里</a>。</p>
<h3 id="微信服务器验证"><a href="/1970/01/01/[Wechat]微信公众号开发流程/#微信服务器验证" class="headerlink" title="微信服务器验证"></a>微信服务器验证</h3><p>如果我们直接配置了上面的参数，是无法保存的，只有在我们配置的地址正确处理了微信的验证请求之后才可以保存成功。过程是这样的，微信会以get方式向我们配置的地址发一个请求，这个请求带了验证信息，和返回的字符串，他们分别是 <code>signature</code>、 <code>timestamp</code>、 <code>nonce</code>、 <code>echostr</code>，前三个参数用于验证，后一个用于返回微信。如果我们按照规则验证参数是正确的（这里会用到我们配置的Token），将echostr字段的信息返回，这样就可以保存了。当然，你也可以不做验证直接返回echostr参数内容也是可以，但是不推荐这样做。更多信息可以参考<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">这里</a>。</p>
<h3 id="微信事件处理"><a href="/1970/01/01/[Wechat]微信公众号开发流程/#微信事件处理" class="headerlink" title="微信事件处理"></a>微信事件处理</h3><p>配置了上面的参数我们就可以处理微信发给我们的各种信息了。微信所有信息都是以POST的方式发送到我们之前配置的地址上。在URL参数中会携带四个参数<code>signature</code>、 <code>timestamp</code>、 <code>nonce</code>和<code>openid</code>，数据部分在body中。按照微信的接口协议，我们就可以开始微信功能开发了。</p>
<p>最后，无论是实用的是什么语言，都建议你去找一份封装的SDK来使用。这样可以大大的增加你的开发效率，当然，如果你是像我一样为了学习，可以自己去解析这些xml格式的消息～～</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Wechat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「macOS」Crontab定时任务]]></title>
      <url>/1970/01/01/%5BmacOS%5DCrontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>我们可以使用crontab执行一些周期任务</p>
<h2 id="0x01-crontab命令"><a href="/1970/01/01/[macOS]Crontab定时任务/#0x01-crontab命令" class="headerlink" title="0x01 crontab命令"></a>0x01 crontab命令</h2><p>crontab [-u user] file</p>
<p>crontab [-u user] { -e | -l | -r }</p>
<ul>
<li><code>crontab file_name</code></li>
</ul>
<p>将file做为crontab的任务列表文件并载入crontab</p>
<ul>
<li><code>crontab -e</code></li>
</ul>
<p>编辑crontab文件内容</p>
<ul>
<li><code>crontab -l</code></li>
</ul>
<p>显示crontab文件内容</p>
<ul>
<li><code>crontab -r</code></li>
</ul>
<p>删除载入后的crontab文件内容</p>
<h2 id="0x02-crontab文件"><a href="/1970/01/01/[macOS]Crontab定时任务/#0x02-crontab文件" class="headerlink" title="0x02 crontab文件"></a>0x02 crontab文件</h2><ul>
<li><p><code>分</code> <code>时</code> <code>日</code> <code>月</code> <code>星期</code> <code>要运行的命令</code></p>
<ul>
<li>第1列 分钟1～59</li>
<li>第2列 小时1～23（0表示子夜）</li>
<li>第3列 日1～31</li>
<li>第4列 月1～12</li>
<li>第5列 星期0～7（0,7表示星期天）</li>
<li>第6列 要运行的命令</li>
</ul>
</li>
<li><p>几个特殊符号：<code>/</code> <code>-</code> <code>,</code></p>
<ul>
<li><code>/</code> 每(per): <code>*/2</code> 每两个单位</li>
<li><code>-</code> 连续: <code>1-5</code> 1,2,3,4,5</li>
<li><code>,</code> 非连续: <code>1,2,5</code> 1和2和5</li>
</ul>
</li>
</ul>
<h2 id="0x03-Demo"><a href="/1970/01/01/[macOS]Crontab定时任务/#0x03-Demo" class="headerlink" title="0x03 Demo"></a>0x03 Demo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># 每分钟向用户目录下的log.txt写入当时日期</div><div class="line">* * * * * /bin/date &gt;&gt; ~/log.txt </div><div class="line"></div><div class="line"># 每分钟</div><div class="line">* * * * * /bin/date &gt;&gt; ~/log.txt</div><div class="line"></div><div class="line"># 每5分钟</div><div class="line">*/5 * * * * /bin/date &gt;&gt; ~/log.txt</div><div class="line"></div><div class="line"># 每小时的第五分钟</div><div class="line">5 * * * * /bin/date &gt;&gt; ~/log.txt </div><div class="line"></div><div class="line"># 4月1日早上8点</div><div class="line">0 8 1 4 * /bin/date &gt;&gt; ~/log.txt </div><div class="line"></div><div class="line"># 4和5月 1日早上8点</div><div class="line">0 8 1 4,5 * /bin/date &gt;&gt; ~/log.txt </div><div class="line"></div><div class="line"># 12306</div><div class="line">23-7 * * * * /bin/date &gt;&gt; ~/log.txt</div></pre></td></tr></table></figure>
<h1 id="更新-2015-03-26"><a href="/1970/01/01/[macOS]Crontab定时任务/#更新-2015-03-26" class="headerlink" title="更新(2015-03-26)"></a>更新(2015-03-26)</h1><h2 id="0x01-crontab辅助工具"><a href="/1970/01/01/[macOS]Crontab定时任务/#0x01-crontab辅助工具" class="headerlink" title="0x01 crontab辅助工具"></a>0x01 crontab辅助工具</h2><p>这个工具可以生成crontab文件。比如我们按照自己的想法选择了任务的时间，可以使用它帮助我们生成对应的crontab文件。</p>
<p>地址：<a href="http://www.crontab-generator.org/" target="_blank" rel="external">http://www.crontab-generator.org/</a></p>
<h2 id="0x02-crontab的调试"><a href="/1970/01/01/[macOS]Crontab定时任务/#0x02-crontab的调试" class="headerlink" title="0x02 crontab的调试"></a>0x02 crontab的调试</h2><p>这个建议在命令的后面加上 <code>... &gt;&gt; ~/log.txt 2&gt;&amp;1</code>，这样我们就可以在用户目录下看到crontab执行的日志了。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * /bin/date &gt;&gt; ~/log.txt &gt;&gt; ~/log.txt 2&gt;&amp;1</div></pre></td></tr></table></figure>
<h2 id="0x03-环境变量"><a href="/1970/01/01/[macOS]Crontab定时任务/#0x03-环境变量" class="headerlink" title="0x03 环境变量"></a>0x03 环境变量</h2><p>虽然我们知道crontab执行时是没有环境变量的，但是这个确是个讨厌的东西。我们在本地调试好了相关的代码，用crontab却怎么执行也不正确，比如执行下面的shell：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">py3=$(which python3)</div><div class="line">echo py3</div><div class="line">...</div></pre></td></tr></table></figure>
<p>默认情况什么也不会输出。下面的逻辑自然就是错的了。为了解决这个问题，我们可以在最开始加上这么一行 <code>source /etc/profile</code> ，然后在执行就可以顺利拿到我们的值了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">source /etc/profile</div><div class="line">py3=$(which python3)</div><div class="line">echo py3</div><div class="line">...</div></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「macOS」Mac一句话分享]]></title>
      <url>/1970/01/01/%5BmacOS%5DMac%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<p>window下直接输入msconfig打开系统配置即可，在这里可以配置是否允许开机自启动。MAC下最近装了几个软件，发现每次开机都会自动运行，比较烦躁，遂干掉之：</p>
<p>打开系统偏好设置&gt;选择用户与群组&gt;在当前用户的右侧选择登录项，在这里即可添加删除我们要的程序。</p>
<p><img src="http://img.blog.csdn.net/20150308114522999?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「WebSocket」使用Websocket实现消息推送(下)]]></title>
      <url>/1970/01/01/%5BWebSocket%5D%E4%BD%BF%E7%94%A8Websocket%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81(%E4%B8%8B)/</url>
      <content type="html"><![CDATA[<h2 id="0x00-WebSocket"><a href="/1970/01/01/[WebSocket]使用Websocket实现消息推送(下)/#0x00-WebSocket" class="headerlink" title="0x00 WebSocket"></a>0x00 WebSocket</h2><p>上一篇使用 <a href="https://github.com/TooTallNate/Java-WebSocket" target="_blank" rel="external">Java-WebSocket</a> 写了一套 <code>WebSocket</code> 的Demo，这一篇着重分析下<code>WebSocket</code> 的一些实现细节，更加详细的协议细节可参考 <a href="https://datatracker.ietf.org/doc/rfc6455/" target="_blank" rel="external">RFC6455</a>。</p>
<h2 id="0x01-WebSocket协议"><a href="/1970/01/01/[WebSocket]使用Websocket实现消息推送(下)/#0x01-WebSocket协议" class="headerlink" title="0x01 WebSocket协议"></a>0x01 WebSocket协议</h2><ul>
<li><code>WebSocket</code> 协议:  可参考<a href="https://datatracker.ietf.org/doc/rfc6455/" target="_blank" rel="external">RFC6455</a></li>
<li>抓包工具：<code>Charles</code> 和 <code>WireShark</code></li>
<li>测试代码：参考上一篇Demo</li>
</ul>
<h2 id="0x02-数据传输"><a href="/1970/01/01/[WebSocket]使用Websocket实现消息推送(下)/#0x02-数据传输" class="headerlink" title="0x02 数据传输"></a>0x02 数据传输</h2><ul>
<li><p>连接和断开</p>
<p>  当 Client 向 Server 发起 ws 连接请求后，会先使用 HTTP 协议建立 TCP 长链接，通过抓包，我们会看到类似这样的信息：</p>
<p>  Request：</p>
<p>  <img src="http://img.blog.csdn.net/20160910174128237" alt="Charles Request"></p>
<p>  Response：</p>
<p>  <img src="http://img.blog.csdn.net/20160910175927683" alt="Charles Response"></p>
<p>  这里简单介绍几个关键的Header字段：</p>
<ul>
<li>upgrade:websocket</li>
<li>connection:Upgrade</li>
<li>sec-websocket-version:13</li>
<li>sec-websocket-key:xxxxxx</li>
<li><p>sec-websocket-accept:</p>
<p>这些字段的信息可参考<a href="http://www.jianshu.com/p/867274a5e054" target="_blank" rel="external">这里</a>。</p>
</li>
</ul>
</li>
<li><p>数据传输</p>
<p>  当 HTTP 连接建立之后，就可以通过这个长链接进行数据传输了。如果你使用 Charles 进行数据抓包的话，可以看到类似下图中这样的聊天内容：</p>
<p>  <img src="http://img.blog.csdn.net/20160910180038193" alt="Charles websocket Chat"></p>
<p>   在同一个 HTTP 请求中，我们看到不断有数据交互，而不是像之前的 HTTP 请求那样，每发送一条数据，都需要发起一次新的请求。</p>
<p>  下面我们来尝试分析一下。这里要用到Wireshark。可能你会为什么换了Wireshark而不用Charles了？原因很简单，Charles给我们呈现的是应用层最终的结果，而传输层的具体的数据包发送接收却不能展示，这个时候就需要借助Wireshark来对TCP数据包进行分析了。</p>
<p>  首先，查询 <a href="https://datatracker.ietf.org/doc/rfc6455/" target="_blank" rel="external">RFC6455</a>文档，我们得知 ws 协议的数据包格式如下：</p>
<p>  <img src="http://img.blog.csdn.net/20160910181202338" alt="RFC6455 Frame"></p>
<p>  有了这个参考，我们就可以进行数据分析了。下面是我的一次数据收发过程：客户端向服务端发送数据：123456789，然后服务端原样发回，抓包如下：</p>
<p>  Sender：</p>
<p>  <img src="http://img.blog.csdn.net/20160911195743125" alt="WireShark sender">    </p>
<p>  Receiver：</p>
<p>  <img src="http://img.blog.csdn.net/20160911195848240" alt="WireShark receiver"></p>
<p>  下面我们着重对这两个数据包进行分析。细心的你可能会发现，截图中有四条数据，如果你对TCP的传输有所了解，第二条和第三条是确认报文。</p>
<p>  我们先看下接收到数据。点击数据中的 Data(11bytes) 部分，下方是自动选择了数据部分：8109313233343536373839。（在此之前是TCP报文的Header部分，我们可以忽略）根据 ws 协议，我们将其展开：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">81 09:  10000001 00001001 </div><div class="line">31 32:  00110001 00110010</div><div class="line">33 34:  00110011 00110100</div><div class="line">35 36:  00110101 00110110</div><div class="line">37 38:  00110111 00111000</div><div class="line">39   :  00111001</div><div class="line">``` 	</div><div class="line">0：1，这是最后一帧</div><div class="line">1～3：全为0</div><div class="line">4～7：001，附加数据帧</div><div class="line">8：0，PlayloadData未经过掩码</div><div class="line"> 9～15：0001001 = 9 &lt; 125，因此数据长度位9</div><div class="line"> 剩下的：313233343536373839即为数据 123456789</div><div class="line"></div><div class="line">再来看看发送的数据。点击 Data(15bytes) 部分，下方的数据部分：818911eb9db220d9ae8624ddaa8a28，展开：</div><div class="line"></div><div class="line">``` shell</div><div class="line">81 89 : 10000001 10001001 </div><div class="line">11 eb : 00010001 11101011</div><div class="line">9d b2 : 10011101 10110010</div><div class="line">20 d9 : 00100000 11011001</div><div class="line">ae 86 : 10101110 10000110</div><div class="line">24 dd : 00100100 11011101</div><div class="line">aa 8a : 10101010 10001010</div><div class="line">28    : 00101000</div></pre></td></tr></table></figure>
<p>  0：1，这是最后一帧<br>  1～3：全为0<br>  4～7：001，附加数据帧<br>  8：1，PlayloadData经过掩码，（所有的由客户端发往服务端的帧此数位都被设置成 1。）<br>   9～15：0001001 = 9 &lt; 125，因此数据长度位9<br>   11 eb 9d b2：掩码<br>   20 d9 ae 86 24 dd aa 8a 28：数据<br>  关于掩码的计算：<br>  <img src="http://img.blog.csdn.net/20160911203233422" alt="掩码的计算"></p>
</li>
<li><p>连接保持</p>
<p>  除了正常的数据传输之外，Socket编程还有一个重要的组成部分：心跳保持。ws协议中定义了专门的数据包：</p>
<blockquote>
<p>  Control frames are identified by opcodes where the most significant bit of the opcode is 1.  Currently defined opcodes for control frames include 0x8 (Close), 0x9 (Ping), and 0xA (Pong).  Opcodes 0xB-0xF are reserved for further control frames yet to be defined.<br>Control frames are used to communicate state about the WebSocket. Control frames can be interjected in the middle of a fragmented message.<br>All control frames MUST have a payload length of 125 bytes or less and MUST NOT be fragmented.</p>
</blockquote>
</li>
<li><p>其他</p>
<p>  一个协议不可能就这么简单，如果你还想了解更多，可参考<a href="https://datatracker.ietf.org/doc/rfc6455/" target="_blank" rel="external">RFC6455</a>。</p>
</li>
</ul>
<h2 id="0xFF-参考"><a href="/1970/01/01/[WebSocket]使用Websocket实现消息推送(下)/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="http://www.jianshu.com/p/867274a5e054" target="_blank" rel="external">http://www.jianshu.com/p/867274a5e054</a></li>
<li><a href="http://www.jianshu.com/p/fc09b0899141" target="_blank" rel="external">http://www.jianshu.com/p/fc09b0899141</a></li>
<li><a href="https://datatracker.ietf.org/doc/rfc6455/" target="_blank" rel="external">https://datatracker.ietf.org/doc/rfc6455/</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/WebSockets/Writing_WebSocket_servers" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/WebSockets/Writing_WebSocket_servers</a></li>
</ol>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WebSocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「WebSocket」使用Websocket实现消息推送(心跳)]]></title>
      <url>/1970/01/01/%5BWebSocket%5D%E4%BD%BF%E7%94%A8Websocket%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81(%E5%BF%83%E8%B7%B3)/</url>
      <content type="html"><![CDATA[<h2 id="0x00-心跳"><a href="/1970/01/01/[WebSocket]使用Websocket实现消息推送(心跳)/#0x00-心跳" class="headerlink" title="0x00 心跳"></a>0x00 心跳</h2><p>本来以为写完了，结果最近和一个同事在讨论心跳的事情，这里再做一个补充。先说我的结论：</p>
<ul>
<li>WebSocket协议已经设计了心跳，这个功能可以到达检测链接是否可用</li>
<li>心跳是用来检测链接是否可用的，不一定支持携带数据，可要看具体实现</li>
<li>如果非要心跳中带上复杂数据，那这个可作为应用层的一个功能自己去实现。</li>
</ul>
<p><img src="http://img.blog.csdn.net/20170317140005670?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="心跳逻辑"></p>
<h2 id="0x01-WebSocket协议的控制帧"><a href="/1970/01/01/[WebSocket]使用Websocket实现消息推送(心跳)/#0x01-WebSocket协议的控制帧" class="headerlink" title="0x01 WebSocket协议的控制帧"></a>0x01 WebSocket协议的控制帧</h2><p>上一篇的最后简单提到了心跳，下面是对websocket协议控制帧的描述：</p>
<pre><code>5.5.  Control Frames

   Control frames are identified by opcodes where the most significant
   bit of the opcode is 1.  Currently defined opcodes for control frames
   include 0x8 (Close), 0x9 (Ping), and 0xA (Pong).  Opcodes 0xB-0xF are
   reserved for further control frames yet to be defined.

   Control frames are used to communicate state about the WebSocket.
   Control frames can be interjected in the middle of a fragmented
   message.

   All control frames MUST have a payload length of 125 bytes or less
   and MUST NOT be fragmented.
</code></pre><ul>
<li>Ping的协议头是0x9，Pong的协议头是0xA</li>
<li>控制帧最大载荷为125bytes且不能拆分</li>
</ul>
<h2 id="0x02-WebSocket协议的心跳"><a href="/1970/01/01/[WebSocket]使用Websocket实现消息推送(心跳)/#0x02-WebSocket协议的心跳" class="headerlink" title="0x02 WebSocket协议的心跳"></a>0x02 WebSocket协议的心跳</h2><p>下面再来看看对心跳的规定：</p>
<pre><code>5.5.2.  Ping

   The Ping frame contains an opcode of 0x9.

   A Ping frame MAY include &quot;Application data&quot;.
   // 注：Ping帧中可能会携带数据

   Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in
   response, unless it already received a Close frame.  It SHOULD
   respond with Pong frame as soon as is practical.  Pong frames are
   discussed in Section 5.5.3.
   // 注：在收到Ping帧后，端点必须发送Pong帧响应，除非已经收到了Close帧。在实际中应尽可能快的响应。

   An endpoint MAY send a Ping frame any time after the connection is
   established and before the connection is closed.

   NOTE: A Ping frame may serve either as a keepalive or as a means to
   verify that the remote endpoint is still responsive.

5.5.3.  Pong

   The Pong frame contains an opcode of 0xA.

   Section 5.5.2 details requirements that apply to both Ping and Pong
   frames.

   A Pong frame sent in response to a Ping frame must have identical
   &quot;Application data&quot; as found in the message body of the Ping frame
   being replied to.
   // 注：在响应Ping帧的的Pong帧中，必须携和被响应的Ping帧中相同的数据。

   If an endpoint receives a Ping frame and has not yet sent Pong
   frame(s) in response to previous Ping frame(s), the endpoint MAY
   elect to send a Pong frame for only the most recently processed Ping
   frame.
</code></pre><p>从上面的描述我们可以得到如下结论：</p>
<ul>
<li>心跳包中可能会携带数据</li>
<li>当收到Ping帧的时候需要立即返回一个Pong帧</li>
<li>在连接建立之后，随时都可以发送Ping帧</li>
<li>心跳是用来测试链接是否存在和对方是否在线</li>
<li>在响应Ping帧的的Pong帧中，必须携和被响应的Ping帧中相同的数据</li>
</ul>
<h2 id="0x03-测试"><a href="/1970/01/01/[WebSocket]使用Websocket实现消息推送(心跳)/#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h2><p>和之前一样，自己本地搭建的服务器，用的库是 <code>org.java_websocket</code>。<br>在其源码中我们可以找到这样一段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.java_websocket;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketAdapter</span> <span class="keyword">implements</span> <span class="title">WebSocketListener</span> </span>&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWebsocketPing</span><span class="params">(WebSocket conn, Framedata f)</span> </span>&#123;</div><div class="line">        FramedataImpl1 resp = <span class="keyword">new</span> FramedataImpl1(f);</div><div class="line">        resp.setOptcode(Opcode.PONG);</div><div class="line">        conn.sendFrame(resp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWebsocketPong</span><span class="params">(WebSocket conn, Framedata f)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>客户端也可以使用这个库，相同的逻辑，代码也是这一份。</p>
<p>然后我们再换一个库，<code>com.squareup.okhttp3:okhttp-ws:3.4.2</code>，他的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> okhttp3.internal.ws;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RealWebSocket</span> <span class="keyword">implements</span> <span class="title">WebSocket</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RealWebSocket</span><span class="params">(<span class="keyword">boolean</span> isClient, BufferedSource source, BufferedSink sink, Random random,</span></span></div><div class="line">      <span class="keyword">final</span> Executor replyExecutor, <span class="keyword">final</span> WebSocketListener listener, <span class="keyword">final</span> String url) &#123;</div><div class="line">    <span class="keyword">this</span>.listener = listener;</div><div class="line"></div><div class="line">    writer = <span class="keyword">new</span> WebSocketWriter(isClient, sink, random);</div><div class="line">    reader = <span class="keyword">new</span> WebSocketReader(isClient, source, <span class="keyword">new</span> FrameCallback() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(ResponseBody message)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        listener.onMessage(message);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPing</span><span class="params">(<span class="keyword">final</span> Buffer buffer)</span> </span>&#123;</div><div class="line">        replyExecutor.execute(<span class="keyword">new</span> NamedRunnable(<span class="string">"OkHttp %s WebSocket Pong Reply"</span>, url) &#123;</div><div class="line">          <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">              writer.writePong(buffer);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPong</span><span class="params">(Buffer buffer)</span> </span>&#123;</div><div class="line">        listener.onPong(buffer);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> code, <span class="keyword">final</span> String reason)</span> </span>&#123;</div><div class="line">        readerSentClose = <span class="keyword">true</span>;</div><div class="line">        replyExecutor.execute(<span class="keyword">new</span> NamedRunnable(<span class="string">"OkHttp %s WebSocket Close Reply"</span>, url) &#123;</div><div class="line">          <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">            peerClose(code, reason);</div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在处理Ping帧的时候，也是将协议字段改为Pong然后返回。</p>
<p>对心跳的测试代码已经上传到Github：<a href="https://github.com/ttdevs" target="_blank" rel="external">ttdevs</a><br><a href="https://github.com/ttdevs/android/blob/master/app/src/main/java/com/ttdevs/android/WebSocketActivity.java" target="_blank" rel="external">WebSocketActivity.java</a><br><a href="https://github.com/ttdevs/android/blob/master/app/src/main/java/com/ttdevs/android/WebSocketOKActivity.java" target="_blank" rel="external">WebSocketOKActivity.java</a><br><a href="https://github.com/ttdevs/android/blob/master/modules/webscoket/src/main/java/com/ttdevs/webscoket/SocketServer.java" target="_blank" rel="external">SocketServer.java</a></p>
<p>在实际的测试中，可能会遇到一些异常，比如在我们自己的生产环境：当客户端发送带了简单数据的Ping帧后，服务器立马返回Pong帧，但是它会将携带的数据丢弃。这个就是服务端的问题了。</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[WebSocket]使用Websocket实现消息推送(心跳)/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li>RFC6455: <a href="https://datatracker.ietf.org/doc/rfc6455/" target="_blank" rel="external">https://datatracker.ietf.org/doc/rfc6455/</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WebSocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「macOS」用Homebrew安装Mysql]]></title>
      <url>/1970/01/01/%5BmacOS%5D%E7%94%A8Homebrew%E5%AE%89%E8%A3%85Mysql/</url>
      <content type="html"><![CDATA[<h2 id="0x00-需求"><a href="/1970/01/01/[macOS]用Homebrew安装Mysql/#0x00-需求" class="headerlink" title="0x00 需求"></a>0x00 需求</h2><p>简单记录mac下mysql安装。这里需要一个前提——先安装 <a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external"><code>homebrew</code></a>，具体可以参考<a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">这里</a>。</p>
<h2 id="0x01-安装"><a href="/1970/01/01/[macOS]用Homebrew安装Mysql/#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">➜  ~ brew install mysql</div><div class="line">＃ 以下为删除上个版本的遗留</div><div class="line">➜  ~ cd /usr/local/var/mysql</div><div class="line">➜  mysql git:(master) ls</div><div class="line">auto.cnf           ib_buffer_pool     mysql              server-cert.pem</div><div class="line">ca-key.pem         ib_logfile0        mysqld_safe.pid    server-key.pem</div><div class="line">ca.pem             ib_logfile1        performance_schema sys</div><div class="line">client-cert.pem    ibdata1            private_key.pem    ttdevs.local.err</div><div class="line">client-key.pem     ibtmp1             public_key.pem     ttdevs.local.pid</div><div class="line">➜  mysql git:(master) rm -rf ttdevs.local.err</div><div class="line">➜  mysql git:(master) cd ~</div><div class="line">＃ 以上为删除上个版本的遗留</div></pre></td></tr></table></figure>
<blockquote>
<p>卸载： <code>brew uninstall mysql</code></p>
</blockquote>
<h2 id="0x02-配置"><a href="/1970/01/01/[macOS]用Homebrew安装Mysql/#0x02-配置" class="headerlink" title="0x02 配置"></a>0x02 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">➜  ~ /usr/local/opt/mysql/bin/mysql_secure_installation</div><div class="line"></div><div class="line">Securing the MySQL server deployment.</div><div class="line"></div><div class="line">Connecting to MySQL using a blank password.</div><div class="line"></div><div class="line">VALIDATE PASSWORD PLUGIN can be used to test passwords</div><div class="line">and improve security. It checks the strength of password</div><div class="line">and allows the users to set only those passwords which are</div><div class="line">secure enough. Would you like to setup VALIDATE PASSWORD plugin?</div><div class="line"></div><div class="line">Press y|Y for Yes, any other key for No:</div><div class="line">Please set the password for root here.</div><div class="line"></div><div class="line">New password:</div><div class="line"></div><div class="line">Re-enter new password:</div><div class="line">By default, a MySQL installation has an anonymous user,</div><div class="line">allowing anyone to log into MySQL without having to have</div><div class="line">a user account created for them. This is intended only for</div><div class="line">testing, and to make the installation go a bit smoother.</div><div class="line">You should remove them before moving into a production</div><div class="line">environment.</div><div class="line"></div><div class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : y</div><div class="line">Success.</div><div class="line"></div><div class="line"></div><div class="line">Normally, root should only be allowed to connect from</div><div class="line">&apos;localhost&apos;. This ensures that someone cannot guess at</div><div class="line">the root password from the network.</div><div class="line"></div><div class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y</div><div class="line">Success.</div><div class="line"></div><div class="line">By default, MySQL comes with a database named &apos;test&apos; that</div><div class="line">anyone can access. This is also intended only for testing,</div><div class="line">and should be removed before moving into a production</div><div class="line">environment.</div><div class="line"></div><div class="line"></div><div class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y</div><div class="line"> - Dropping test database...</div><div class="line">Success.</div><div class="line"></div><div class="line"> - Removing privileges on test database...</div><div class="line">Success.</div><div class="line"></div><div class="line">Reloading the privilege tables will ensure that all changes</div><div class="line">made so far will take effect immediately.</div><div class="line"></div><div class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y</div><div class="line">Success.</div><div class="line"></div><div class="line">All done!</div><div class="line">➜  ~ mysql.server start</div><div class="line">Starting MySQL</div><div class="line"> SUCCESS!</div></pre></td></tr></table></figure>
<h2 id="0x03-启动停止"><a href="/1970/01/01/[macOS]用Homebrew安装Mysql/#0x03-启动停止" class="headerlink" title="0x03 启动停止"></a>0x03 启动停止</h2><ul>
<li><code>brew services start/stop mysql</code> </li>
<li><code>mysql.server start/stop</code></li>
</ul>
<p>两种方式都可以，但是不可以交叉使用，比如用 <code>brew services start mysql</code> 启动 却不能用 <code>mysql.server stop</code> 停止。</p>
<h2 id="0x04-GUI客户端"><a href="/1970/01/01/[macOS]用Homebrew安装Mysql/#0x04-GUI客户端" class="headerlink" title="0x04 GUI客户端"></a>0x04 GUI客户端</h2><ul>
<li><p><a href="http://www.sequelpro.com" target="_blank" rel="external">Sequel Pro</a></p>
<p>  免费</p>
</li>
<li><p><a href="https://www.navicat.com.cn/" target="_blank" rel="external">Navicat For Mysql</a></p>
<p>  收费</p>
</li>
</ul>
<h2 id="0x05-简单命令纪录"><a href="/1970/01/01/[macOS]用Homebrew安装Mysql/#0x05-简单命令纪录" class="headerlink" title="0x05 简单命令纪录"></a>0x05 简单命令纪录</h2><ul>
<li>登录：<code>mysql -u username -p</code></li>
<li>推出：<code>exit;</code></li>
<li>默认 <code>data</code> 目录：<code>/usr/local/var/mysql</code></li>
<li>Emoji表情的支持请使用编码：<code>utf8mb4</code></li>
<li>TODO 2016-09-07</li>
</ul>
<h2 id="0xFF-参考"><a href="/1970/01/01/[macOS]用Homebrew安装Mysql/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://segmentfault.com/q/1010000000475470" target="_blank" rel="external">https://segmentfault.com/q/1010000000475470</a></li>
<li><a href="http://pein0119.github.io/2015/03/25/MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF-The-server-quit-without-updating-PID-file/" target="_blank" rel="external">http://pein0119.github.io/2015/03/25/MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF-The-server-quit-without-updating-PID-file/</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「macOS」macOS安装]]></title>
      <url>/1970/01/01/%5BmacOS%5DmacOS%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="0x00-要不要重装？"><a href="/1970/01/01/[macOS]macOS安装/#0x00-要不要重装？" class="headerlink" title="0x00 要不要重装？"></a>0x00 要不要重装？</h2><p>对于重装系统，我是拒绝的。</p>
<p>想起刚买Mac那会，总是用Window的思维来理解Mac，费了老大的劲来对磁盘进行分区，最后分了两个区：用户目录放在一个区，其他文件放在另一区。感觉自己好屌，但是没过多久发现下面两个问题：</p>
<ul>
<li><p>重装系统，之前用户目录的文件读取权限可能会有问题</p>
<p>  别问我为什么，知道重装可以解决大部分问题就好了</p>
</li>
<li><p>随着时间的流逝，开始预留给 系统文件和App所在分区 越来越不够用</p>
</li>
</ul>
<p>最后总结：Mac 很少坏，所以，分区并没什么卵用，只会给您的使用带来麻烦。</p>
<p>好了，言归正传，自从升级了macOS 就出现各种小问题，python用不了了，adb经常断，系统变卡了，每个小问题都要去整一下。想想还是算了，花点时间，在另一台 Mac Mini 上重新安装，然后用 Time Machine 还原到 Mac Book上。</p>
<h2 id="0x01-系统安装"><a href="/1970/01/01/[macOS]macOS安装/#0x01-系统安装" class="headerlink" title="0x01 系统安装"></a>0x01 系统安装</h2><p>电脑上有一份最新的macOS安装文件，打算去做安装U盘。下班回去准备操作的时候，发现做U盘安装盘的速度好慢慢好慢啊。想，还是算了吧，睡觉之前使用网络安装，第二天醒来应该可以装好。</p>
<p>这里附一个 macOS 安装文件下载地址：<a href="http://183.134.9.47/osxapps.itunes.apple.com/apple-assets-us-std-000001/Purple62/v4/af/5f/9d/af5f9d8e-cf9c-8147-c51c-c3c1fececb99/jze1425880974225146329.pkg?wsiphost=local" target="_blank" rel="external">Install macOS Sierra.app</a>。</p>
<h3 id="网络安装"><a href="/1970/01/01/[macOS]macOS安装/#网络安装" class="headerlink" title="网络安装"></a>网络安装</h3><p>开机按住 Option(Alt) 键，进入启动引导，选择那个虚拟盘（可能需要输入WIFI密码，我用的网线），先将主硬盘格式化（这将丢失所有数据，请提前做好备份），然后选择第二项安装系统，按照提示点击各种 继续、同意 之类，就可以去睡觉了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-56d692d40f4d4edc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Setup"></p>
<p>第二天起床，发现已经安装好了。按照提示，进行初始化操作，比如登录icloud账号，设置用户名等等。然后新的系统就可以用了。</p>
<h3 id="日常使用工具安装"><a href="/1970/01/01/[macOS]macOS安装/#日常使用工具安装" class="headerlink" title="日常使用工具安装"></a>日常使用工具安装</h3><p>这里只按照个人需要，流水账一样的记录下。</p>
<ul>
<li><p>iTerm2 </p>
<p>  这个是用来替代Terminal，可以做很多个性化的设置，用起来更顺手。IT必备吧。<br>  下载地址：<a href="http://www.iterm2.com/index.html" target="_blank" rel="external">http://www.iterm2.com/index.html</a></p>
</li>
<li><p>oh-my-zsh</p>
<p>  默认情况iTerm2和Terminal一样，界面都是比较丑的。这个可以更改iTerm2的主题。同时还集成了各种命令的简写。</p>
<p>  下载地址：<a href="http://ohmyz.sh" target="_blank" rel="external">http://ohmyz.sh</a></p>
</li>
<li><p>go2shell</p>
<p>  有朋友推荐一些工具来替代Finder，装个这个小工具之后，基本上就懒得再去学一个 类Finder 了。它的功能超级简单，点击一个按钮，在当前位置打开一个Terminal窗口。</p>
<p>  下载地址：<a href="http://zipzapmac.com/Go2Shell" target="_blank" rel="external">http://zipzapmac.com/Go2Shell</a><br>  （不建议从App Store下载）</p>
</li>
<li><p>homebrew</p>
<p>  这个用来管理软件的，类似wget等。之前安装软件，都是到各家官网去找安装包，自从有了这个，很多软件再也不用到处去找了。</p>
<p>  下载地址：<a href="http://brew.sh" target="_blank" rel="external">http://brew.sh</a></p>
</li>
<li><p>alfred</p>
<p>  如果你使用 Spotlight ，alfred可能是一个更好的选择。</p>
<p>  下载地址：可以直接在App Store下载。</p>
</li>
<li><p>Firefox（这里仅仅记录几个常用的插件）</p>
<ul>
<li>Adblock Plus 广告已成往事</li>
<li>BingDcit 没找到更好的翻译替代工具</li>
<li>JSONView 网页查看json数据更友好</li>
<li>Octotree 访问Github时，会在左侧列出文件列表，下载浏览更方便</li>
<li>User-Agent Switcher 访问一下手机网页会更方便</li>
<li>TabTrekker 一个酷炫的桌面插件，每天给你不同的壁纸</li>
</ul>
</li>
<li><p>Chrome（这里仅仅记录几个常用的插件）</p>
<ul>
<li>Adblock Plus</li>
<li>JSONView 网页查看json数据更友好</li>
<li>Octotree 访问Github时，会在左侧列出文件列表，下载浏览更方便</li>
<li>OneTab</li>
<li>Pocket</li>
<li>Translt 一个翻译插件，双击即可翻译，体验很棒</li>
<li><p>Unsplash Instant 和TabTrekker很像</p>
<p>PS：Chrome插件虽好，但请按需选择，除非你的内存大大的。</p>
</li>
</ul>
</li>
<li><p>python 和 python3</p>
<p>  mac系统自带了python2.7，这里我还是选择了使用brew安装了python和python3。</p>
</li>
<li><p>IntelliJ IDEA (Plugins)</p>
<ul>
<li>GsonFormat</li>
<li>Android ButterKnife Zelezny</li>
<li>CodeGlance</li>
</ul>
</li>
<li><p>其他开发工具</p>
<p>  这个就看各位需要了，我装了一堆。</p>
</li>
</ul>
<h3 id="收费App"><a href="/1970/01/01/[macOS]macOS安装/#收费App" class="headerlink" title="收费App"></a>收费App</h3><ul>
<li>mweb</li>
<li>Inboard</li>
<li>Day One</li>
<li>1Password</li>
<li>Affinity Designer</li>
<li>macOS Server</li>
<li>Apple Remote Desktop</li>
<li>Polarr</li>
<li>PCalc</li>
<li>小历</li>
<li>Inbox for Gmail</li>
<li>Paste</li>
<li>可意视频</li>
<li>TODO 还有很多没列出来</li>
</ul>
<p>别问我是不是装了这里所有软件，告诉你我装了，但不要崇拜哥，万能的淘宝可以实现你的梦想🙈</p>
<h3 id="环境配置"><a href="/1970/01/01/[macOS]macOS安装/#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul>
<li><p>环境变量</p>
<p>  安装好oh-my-sh之后，就可以添加自己的环境变量配置了，这里简单说些我的配置。首先我选择在一个单独的文件中<code>~/.bash_profile</code> 写自己的配置，然后将此文件添加到 <code>~/.zshrc</code> 的最后 <code>source ~/.bash_profile</code>。<code>.bash_profile</code>的内容如下：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home</div><div class="line">export GRADLE_HOME=$HOME/android/gradle/gradle-2.14.1</div><div class="line">export ANDROID_HOME=$HOME/android/android-sdk-macosx</div><div class="line">export NDK_HOME=$ANDROID_HOME/ndk-bundle</div><div class="line">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools:$&#123;ANDROID_HOME&#125;/tools:$&#123;NDK_HOME&#125;/:$&#123;GRADLE_HOME&#125;/bin:$&#123;JAVA_HOME&#125;/bin:$&#123;JAVA_HOME&#125;/lib:</div><div class="line"></div><div class="line">#</div><div class="line"># Aliases</div><div class="line"># Create by ttdevs 2016-03-31</div><div class="line">#</div><div class="line"></div><div class="line">alias oi=&apos;open -a iterm .&apos;</div><div class="line">alias of=&apos;open -a Finder .&apos;</div><div class="line">alias vv=&apos;virtualenv&apos;</div><div class="line">alias weather=&apos;curl http://wttr.in/shanghai&apos;</div></pre></td></tr></table></figure>
<h2 id="0x02-继续装逼"><a href="/1970/01/01/[macOS]macOS安装/#0x02-继续装逼" class="headerlink" title="0x02 继续装逼"></a>0x02 继续装逼</h2><p>重装系统，我仍是拒绝的。</p>
<p>此文不定期更新。</p>
<p>最后，App Store的软件还是比较贵的，入坑需谨慎 啊 啊 啊</p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「WebSocket」使用Websocket实现消息推送(上)]]></title>
      <url>/1970/01/01/%5BWebSocket%5D%E4%BD%BF%E7%94%A8Websocket%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81(%E4%B8%8A)/</url>
      <content type="html"><![CDATA[<h2 id="0x00-Websocket"><a href="/1970/01/01/[WebSocket]使用Websocket实现消息推送(上)/#0x00-Websocket" class="headerlink" title="0x00 Websocket"></a>0x00 Websocket</h2><p>联系客服功能在项目中很难避免，一般有下面三种实现方式：</p>
<ul>
<li>使用http的get方式轮询</li>
<li>接入第三方IM系统</li>
<li>自己的IM系统<ul>
<li>基于socket</li>
<li>基于websocket</li>
</ul>
</li>
</ul>
<p>第一种方式，最low的，实现简单，但是浪费用户流量；第二种方式，接入简单，功能强大，但是可能需要一定的成本（比如付费）；第三种方式，需要一定的开发成本（服务器托管费用忽略）。对于第三种情况的 socket，实现IM的文字加音视频聊天，做过的话你可以也会直接懵逼。但是，简单的文字聊天还好，不过你还是需要去定义一些协议来实现这样一个功能。如果我们使用websocket，那事情就变的简单很多。</p>
<blockquote>
<p>WebSocket一种在单个 TCP 连接上进行全双工通讯的协议。WebSocket通信协议于2011年被IETF定为标准RFC 6455，并被RFC7936所补充规范，WebSocketAPI被W3C定为标准。</p>
<p>WebSocket 是独立的、创建在 TCP 上的协议，和 HTTP 的唯一关联是使用 HTTP 协议的101状态码进行协议切换，使用的 TCP 端口是80，可以用于绕过大多数防火墙的限制。</p>
<p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端直接向客户端推送数据而不需要客户端进行请求，在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并允许数据进行双向传送。</p>
<p>目前常见的浏览器如 Chrome、IE、Firefox、Safari、Opera 等都支持 WebSocket，同时需要服务端程序支持 WebSocket。</p>
</blockquote>
<p><a href="https://zh.wikipedia.org/wiki/WebSocket" target="_blank" rel="external">来自维基百科 https://zh.wikipedia.org/wiki/WebSocket</a></p>
<p>websocket只是一种协议，类似http，因此与语言无关。这里我使用java来做服务端，同时提供android和html的客户端，通过一个简单的demo来介绍websocket的使用，接下来的一篇会对websocket进行分析。</p>
<h2 id="0x01-服务端"><a href="/1970/01/01/[WebSocket]使用Websocket实现消息推送(上)/#0x01-服务端" class="headerlink" title="0x01 服务端"></a>0x01 服务端</h2><p>这里我使用 <a href="https://github.com/TooTallNate/Java-WebSocket" target="_blank" rel="external">Java-WebSocket</a> 这个库来实现 websocket server。需要的jar包位于项目的 <code>/Java-WebSocket/dist/java-websocket.jar</code> 位置。效果如下：</p>
<p><img src="http://img.blog.csdn.net/20160826172546089" alt="server"></p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> <span class="keyword">extends</span> <span class="title">WebSocketServer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">2333</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SocketServer server = <span class="keyword">new</span> SocketServer(PORT);</div><div class="line">        server.start();</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String ip = InetAddress.getLocalHost().getHostAddress();</div><div class="line">            <span class="keyword">int</span> port = server.getPort();</div><div class="line">            print(String.format(<span class="string">"服务已启动: %s:%d"</span>, ip, port));</div><div class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        InputStreamReader in = <span class="keyword">new</span> InputStreamReader(System.in);</div><div class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(in);</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                String msg = reader.readLine();</div><div class="line">                server.broadcastMessage(msg);</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> InetSocketAddress(port));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketServer</span><span class="params">(InetSocketAddress address)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(address);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(WebSocket webSocket, ClientHandshake clientHandshake)</span> </span>&#123;</div><div class="line">        String address = webSocket.getRemoteSocketAddress().getAddress().getHostAddress();</div><div class="line">        String message = String.format(<span class="string">"(%s) &lt;加入&gt;"</span>, address);</div><div class="line">        broadcastMessage(message);</div><div class="line">        print(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(WebSocket webSocket, <span class="keyword">int</span> code, String reason, <span class="keyword">boolean</span> remote)</span> </span>&#123;</div><div class="line">        String address = webSocket.getRemoteSocketAddress().getAddress().getHostAddress();</div><div class="line">        String message = String.format(<span class="string">"(%s) &lt;离开&gt;"</span>, address);</div><div class="line">        broadcastMessage(message);</div><div class="line">        print(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(WebSocket webSocket, String msg)</span> </span>&#123;</div><div class="line">        String address = webSocket.getRemoteSocketAddress().getAddress().getHostAddress();</div><div class="line">        String message = String.format(<span class="string">"(%s) %s"</span>, address, msg);</div><div class="line">        broadcastMessage(message);</div><div class="line">        print(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(WebSocket webSocket, Exception e)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != webSocket) &#123;</div><div class="line">            <span class="keyword">if</span> (!webSocket.isClosed()) &#123;</div><div class="line">                webSocket.close(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 广播收到消息</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> msg</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">broadcastMessage</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        Collection&lt;WebSocket&gt; connections = connections();</div><div class="line">        <span class="keyword">synchronized</span> (connections) &#123;</div><div class="line">            <span class="keyword">for</span> (WebSocket client : connections) &#123;</div><div class="line">                client.send(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(String.format(<span class="string">"[%d] %s"</span>, System.currentTimeMillis(), msg));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x02-客户端"><a href="/1970/01/01/[WebSocket]使用Websocket实现消息推送(上)/#0x02-客户端" class="headerlink" title="0x02 客户端"></a>0x02 客户端</h2><ul>
<li><p>Android</p>
<p>  这里也是用java-websocket这个库，效果如下：</p>
<p>  <img src="http://img.blog.csdn.net/20160826172640594" alt="android"></p>
<p>  核心代码：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_CLOSE = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_CONNECT = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_MESSAGE = <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Bind</span>(R.id.etIP)</div><div class="line">    EditText etIP;</div><div class="line">    <span class="meta">@Bind</span>(R.id.etPort)</div><div class="line">    EditText etPort;</div><div class="line">    <span class="meta">@Bind</span>(R.id.tvStatus)</div><div class="line">    TextView tvStatus;</div><div class="line">    <span class="meta">@Bind</span>(R.id.tvMsg)</div><div class="line">    TextView tvMsg;</div><div class="line">    <span class="meta">@Bind</span>(R.id.rgVersion)</div><div class="line">    RadioGroup rgVersion;</div><div class="line">    <span class="meta">@Bind</span>(R.id.etMessage)</div><div class="line">    EditText etMessage;</div><div class="line">    <span class="meta">@Bind</span>(R.id.svContent)</div><div class="line">    ScrollView svContent;</div><div class="line">    <span class="meta">@Bind</span>(R.id.viewMain)</div><div class="line">    View viewMain;</div><div class="line"></div><div class="line">    <span class="meta">@Bind</span>(R.id.btConnect)</div><div class="line">    Button btConnect;</div><div class="line">    <span class="meta">@Bind</span>(R.id.btDisconnect)</div><div class="line">    Button btDisconnect;</div><div class="line">    <span class="meta">@Bind</span>(R.id.btSend)</div><div class="line">    Button btSend;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(&#123;R.id.btConnect, R.id.btDisconnect, R.id.btSend&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.btConnect:</div><div class="line">                connectToServer();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.btDisconnect:</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != mClient) &#123;</div><div class="line">                    mClient.close();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.btSend:</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> != mClient) &#123;</div><div class="line">                    String msg = etMessage.getText().toString();</div><div class="line">                    <span class="keyword">if</span> (!TextUtils.isEmpty(msg)) &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            mClient.send(msg);</div><div class="line">                        &#125; <span class="keyword">catch</span> (NotYetConnectedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                            <span class="keyword">return</span>;</div><div class="line">                        &#125;</div><div class="line">                        etMessage.setText(<span class="string">""</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Client mClient;</div><div class="line">    <span class="keyword">private</span> Handler mHandle = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            String message = String.format(<span class="string">"[%d] %s\n"</span>, System.currentTimeMillis(), msg.obj.toString());</div><div class="line">            tvMsg.append(message);</div><div class="line"></div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> STATUS_CONNECT:</div><div class="line">                    btConnect.setEnabled(<span class="keyword">false</span>);</div><div class="line">                    btDisconnect.setEnabled(<span class="keyword">true</span>);</div><div class="line">                    btSend.setEnabled(<span class="keyword">true</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> STATUS_CLOSE:</div><div class="line">                    btConnect.setEnabled(<span class="keyword">true</span>);</div><div class="line">                    btDisconnect.setEnabled(<span class="keyword">false</span>);</div><div class="line">                    btSend.setEnabled(<span class="keyword">false</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> STATUS_MESSAGE:</div><div class="line">                    <span class="comment">// <span class="doctag">TODO:</span> 16/8/24</span></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            svContent.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    svContent.fullScroll(View.FOCUS_DOWN);</div><div class="line">                &#125;</div><div class="line">            &#125;, <span class="number">100</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_web_socket);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line"></div><div class="line">        System.setProperty(<span class="string">"java.net.preferIPv6Addresses"</span>, <span class="string">"false"</span>);</div><div class="line">        System.setProperty(<span class="string">"java.net.preferIPv4Stack"</span>, <span class="string">"true"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connectToServer</span><span class="params">()</span> </span>&#123;</div><div class="line">        String ip = etIP.getText().toString();</div><div class="line">        String port = etPort.getText().toString();</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(ip) || TextUtils.isEmpty(port)) &#123;</div><div class="line">            Snackbar.make(viewMain, <span class="string">"IP and Port 不能为空"</span>, Snackbar.LENGTH_LONG).show();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        String address = String.format(<span class="string">"ws://%s:%s"</span>, ip, port);</div><div class="line">        Draft draft = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">switch</span> (rgVersion.getCheckedRadioButtonId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.rbDraft10:</div><div class="line">                draft = <span class="keyword">new</span> Draft_10();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.rbDraft17:</div><div class="line">                draft = <span class="keyword">new</span> Draft_17();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.rbDraft75:</div><div class="line">                draft = <span class="keyword">new</span> Draft_75();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.rbDraft76:</div><div class="line">                draft = <span class="keyword">new</span> Draft_76();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                draft = <span class="keyword">new</span> Draft_17();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            URI uri = <span class="keyword">new</span> URI(address);</div><div class="line">            mClient = <span class="keyword">new</span> Client(uri, draft);</div><div class="line">            mClient.connect();</div><div class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        tvStatus.setText(address);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> <span class="keyword">extends</span> <span class="title">WebSocketClient</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(URI serverURI)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(serverURI);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(URI serverUri, Draft draft)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(serverUri, draft);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(ServerHandshake handShakeData)</span> </span>&#123;</div><div class="line">            Message msg = <span class="keyword">new</span> Message();</div><div class="line">            msg.what = STATUS_CONNECT;</div><div class="line">            msg.obj = String.format(<span class="string">"[Welcome：%s]"</span>, getURI());</div><div class="line">            mHandle.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">            Message msg = <span class="keyword">new</span> Message();</div><div class="line">            msg.what = STATUS_MESSAGE;</div><div class="line">            msg.obj = message;</div><div class="line">            mHandle.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(<span class="keyword">int</span> code, String reason, <span class="keyword">boolean</span> remote)</span> </span>&#123;</div><div class="line">            Message msg = <span class="keyword">new</span> Message();</div><div class="line">            msg.what = STATUS_CLOSE;</div><div class="line">            msg.obj = String.format(<span class="string">"[Bye：%s]"</span>, getURI());</div><div class="line">            mHandle.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Exception ex)</span> </span>&#123;</div><div class="line">            ex.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>Html</p>
<p>  H5使用了这个库：<a href="https://github.com/sstephenson/prototype" target="_blank" rel="external">sstephenson/prototype</a>，效果如下：</p>
<p>  <img src="http://img.blog.csdn.net/20160826172728638" alt="html5"></p>
<p>  核心代码如下：</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    document.observe("dom:loaded", function () &#123;</div><div class="line">        function log(text) &#123;</div><div class="line">            var value = (new Date).getTime();</div><div class="line">            value += ": ";</div><div class="line">            value += text.escapeHTML();</div><div class="line">            value += $("log").innerHTML;</div><div class="line">            $("log").innerHTML = value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (!window.WebSocket) &#123;</div><div class="line">            alert("浏览器不支持,换一个吧");</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var ws;</div><div class="line"></div><div class="line">        $("connectForm").observe("submit", function (e) &#123;</div><div class="line">            e.stop();</div><div class="line">            ws = new WebSocket($F("uri"));</div><div class="line">            ws.onopen = function () &#123;</div><div class="line">                log("连接到服务器\n");</div><div class="line">            &#125;</div><div class="line">            ws.onmessage = function (e) &#123;</div><div class="line">                log("服务器信息: " + e.data + "\n");</div><div class="line">            &#125;</div><div class="line">            ws.onclose = function () &#123;</div><div class="line">                log("断开服务器连接\n");</div><div class="line"></div><div class="line">                $("uri", "connect").invoke("enable");</div><div class="line">                $("close").disable();</div><div class="line">                ws = null;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            $("uri", "connect").invoke("disable");</div><div class="line">            $("close").enable();</div><div class="line">        &#125;);</div><div class="line">        $("close").observe("click", function (e) &#123;</div><div class="line">            e.stop();</div><div class="line">            if (ws) &#123;</div><div class="line">                ws.close();</div><div class="line">                ws = null;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        $("sendForm").observe("submit", function (e) &#123;</div><div class="line">            e.stop();</div><div class="line">            if (ws) &#123;</div><div class="line">                var message = $("message");</div><div class="line">                ws.send(message.value);</div><div class="line">                message.value = "";</div><div class="line">                message.focus();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>所有的代码都可以到github查看：<a href="https://github.com/ttdevs/android/tree/master/modules/webscoket" target="_blank" rel="external">ttdevs</a>。</p>
<p>下一篇将通过对websocket协议的分析，来对其做进一步的了解。</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[WebSocket]使用Websocket实现消息推送(上)/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://github.com/sstephenson/prototype" target="_blank" rel="external">https://github.com/sstephenson/prototype</a></li>
<li><a href="https://github.com/TooTallNate/Java-WebSocket/" target="_blank" rel="external">https://github.com/TooTallNate/Java-WebSocket/</a></li>
<li><a href="http://www.cnblogs.com/wlfcolin/p/5193583.html" target="_blank" rel="external">http://www.cnblogs.com/wlfcolin/p/5193583.html</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WebSocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「macOS」macOS安装Python]]></title>
      <url>/1970/01/01/%5BmacOS%5DmacOS%E5%AE%89%E8%A3%85Python/</url>
      <content type="html"><![CDATA[<h2 id="0x00-为什么要装-Bi"><a href="/1970/01/01/[macOS]macOS安装Python/#0x00-为什么要装-Bi" class="headerlink" title="0x00 为什么要装(Bi)"></a>0x00 为什么要装(Bi)</h2><p>装逼遭雷劈。</p>
<p>上一篇介绍了重装macOS的方法。为什么会有上一篇？说到底就一个字：跑 python web 应用出问题了。把macOS从旧版本升级到新版本 10.12，之前跑的好好的web应用现在各种问题，所以，重装吧。然并卵，重装后问题依旧 😢，比如：</p>
<p><code>ImportError: No module named &#39;_sqlite3&#39;</code><br><code>ImportError: No module named &#39;pysqlite2&#39;</code></p>
<p>等等一堆问题。好吧，废话说多了，这里介绍下该怎么办。</p>
<h2 id="0x01-安装"><a href="/1970/01/01/[macOS]macOS安装Python/#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h2><p>情况是这样的，全新安装macOS，同时升级 xcode 到最新版8 (8A218a)，使用 homebrew 安装 python3 ：</p>
<p><code>brew install python3</code></p>
<p>装好之后还是各种model找不到，缺少很多东西，尝试了各种方法，依然无法解决。</p>
<p>在反复重装 python3 的时候，看到这样一个提示：<code>xcode-select --install</code>。虽然不知道这个鬼东西是干嘛，但是确定一点，之前我有安装过。所以，就在命令行执行了一下，然后再重新安装 python3，他 就，就，就 可以了……</p>
<h2 id="0x02-Command-Line-Tools"><a href="/1970/01/01/[macOS]macOS安装Python/#0x02-Command-Line-Tools" class="headerlink" title="0x02 Command Line Tools"></a>0x02 Command Line Tools</h2><p><code>xcode-select --install</code> 这条命令是的作用是安装 <code>Command Line Tools</code>。找了半天，没看到哪有详细的介绍，在<a href="https://developer.apple.com/library/prerelease/content/technotes/tn2339/_index.html#//apple_ref/doc/uid/DTS40014588-CH1-WHAT_IS_THE_COMMAND_LINE_TOOLS_PACKAGE_" target="_blank" rel="external">这里</a>看到一个简短的介绍：</p>
<blockquote>
<p>The Command Line Tools Package is a small self-contained package available for download separately from Xcode and that allows you to do command line development in OS X. It consists of two components: OS X SDK and command-line tools such as Clang, which are installed in /usr/bin.</p>
</blockquote>
<p>简单来说，应该就是一套工具集合。他会被安装在下面两个位置：</p>
<p><code>/Library/Developer/CommandLineTools/usr/bin</code><br><code>/usr/bin</code></p>
<p>在这里你会看到一堆常见的命令。看到这些之后，恍然大悟，homebrew好像是下的python3的源码，然后本地编译安装的。如果缺少了这些命令，可能就会出错。</p>
<p>好了，终于可以愉快的使用 python 了。</p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「玩转树莓派」0x00欢迎来到树莓派的世界]]></title>
      <url>/1970/01/01/%5B%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5D0x00%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E4%B8%96%E7%95%8C/</url>
      <content type="html"><![CDATA[<h2 id="0x00-初衷"><a href="/1970/01/01/[玩转树莓派]0x00欢迎来到树莓派的世界/#0x00-初衷" class="headerlink" title="0x00 初衷"></a>0x00 初衷</h2><p>Welcome to Raspberry Pi world</p>
<p>之前加入的一个树莓派群最近突然活跃起来，经过观察发现是新版的树莓派发布了 —— Raspberry Pi 3。很高兴的是，各位小伙伴的活跃有些超出我的意料。</p>
<p>观察一段时间之后发现，很多小伙伴在问一些很基础的问题，开始尝试去帮他们解答，后来发现根本回答不过来，刚回答完又有小伙伴来问，因此决定尝试着做一些基础总结，给各位刚入门的小伙伴提供一些参考。</p>
<p>为什么买树莓派呢？很早就听说过树莓派，Arduino这些小板子，但是决定入手树莓派还是因为知乎的一个回答：<a href="https://www.zhihu.com/question/20859055" target="_blank" rel="external">树莓派 (Raspberry Pi) 是什么？普通人怎么玩？</a> 看完后很兴奋，这个小板还可以这样玩，遂入手。算起来从入手到现在已经半年左右。简单的入门操作都折腾了一遍，还买了一大堆硬件，但是很遗憾，不少硬件没有折腾成功。期间学了一些python基础知识，做了一些简单的服务在上面跑，然后就让他静静的躺在了角落里，没有再折腾。但有一件事让我非常的兴奋，这个小板子最长一次50多天没关机！！！这大大的出乎我的意料</p>
<blockquote>
<p>为什么会说非常兴奋呢？跑了50多天后是我主动关机的。一个普通的用户，无论你是Windows，Linux还是Mac，作为日常使用的设备，还是会经常重启的，特别是Windows系统。一块放在床头的小板子，可以稳定的跑上几天，几周，几个月，有这么稳定的一个系统，还有那些GPIO，是不是给我们更多的折腾提供了非常好的基础!</p>
</blockquote>
<p>决定写这些入门文章，我会本着<code>直接告诉你一个结果</code>的原则，循序渐进的把你正面对或者将会遇到的问题展现出来。如果讲的太粗，各位可以直接提问，我再补充。最后希望我会坚持把这些东西写下去。</p>
<h2 id="0x01-什么是树莓派"><a href="/1970/01/01/[玩转树莓派]0x00欢迎来到树莓派的世界/#0x01-什么是树莓派" class="headerlink" title="0x01 什么是树莓派"></a>0x01 什么是树莓派</h2><p><a href="https://www.raspberrypi.org/" target="_blank" rel="external">树莓派(Raspberry Pi)</a> 是什么，来看看<a href="https://zh.wikipedia.org/wiki/%E6%A0%91%E8%8E%93%E6%B4%BE" target="_blank" rel="external">维基百科</a>的介绍：</p>
<blockquote>
<p>树莓派（英语：Raspberry Pi），是一款基于Linux的单板机电脑。它由英国的树莓派基金会所开发，目的是以低价硬件及自由软件刺激在学校的基本计算机科学教育。<br>树莓派的生产是通过有生产许可的两家公司：Element 14/Premier Farnell和RS Components。这两家公司都在网上出售树莓派。<br>树莓派配备一枚博通（Broadcom）出产的ARM架构700MHz BCM2835处理器，256MB內存（B型已升级到512MB内存），使用SD卡当作存储媒体，且拥有一个Ethernet、两个USB接口、以及HDMI（支持声音输出）和RCA端子输出支持。树莓派只有一张信用卡大小，体积大概是一个火柴盒大小，可以运行像《雷神之锤III竞技场》的游戏和进行1080p视频的播放。操作系统采用开源的Linux系统如Debian、ArchLinux，自带的Iceweasel、KOffice等软件，能够满足基本的网络浏览、文字处理以及电脑学习的需要。分A、B两种型号，售价分别是A型25美元、B型35美元。树莓派基金会从2012年2月29日开始接受B型的订货。<br>树莓派基金会提供了基于ARM架构的Debian、Arch Linux和Fedora等的发行版供大众下载，还计划提供支持Python作为主要编程语言，支持BBC BASIC(通过RISC OS映像或者Linux的”Brandy Basic”克隆)、C语言和Perl等编程语言。<br>树莓派基金会于2016年2月发布了树莓派3,较前一代树莓派2，树莓派3的处理器升级为了64位的博通BCM2837，并首次加入了Wi-Fi无线网络及蓝牙功能，而售价仍然是35美元。</p>
</blockquote>
<p>简单来说，他就是一台ARM架构的电脑，信用卡大小，他有usb接口，有hdmi接口，有音频接口，有以太网接口等等。我们再来看看他的配置（From:维基百科）：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-198d59fc407ab60e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Raspberry Pi 版本"></p>
<p>最新的Raspberry Pi 3 B型CPU有提升，增加了板载WIFI和蓝牙。但是，这样的配置，和我们普通的PC机比的话还是差的很远。那么，我们为什么还要使用树莓派呢？这里简单说说我的看法：</p>
<ul>
<li>体积小：小到完全可以随身携带</li>
<li>省电：我的是2代B型，配置的电源5V 2A，最大功率也才10W</li>
<li><code>GPIO</code>：这个是最吸引我的，通过它可以控制一些开关等</li>
<li>便宜：200多块钱的价格，少吃一顿饭少看两场电影就剩下来了</li>
<li>…</li>
</ul>
<p>其实既然你已经决定或者已经入手树莓派，我们就不过多的介绍他的优缺点了。反正就是你买了<code>用起来</code>，不会后悔的。接下来我会把更多的精力放在我们要做的事情上，而不是纠结具体在某个版本上，因为相同的OS他们差别不是很大。我用的是树莓派2代B型，和最新的3代比少了WIFI和Bluetooth，不过我自己准备了一个usb接口的WIFI和Bluetooth，最后我的基本配置如下：</p>
<ul>
<li>树莓派主机：2代B型</li>
<li>电源适配器：2A，看挂的负载选择</li>
<li>存储卡：32G Sandisk，推荐这个牌子</li>
<li>无线网卡：RTL8192CU，可选</li>
<li>USB蓝牙：可选</li>
<li>摄像头：网上50快钱买的，可选</li>
<li>其他一堆硬件，如HC-SR501、LCD12864、LCD1602、MQ-135、MQ-2、DHT11等等，目前已知在用的是DHT11，检查房间温湿度。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">~ $ lsusb</div><div class="line">Bus 001 Device 005: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)</div><div class="line">Bus 001 Device 004: ID 0bda:8178 Realtek Semiconductor Corp. RTL8192CU 802.11n WLAN Adapter</div><div class="line">Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter</div><div class="line">Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.</div><div class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</div></pre></td></tr></table></figure>
<h2 id="0x02-网络环境"><a href="/1970/01/01/[玩转树莓派]0x00欢迎来到树莓派的世界/#0x02-网络环境" class="headerlink" title="0x02 网络环境"></a>0x02 网络环境</h2><p>我用的是上海电信的30MB宽带，电信光猫下面接一个TP-Link路由器，路由器下面接上网设备。如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-1b30d3ad741b6ea0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="我的网络拓扑"></p>
<p>起初，很多人会遇到和我一样的问题：光猫加电后就可以上网了，但是我们没办法通过公网访问我路由器下的设备。解决这个问题，我们会很自然的想到对光猫进行设置。经过各种google之后，确定了一个最简单的思路：破解光猫，从中获取我们拨号用的用户名和密码，然后把光猫设置成仅仅作为猫使用，用拿到的用户名密码到我们的路由器中进行拨号。听起来是不是还挺复杂的，那这里告诉你一个简单办法：随便找一个理由报修宽带，比如网速比较慢，等维修的师傅上门后告诉他你想用自己的路由器拨号上网，他就会帮你设置的。设置好这些之后我们就有了一个有公网IP的路由器。</p>
<h2 id="0x03-花生壳"><a href="/1970/01/01/[玩转树莓派]0x00欢迎来到树莓派的世界/#0x03-花生壳" class="headerlink" title="0x03 花生壳"></a>0x03 花生壳</h2><p>虽然完美有了公网的IP，但是遗憾的是，这个公网IP在每次拨号时都会变。这个问题我们可以用花生壳来解决。<a href="http://www.oray.com/" target="_blank" rel="external">花生壳</a>可以免费给我们提供DDNS服务，将我们动态的IP映射到一个域名上。这样我们就可以在公网通过这个域名来访问家里的树莓派，而不用担心自己的公网IP变来变去找不到了。所以，我们需要先注册一个花生壳的账号，再花5块钱注册一个花生壳域名，拿着这个账号到我们的宽带路由器上登录即可:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-3cb4638cbd890aef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="花生壳DDNS"></p>
<p>很多时候事情并没有那么完美，比如某天你会发现我们宽带的某些端口（比如80端口）无法使用（被电信运营商封掉），这时候我们就需要使用花生壳的另一个服务：<a href="http://hsk.oray.com/download/#type=http|shumeipai" target="_blank" rel="external">花生壳内网版</a> 来解决。这个我会在接下来的文章中讲到。</p>
<h2 id="0x04-工具"><a href="/1970/01/01/[玩转树莓派]0x00欢迎来到树莓派的世界/#0x04-工具" class="headerlink" title="0x04 工具"></a>0x04 工具</h2><p>俗话说工欲善其事必先利其器，在正式开始之前，给大家推荐几个工具：</p>
<ul>
<li><p><a href="https://play.google.com/store/apps/details?id=com.sonelli.juicessh" target="_blank" rel="external">JuiceSSH</a></p>
<p>  一个android系统的SSH客户端工具，可以通过它直接与树莓派相连。</p>
</li>
<li><p><a href="https://play.google.com/store/apps/details?id=nz.org.winters.android.gpiotoolforraspberrypi" target="_blank" rel="external">GPIO tool for Raspberry Pi</a></p>
<p>  一个客户端工具，支持android系统，连接树莓派后直接可以对树莓派的GPIO进行操作。</p>
</li>
<li><p><a href="http://fritzing.org/" target="_blank" rel="external">Fritizing</a></p>
<p>  这个是用来画电路原理图的，很Cool，非常好用。</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-f4d2719f15cb6eed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Fritizing"></p>
<ul>
<li><p><a href="https://itunes.apple.com/cn/app/serverauditor-ssh-shell-console/id549039908?l=en&amp;mt=8" target="_blank" rel="external">Serverauditor</a></p>
<p>  iOS系统的SSH客户端工具。</p>
</li>
</ul>
<p><code>如果你有更好的工具，欢迎分享。</code></p>
<p>说了这么多，接下来正式进入树莓派的世界，提前祝大家玩的开心~~</p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「玩转树莓派」0x01选个系统先]]></title>
      <url>/1970/01/01/%5B%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5D0x01%E9%80%89%E4%B8%AA%E7%B3%BB%E7%BB%9F%E5%85%88/</url>
      <content type="html"><![CDATA[<h2 id="0x00-树莓派的安装配置（无显示器）"><a href="/1970/01/01/[玩转树莓派]0x01选个系统先/#0x00-树莓派的安装配置（无显示器）" class="headerlink" title="0x00 树莓派的安装配置（无显示器）"></a>0x00 树莓派的安装配置（无显示器）</h2><p>树莓派没有硬盘，我们拿到设备之后是不能直接用的，因此需要先给它配置一个装好系统的存储卡。这篇文字，给大家介绍如何安装并初始化树莓派系统。</p>
<p><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="external">Raspbian</a> 是树莓派基金会官方支持的系统，我们可以直接下载他的安装文件或者使用官网推荐的 <a href="https://www.raspberrypi.org/downloads/noobs/" target="_blank" rel="external">NOOBS</a> 来完成安装操作。除了官方支持的系统，树莓派还有很多第三方支持的系统，如：<code>UBUNTU MATE</code>、<code>SN
![Uploading win32diskimager_914364.png . . .]APPY UBUNTU CORE</code>、<code>WINDOWS 10 IOT CORE</code>、<code>OSMC</code>、<code>OPENELEC</code>、<code>PINET</code>、<code>RISC OS</code>、<code>WEATHER STATION</code>等，这里有我们比较熟悉的<code>WINDOWS 10 IOT</code>、<code>UBUNTU</code>、<code>OSMC</code>等。<code>UBUNTU</code>系统是非常火的一个Linux发行版本，<code>WINDOWS 10 IOT</code>是微软开发的物联网系统，<code>OSMC</code>可以作为家庭媒体中心使用，其他系统大家可以自行了解。</p>
<blockquote>
<p>前一篇文章简单介绍了我的硬件环境，是没有显示器和外接键盘鼠标的，因此我会基于这个前提给大家介绍如何玩转树莓派。</p>
</blockquote>
<p>这么多系统，初学者可能会很纠结如何选择。这里给大家推荐官方支持的Raspbian（基于Debian Jessie）系统，他预装了很多常用、编程、教育软件，如Python(python3)、Scratch、Sonic Pi、Java、Mathematica等等。Raspbian包含RASPBIAN JESSIE(Full desktop image based on Debian Jessie)和RASPBIAN JESSIE LITE(Minimal image based on Debian Jessie)两个版本，由于之后我们会用到桌面环境，因此我们最终选择RASPBIAN JESSIE，带桌面环境的版本。</p>
<h2 id="0x01-下载"><a href="/1970/01/01/[玩转树莓派]0x01选个系统先/#0x01-下载" class="headerlink" title="0x01 下载"></a>0x01 下载</h2><p>决定了使用RASPBIAN JESSIE（非RASPBIAN JESSIE LITE），我们只需要到树莓派的官网下载系统文件即可。他的最新版本是 <a href="http://downloads.raspberrypi.org/raspbian/release_notes.txt" target="_blank" rel="external">March 2016</a>：</p>
<ul>
<li>发布：<code>2016-3-18</code></li>
<li>Linux内核：<code>4.1</code></li>
<li>文件名：<a href="http://vx2-downloads.raspberrypi.org/raspbian/images/raspbian-2016-03-18/2016-03-18-raspbian-jessie.zip" target="_blank" rel="external">2016-02-26-raspbian-jessie.zip</a></li>
<li>MD5:  <code>db41f2a8c6236c0ca9150fe4db2017c09e7871fb</code></li>
<li>大小：<code>1.3G</code></li>
</ul>
<p>对下载的文件进行加压，得到<code>2016-02-26-raspbian-jessie.img</code>，大小<code>4.03G</code>，这个就是我们安装要用到的系统镜像文件。</p>
<h2 id="0x02-安装"><a href="/1970/01/01/[玩转树莓派]0x01选个系统先/#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h2><p>系统的安装比较简单，就是将我们刚下载的安装镜像文件写入到TF卡中。官方的 <a href="https://www.raspberrypi.org/documentation/installation/installing-images/README.md" target="_blank" rel="external">安装帮助文档</a> 对系统的安装进行了详细的介绍。本着简化操作的原则，这里再做简单概述。</p>
<ul>
<li><p>Windows系统</p>
<p>  <a href="https://www.raspberrypi.org/documentation/installation/installing-images/windows.md" target="_blank" rel="external">Windows系统安装</a>推荐使用<a href="https://sourceforge.net/projects/win32diskimager/" target="_blank" rel="external">win32diskimager</a>，这是一个图形化工具，操作非常简单：以管理员方式打开，ImageFile选择刚下载的img镜像，Device选择我们的TF卡所在驱动器，点击Write即可。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-f0f5f96ef21aa61d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="win32diskimager"></p>
</li>
<li><p>Mac系统</p>
<p>  跟Windows系统一样，我们推荐图形界面的<a href="http://www.tweaking4all.com/hardware/raspberry-pi/macosx-apple-pi-baker/" target="_blank" rel="external">ApplePi-Baker</a>，操作界面如下：</p>
</li>
</ul>
<p>  <img src="http://upload-images.jianshu.io/upload_images/1801981-3dc88fbb747a3390.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ApplePi-Baker"></p>
<pre><code>左侧选择SDCard，右侧选择我们的镜像文件，点击Restore Backup按钮即可。
</code></pre><ul>
<li><p>Mac系统命令行方式</p>
<p>  由于我用的Mac系统，所以简单介绍下这种稍微复杂点的方式但也就是简单几步操作：</p>
<ol>
<li>插入SDCard卡，使用磁盘管理工具对其进行擦除，格式选择MS-DOS(FAT)，完成后推出SDCard（推出并不是拔出）</li>
<li><p>使用<code>df -h</code>查看SDCard的路径，如下的 <code>/dev/disk2s1</code>，我们记下 <code>disk2</code>：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  ~ df -h</div><div class="line">Filesystem      Size   Used  Avail Capacity  iused    ifree %iused  Mounted on</div><div class="line">devfs          185Ki  185Ki    0Bi   100%      640        0  100%   /dev</div><div class="line">map -hosts       0Bi    0Bi    0Bi   100%        0        0  100%   /net</div><div class="line">map auto_home    0Bi    0Bi    0Bi   100%        0        0  100%   /home</div><div class="line">/dev/disk2s1    60Mi   20Mi   40Mi    34%      512        0  100%   /Volumes/raspi</div><div class="line">➜  ~</div></pre></td></tr></table></figure>
</li>
<li><p>执行如下命令，将镜像文件烧录进SDCard，这个过程会因为你的SDCard卡的速度的不同而不同，期间你可以通过<code>Ctrl+T</code>来查看进度：</p>
<p> <code>sudo dd bs=1m if=2016-02-26-raspbian-jessie.img of=/dev/rdisk2</code></p>
<p>如果命令行方式有问题，请参考<a href="https://www.raspberrypi.org/documentation/installation/installing-images/mac.md" target="_blank" rel="external">官方说明</a>解决。</p>
</li>
</ol>
</li>
</ul>
<p>烧录完成之后SDCard内容如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-388688f6e1ca534c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="raspbian jessie"></p>
<h2 id="0x03-登录树莓派"><a href="/1970/01/01/[玩转树莓派]0x01选个系统先/#0x03-登录树莓派" class="headerlink" title="0x03 登录树莓派"></a>0x03 登录树莓派</h2><p>完成以上操作，将SDCard插入树莓派加电就可以顺利跑起来了。我们再强调一遍，即使<code>没有键盘鼠标显示器，也是可以操作树莓派的，包括安装时</code>。简单的拓扑如下图：</p>
<p><img src="https://pihw.files.wordpress.com/2013/04/directconnect1.png" alt="简单拓扑"></p>
<p>启动树莓派可以有两种方式：<code>无外接键盘鼠标显示器</code>和<code>有外接键盘鼠标显示器</code>（虽然我假设自己没有多余的键盘显示器，但是我还是会在此介绍这种方式~~）。</p>
<p>这两种方式无论选择哪种，我们都需要先将树莓派通过RJ45接口与我们的路由器相连（说人话就是拿网线连接树莓派和路由器）。别问我为什么这么做，因为这样最简单，跟着做就好（当然，我知道你也可以直接拿根网线直接连接电脑和树莓派，但是非常不建议这么做，因为这么屌的你已经可以不用来看这篇文章了），或者你会说没有路由器，你真的没路由器？那赶紧买一个吧。</p>
<blockquote>
<p>这里强烈建议通过路由器的设置给树莓派分配静态IP，否则会非常麻烦。更多获取树莓派的IP的方法可参考<a href="https://www.raspberrypi.org/documentation/remote-access/ip-address.md" target="_blank" rel="external">这里</a>。</p>
</blockquote>
<ul>
<li><p>无外接键盘鼠标显示器</p>
<p>  这种方式最简单。树莓派接入网络，我们只需要登录路由器，到DHCP服务器中的客户端列表中查看我们的树莓派的IP，然后通过ssh命令登录树莓派就可以操作了。[默认的用户名密码][c2]：<code>pi</code>：<code>raspberry</code>，<code>ssh</code> 命令如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh pi@&lt;you ip address&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>密码输入无回显</p>
</blockquote>
<ul>
<li><p>外接键盘鼠标显示器</p>
<p>  如果你有多余的键盘鼠标显示器供给树莓派使用，那么第一次启动的时候，我们需要简单配置下树莓派使其支持HDMI输出。打开我们的SDCard，在根目录下，看到有这么一个文件：<a href="https://www.raspberrypi.org/documentation/configuration/config-txt.md" target="_blank" rel="external"><code>config.txt</code></a>。我们需要修改他支持HDMI的显示（1080P的输出），下面是我配置的Demo：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">pi@raspi:/boot $ cat config.txt</div><div class="line"># For more options and information see</div><div class="line"># http://www.raspberrypi.org/documentation/configuration/config-txt.md</div><div class="line"># Some settings may impact device functionality. See link above for details</div><div class="line"></div><div class="line"># uncomment if you get no picture on HDMI for a default &quot;safe&quot; mode</div><div class="line">#hdmi_safe=1</div><div class="line"></div><div class="line"># uncomment this if your display has a black border of unused pixels visible</div><div class="line"># and your display can output without overscan</div><div class="line">disable_overscan=1</div><div class="line"></div><div class="line"># uncomment the following to adjust overscan. Use positive numbers if console</div><div class="line"># goes off screen, and negative if there is too much border</div><div class="line">#overscan_left=16</div><div class="line">#overscan_right=16</div><div class="line">#overscan_top=16</div><div class="line">#overscan_bottom=16</div><div class="line"></div><div class="line"># uncomment to force a console size. By default it will be display&apos;s size minus</div><div class="line"># overscan.</div><div class="line">#framebuffer_width=1280</div><div class="line">#framebuffer_height=720</div><div class="line"></div><div class="line"># uncomment if hdmi display is not detected and composite is being output</div><div class="line">hdmi_force_hotplug=1</div><div class="line"></div><div class="line"># uncomment to force a specific HDMI mode (this will force VGA)</div><div class="line">hdmi_group=2</div><div class="line">hdmi_mode=82</div><div class="line"></div><div class="line"># uncomment to force a HDMI mode rather than DVI. This can make audio work in</div><div class="line"># DMT (computer monitor) modes</div><div class="line">#hdmi_drive=2</div><div class="line"></div><div class="line"># uncomment to increase signal to HDMI, if you have interference, blanking, or</div><div class="line"># no display</div><div class="line">config_hdmi_boost=4</div><div class="line"></div><div class="line"># uncomment for composite PAL</div><div class="line">#sdtv_mode=2</div><div class="line"></div><div class="line">#uncomment to overclock the arm. 700 MHz is the default.</div><div class="line">#arm_freq=800</div><div class="line"></div><div class="line"># Uncomment some or all of these to enable the optional hardware interfaces</div><div class="line">#dtparam=i2c_arm=on</div><div class="line">#dtparam=i2s=on</div><div class="line">#dtparam=spi=on</div><div class="line"></div><div class="line"># Uncomment this to enable the lirc-rpi module</div><div class="line">#dtoverlay=lirc-rpi</div><div class="line"></div><div class="line"># Additional overlays and parameters are documented /boot/overlays/README</div><div class="line"></div><div class="line"># Enable audio (loads snd_bcm2835)</div><div class="line">dtparam=audio=on</div><div class="line">device_tree=</div></pre></td></tr></table></figure>
<p>  参考：</p>
<ol>
<li><a href="http://www.roboby.com/raspberry-pi-640x480.html" target="_blank" rel="external">解决Raspberry Pi只能在默认640×480模式下显示的问题</a></li>
<li><a href="http://elinux.org/RPiconfig" target="_blank" rel="external">http://elinux.org/RPiconfig</a></li>
</ol>
</li>
</ul>
<h2 id="0x04-配置WIFI"><a href="/1970/01/01/[玩转树莓派]0x01选个系统先/#0x04-配置WIFI" class="headerlink" title="0x04 配置WIFI"></a>0x04 配置WIFI</h2><p>如果你想摆脱网线的束缚，我们可以使用WIFI来接入网络。最新的树莓派3板载了WIFI，树莓派2代需要我们自己配置无线网卡。<a href="https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md" target="_blank" rel="external">官方的配置参考这里</a>。如何查看我们的无线网卡是否正确识别，可以使用<code>lsusb</code>命令，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pi@raspi:~ $ lsusb</div><div class="line">Bus 001 Device 005: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)</div><div class="line">Bus 001 Device 004: ID 0bda:8178 Realtek Semiconductor Corp. RTL8192CU 802.11n WLAN Adapter</div><div class="line">Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter</div><div class="line">Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.</div><div class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</div></pre></td></tr></table></figure>
<p>第二行的Devices 004 <code>RTL8192CU</code>就是我的无线网卡。RASPBIAN JESSIE系统默认集成了<code>RTL8192CU</code>的驱动，所以我插上去之后就能用了。如果你的无线网卡无法检测到，请检查驱动配置，由于无线网卡型号太多，驱动安装就不展开讲了，可以参考<a href="https://wiki.debian.org/WiFi/" target="_blank" rel="external">这里</a>。</p>
<ul>
<li><p>直接修改配置文件</p>
<p>  树莓派的网络配置文件位于 <code>/etc/network/interfaces</code> 和 <code>/etc/wpa_supplicant/wpa_supplicant.conf</code>文件中，我们将通过对其修改来使用我们的WIFI。修改之前建议先做备份：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo cp /etc/network/interfaces /etc/network/interfaces.bak</div><div class="line">sudo cp /etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf.bak</div></pre></td></tr></table></figure>
</li>
</ul>
<pre><code>下面是默认的 `interfaces` 配置文件：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ cat interfaces</div><div class="line"># interfaces(5) file used by ifup(8) and ifdown(8)</div><div class="line"></div><div class="line"># Please note that this file is written to be used with dhcpcd</div><div class="line"># For static IP, consult /etc/dhcpcd.conf and &apos;man dhcpcd.conf&apos;</div><div class="line"></div><div class="line"># Include files from /etc/network/interfaces.d:</div><div class="line">source-directory /etc/network/interfaces.d</div><div class="line"></div><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line">iface eth0 inet manual</div><div class="line"></div><div class="line">allow-hotplug wlan0</div><div class="line">iface wlan0 inet manual</div><div class="line">    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</div><div class="line"></div><div class="line">allow-hotplug wlan1</div><div class="line">iface wlan1 inet manual</div><div class="line">    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure>
</code></pre><p>在默认的 <code>interfaces</code> 配置下，我们可以仅仅修改 <code>/etc/wpa_supplicant/wpa_supplicant.conf</code>来完成WIFI配置，比如我的 <code>wpa_supplicant.conf</code>文件如下：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">$ sudo cat /etc/wpa_supplicant/wpa_supplicant.conf</div><div class="line">country=CN</div><div class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</div><div class="line">update_config=1</div><div class="line"></div><div class="line">network=&#123;</div><div class="line">	ssid=&quot;my wifi ssid&quot;</div><div class="line">	psk=&quot;my password&quot;</div><div class="line">	key_mgmt=WPA-PSK</div><div class="line">&#125;</div><div class="line">``` </div><div class="line">我的WIFI加密方式是 `WPA-PSK/WPA2-PSK` 因此配置 `key_mgmt=WPA-PSK` 加密方式可以在路由器的无线安全设置中查看。接下来我们还需要重启我们的WIFI：</div><div class="line"></div><div class="line"> ``` shell</div><div class="line">sudo ifdown wlan0</div><div class="line">sudo ifup wlan0</div><div class="line"> ``` </div><div class="line">或者直接重启系统 `sudo reboot` 。通过上面的设置，就可以连接我们的WIFI了。</div><div class="line"></div><div class="line">当然，我们也可以不使用 `/etc/wpa_supplicant/wpa_supplicant.conf` 文件，仅仅修改 `interfaces` 来完成配置，如我的另一个配置：</div><div class="line"></div><div class="line">``` shell</div><div class="line"># interfaces(5) file used by ifup(8) and ifdown(8)</div><div class="line"></div><div class="line"># Please note that this file is written to be used with dhcpcd</div><div class="line"># For static IP, consult /etc/dhcpcd.conf and &apos;man dhcpcd.conf&apos;</div><div class="line"></div><div class="line"># Include files from /etc/network/interfaces.d:</div><div class="line">source-directory /etc/network/interfaces.d</div><div class="line"></div><div class="line">auto lo</div><div class="line"></div><div class="line">iface lo inet loopback</div><div class="line">iface eth0 inet dhcp</div><div class="line"></div><div class="line"># auto wlan0</div><div class="line">allow-hotplug wlan0</div><div class="line">iface wlan0 inet static</div><div class="line">address 192.168.1.56</div><div class="line">netmask 255.255.255.0</div><div class="line">gateway 192.168.1.1</div><div class="line">wpa-ssid &lt;my ssid&gt;</div><div class="line">wpa-psk &lt;my password&gt;</div></pre></td></tr></table></figure>

更多的配置参数，可以参考[这里](TODO)。

&gt;这里配置使用了静态IP
</code></pre><ul>
<li><p>通过GUI桌面环境进行配置</p>
<p>  这个就非常简单了，连接显示器键盘鼠标，登录桌面环境，点击右上角的WIFI图标，选择自己的WIFI，然后输入密码即可，如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-f5ca409d28f18e39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GUI WIFI Config"></p>
</li>
</ul>
<p>获取到IP并接入到网络，接下来，我们就可以开启我们的树莓派之旅。各位玩的开心~~</p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「玩转树莓派」0x03初始化配置]]></title>
      <url>/1970/01/01/%5B%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5D0x03%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="0x00-系统的初始化配置"><a href="/1970/01/01/[玩转树莓派]0x03初始化配置/#0x00-系统的初始化配置" class="headerlink" title="0x00 系统的初始化配置"></a>0x00 系统的初始化配置</h2><p>Config Raspberry Pi</p>
<p>系统的默认配置有时候无法满足我们多样的实际情况，比如我们的时区、我们的语言、我们外接显示器的接口类型和参数等等， 这个时候就需要我们对系统的默认配置进行修改，来满足我们的具体的要求。下面给大家介绍可能需要用到的配置。</p>
<h2 id="0x01-config-txt"><a href="/1970/01/01/[玩转树莓派]0x03初始化配置/#0x01-config-txt" class="headerlink" title="0x01 config.txt"></a>0x01 config.txt</h2><p><code>config.txt</code> 这是一个重要的系统配置文件，我们可以到 Raspberry Pi 的这个 <code>/boot/config.txt</code> 目录下查看，也可直接在 TF 卡的根目录下找到他。部分配置可参考：<a href="/1970/01/01/[玩转树莓派]0x03初始化配置/0x01 Install Raspbian.md">树莓派的安装</a> 。更多的配置我们会在以后用到的时候讲解。</p>
<h2 id="0x02-raspi-config"><a href="/1970/01/01/[玩转树莓派]0x03初始化配置/#0x02-raspi-config" class="headerlink" title="0x02 raspi-config"></a>0x02 raspi-config</h2><p><code>raspi-config</code> 这个工具可以对系统进行各种<a href="https://www.raspberrypi.org/documentation/configuration/raspi-config.md" target="_blank" rel="external">配置</a>，需要使用系统权限执行：<code>sudo raspi-config</code>。打开后我们会见到如下图的配置界面：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-697b513cfffa95d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="raspi-config"></p>
<p>这个界面操作比较简单，如果你用过DOS系统，肯定不会陌生。一般情况只有下面几种按键：<code>Esc</code>、<code>Tab</code>、<code>上</code>、<code>下</code>、<code>左</code>、<code>右</code>、<code>Space</code>、<code>回车</code>。确认按<code>回车</code>，返回用<code>Esc</code>，选择用<code>Space</code>、<code>上</code>、<code>下</code>和<code>Tab</code>。</p>
<ul>
<li><p>Expand Filesystem </p>
<p>  说他重要主要是因为很多小伙伴比较好奇 <code>为什么我的文件系统变小了</code>，只有MB级，而你用的却是16或者32G的存储卡。如果你也有这个疑问，则可以通过执行这个选项来扩展你的文件系统使其可以使用整个存储卡。</p>
</li>
<li><p>Change User Password</p>
<p>  字面意思，修改你 Raspbian 的 <code>pi</code> 用户的密码</p>
</li>
<li><p>Boot Options</p>
<p>  选择你的启动方式，如使用Console or GUI，是否自动登录</p>
</li>
<li><p>Wait for Network at Boot</p>
<p>  是否在启动过程中等待网络连接，默认就好</p>
</li>
<li><p>Internationalistion Options</p>
<p>  国际化支持，修改你的位置，时区，键盘布局，Wifi等。</p>
<ol>
<li><p>Change Locale：</p>
<ul>
<li>若果你可以无障碍使用英文，建议不做改动</li>
<li>若想使用中文，改为：<code>zh_CN.UTF-8 UTF-8</code>。改动之后建议安装中文字体，否则可能会出现乱码（四个数字的方块），具体参考下面的中文乱码。<br><img src="http://upload-images.jianshu.io/upload_images/1801981-98f2afb853686149.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="raspi-config locale"></li>
</ul>
</li>
<li><p>TimeZone：东八区，所以我们选择：<code>Asiz</code> &gt; <code>Shanghai</code></p>
</li>
<li>Keyboard Layout：这个我们可以使用默认，或者根据你实际使用键盘选择</li>
<li>Wifi：我们选择 <code>CN China</code></li>
</ol>
</li>
<li><p>Enable Camera</p>
<p>  Camera，不确定是启用我们自己的USB摄像头还是官方的摄像头，选择 <code>Enable</code></p>
</li>
<li><p>Add to Rastrack</p>
<p>  一台设备，此处不做改动</p>
</li>
<li><p>Overclock</p>
<p>  超频，这个自己决定，个人感觉没必要</p>
</li>
<li><p>Advanced Options</p>
<p>  这里的选项比较多，共11项，以后用到的时候再过来介绍<br>  <img src="http://upload-images.jianshu.io/upload_images/1801981-ce2b21c3e59670ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="raspi-config advaned"></p>
</li>
<li><p>About raspi-config</p>
<p>  这个就不说了，没事可以读读</p>
</li>
</ul>
<h2 id="0x03-更新软件源"><a href="/1970/01/01/[玩转树莓派]0x03初始化配置/#0x03-更新软件源" class="headerlink" title="0x03 更新软件源"></a>0x03 更新软件源</h2><p>如果你使用默认的软件源，很多时候速度是非常慢的，所以我们考虑换成国内的镜像。树莓派的软件源列表请参考<a href="http://www.raspbian.org/RaspbianMirrors" target="_blank" rel="external">这里</a>，<code>sources.list</code> 的信息可参考<a href="https://www.debian.org/doc/manuals/debian-handbook/apt.zh-cn.html#sect.apt-sources.list" target="_blank" rel="external">这里</a>。</p>
<p>可能你会问怎么选择，首先天朝的网络肯定选国内的，国内的简单来说选择离自己近的，运营商相同的，当然你也可以通过专业的测速工具来决定。我选择了 Open Source Software Association of Chinese Academy of Sciences（<a href="http://mirrors.opencas.cn/raspbian/raspbian/），下面介绍修改方法：" target="_blank" rel="external">http://mirrors.opencas.cn/raspbian/raspbian/），下面介绍修改方法：</a></p>
<ul>
<li><p>首先备份源列表</p>
<p>  <code>pi@raspi:/etc/apt $ sudo cp sources.list sources.list.bak</code></p>
</li>
<li><p>编辑源列表</p>
<p>  <code>sudo nano sources.list</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pi@raspi:/etc/apt $ cat sources.list</div><div class="line">#deb http://mirrordirector.raspbian.org/raspbian/ jessie main contrib non-free rpi</div><div class="line"># Uncomment line below then &apos;apt-get update&apos; to enable &apos;apt-get source&apos;</div><div class="line">#deb-src http://archive.raspbian.org/raspbian/ jessie main contrib non-free rpi</div><div class="line"></div><div class="line">deb http://mirrors.opencas.cn/raspbian/raspbian/ jessie main contrib non-free rpi</div><div class="line"># Uncomment line below then &apos;apt-get update&apos; to enable &apos;apt-get source&apos;</div><div class="line">deb-src http://mirrors.opencas.cn/raspbian/raspbian/ jessie main contrib non-free rpi</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>更新</p>
<p>  <code>sudo apt-get update</code>    </p>
</li>
</ul>
<h2 id="0x04-中文乱码"><a href="/1970/01/01/[玩转树莓派]0x03初始化配置/#0x04-中文乱码" class="headerlink" title="0x04 中文乱码"></a>0x04 中文乱码</h2><p>如果你在Change Locale 中选择了 <code>zh_CN.UTF-8</code>就可能出现中文乱码的问题，下面介绍如何修改：</p>
<ul>
<li><p>安装字体：<code>sudo apt-get install ttf-wqy-zenhei</code></p>
<blockquote>
<p>顺便安装输入法：<code>sudo apt-get -y install scim-pinyin</code></p>
</blockquote>
</li>
<li><p>使用自己的字体：将自己的字体放到 <code>~/.local/share/fonts/</code> or <code>~/.fonts</code> 文件夹中（没有的话就创建），然后刷新字体 <code>fc-cache -fv</code> 或者 重启</p>
</li>
</ul>
<p>经过上面的配置，基本上就可以使用我们的 Raspberry Pi 了。接下来再给大家介绍如果突破天朝的网络问题，然后我们就可以正式的玩转树莓派了～～</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/1970/01/01/hello-world/</url>
      <content type="html"><![CDATA[<img src="/1970/01/01/hello-world//1970/01/01/hello-world/77DE502A.jpg" alt="cover" title="cover">
<img class="cover 77DE502A.jpg">
<p><img src="/1970/01/01/hello-world//images/77DE502A.jpg" alt="77DE502A.jpg"></p>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="/1970/01/01/hello-world/#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="/1970/01/01/hello-world/#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="/1970/01/01/hello-world/#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="/1970/01/01/hello-world/#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="/1970/01/01/hello-world/#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<p>===</p>
<h1 id="My-Demo"><a href="/1970/01/01/hello-world/#My-Demo" class="headerlink" title="My Demo"></a>My Demo</h1><p>这是一篇记录使用方法的介绍， 共以后参考。</p>
<h2 id="title1"><a href="/1970/01/01/hello-world/#title1" class="headerlink" title="title1"></a>title1</h2><h3 id="title2"><a href="/1970/01/01/hello-world/#title2" class="headerlink" title="title2"></a>title2</h3><h4 id="title3"><a href="/1970/01/01/hello-world/#title3" class="headerlink" title="title3"></a>title3</h4><p>测试TOC</p>
<h2 id="创建tags"><a href="/1970/01/01/hello-world/#创建tags" class="headerlink" title="创建tags"></a>创建tags</h2><ul>
<li>方法一</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tags: </div><div class="line">    - hexo </div><div class="line">    - yml</div></pre></td></tr></table></figure>
<ul>
<li>方法二</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tags: [hexo, yml]</div></pre></td></tr></table></figure>
<h2 id="插入图片"><a href="/1970/01/01/hello-world/#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p><img src="/1970/01/01/hello-world/901E3DC5.jpg" alt="插入图片"></p>
<h2 id="插入代码"><a href="/1970/01/01/hello-world/#插入代码" class="headerlink" title="插入代码"></a>插入代码</h2><ul>
<li>方法一</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Test</span><span class="params">()</span></span>&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>方法二</p>
<p>  public class Test(){</p>
<p>  }</p>
</li>
</ul>
<h2 id="创建About页面"><a href="/1970/01/01/hello-world/#创建About页面" class="headerlink" title="创建About页面"></a>创建About页面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  blog hexo new page &quot;about&quot;</div><div class="line">INFO  Created: ~/OneDrive/blog/source/about/index.md</div><div class="line">➜  blog</div></pre></td></tr></table></figure>
<h2 id="插入音乐"><a href="/1970/01/01/hello-world/#插入音乐" class="headerlink" title="插入音乐"></a>插入音乐</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> </span></div><div class="line">    <span class="attr">src</span>=<span class="string">"http://music.163.com/outchain/player?type=2&amp;id=25706282&amp;auto=0&amp;height=66"</span>&gt;  </div><div class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=25706282&auto=0&height=66"><br></iframe>  


]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> yml </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「玩转树莓派」0x04还我80端口]]></title>
      <url>/1970/01/01/%5B%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5D0x04%E8%BF%98%E6%88%9180%E7%AB%AF%E5%8F%A3/</url>
      <content type="html"><![CDATA[<h2 id="0x00-花生壳介绍"><a href="/1970/01/01/[玩转树莓派]0x04还我80端口/#0x00-花生壳介绍" class="headerlink" title="0x00 花生壳介绍"></a>0x00 花生壳介绍</h2><p>Oray for Raspberry Pi</p>
<p>花生壳服务<a href="http://baike.baidu.com/link?url=EYa6mHfgk9r-R6a0_GvHX2aUNOWOQiTwSXvnMy-f4xHGfBMlOnP78dU_KfmlNCcTHYxvXhDcZ-ncLk1enR8mB_" target="_blank" rel="external">百度百科</a>中有这样一段介绍：</p>
<blockquote>
<p>花生壳是动态域名解析服务客户端软件。当您安装并注册该项服务，无论您在任何地点、任何时间、使用任何线路，均可利用这一服务建立拥有固定域名和最大自主权的互联网主机。“花生壳”支持的线路包括普通电话线、isdn、adsl、有线电视网络、双绞线到户的宽带网和其它任何能够提供互联网真实ip的接入服务线路，而无论连接获得的ip属于动态还是静态。</p>
</blockquote>
<p>简单来说，我们可以通过花生壳的服务把我们的IP和一个域名做映射，映射后就可以使用域名访问而不需要记IP了。IP是一个不好记的东西，像我们这样的个人用户又是没有固定IP的（固定IP的宽带服务较贵，土豪可忽略），因此花生壳可以帮我们解决这个疼点。之前的花生壳给注册用户免费提供了一个二级域名，现在注册需要花5元购买一个永久的二级域名。下面会有介绍。</p>
<h2 id="0x01-安装花生壳内网版"><a href="/1970/01/01/[玩转树莓派]0x04还我80端口/#0x01-安装花生壳内网版" class="headerlink" title="0x01 安装花生壳内网版"></a>0x01 安装花生壳内网版</h2><p><code>花生壳内网版</code> 这个东西是干嘛的？ 如果你没有接触过，可能会有这个疑问，且听我慢慢道来。现在或者未来的某一天，你会知道，中国电信或者其他家的宽带会封掉一些我们常用的端口，比如最常见的80端口。可能主要是为了加强网络管理，不允许私人在家里搭建网络服务吧。顺便告诉你一个不幸的消息，如果你的ssh不能在外网访问或者访问不稳定，也有可能被封了。而我们将要安装的 <code>花生壳内网版</code> 就是突破这个限制的。大家也可以参考<a href="http://service.oray.com/question/2680.html" target="_blank" rel="external">这里</a>。</p>
<h3 id="下载"><a href="/1970/01/01/[玩转树莓派]0x04还我80端口/#下载" class="headerlink" title="下载"></a>下载</h3><p>首先，我们需要下载<a href="http://hsk.oray.com/download/#type=http|shumeipai" target="_blank" rel="external">树莓派版的花生壳内网版</a>，在树莓派上，我们可以用 <code>wget</code> 进行下载（这里我们下载到~/Downloads/），命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~/Downloads $ wget http://download.oray.com/peanuthull/embed/phddns_raspberry.tgz</div></pre></td></tr></table></figure>
<p>下载下来的文件叫 <code>phddns_raspberry.tgz</code>，我们对其进行解压：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~/Downloads $ tar zxvf phddns_raspberry.tgz</div><div class="line">phddns2/</div><div class="line">phddns2/oraynewph</div><div class="line">phddns2/oraynewph.tgz</div><div class="line">phddns2/oray_serve</div><div class="line">phddns2/parse</div></pre></td></tr></table></figure>
<h3 id="安装"><a href="/1970/01/01/[玩转树莓派]0x04还我80端口/#安装" class="headerlink" title="安装"></a>安装</h3><p>我们需要使用root账号来安装，否则可能出现权限问题，导致安装失败。<code>sudo su</code> 切换到root，使用 <code>./oraynewph start</code> 执行安装。下面是安装过程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~/Downloads $ cd phddns2</div><div class="line">pi@raspberrypi:~/Downloads/phddns2 $ sudo su</div><div class="line">root@raspberrypi:/home/pi/Downloads/phddns2# ./oraynewph start</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="/1970/01/01/[玩转树莓派]0x04还我80端口/#配置" class="headerlink" title="配置"></a>配置</h3><p>在上面的安装日志中我们可以看到这的提示信息（你也可以使用 <code>oraynewph status</code> 命令来查看此信息）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SN:RAPIe*************</div><div class="line">Please visit http://b.oray.com</div><div class="line">Oraynewph start success !</div></pre></td></tr></table></figure>
<p>按照提示，我们打开 <a href="http://b.oray.com" target="_blank" rel="external">http://b.oray.com</a> 这个网站，使用上面的SN登录系统（默认密码是<code>admin</code>，登录后会要求你设置密码，绑定花生壳账号等，如果你没有，那需要你注册一个），登录后如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-3b9d5ae4dd7ad773.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="花生壳"></p>
<p>我们点击内网映射，进入设置界面，点击 添加配置，如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-35f932a7e5c24583.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置"><br><img src="http://upload-images.jianshu.io/upload_images/1801981-33ccee123723a0df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置"></p>
<p>经过如上配置，我们就可以通过域名来访问我们放在家里的树莓派上的http服务了。简单的，我们可以使用如下命令起一个http服务：<code>sudo python -m SimpleHTTPServer 80</code> 进行测试。</p>
<h2 id="0x02-花生壳服务"><a href="/1970/01/01/[玩转树莓派]0x04还我80端口/#0x02-花生壳服务" class="headerlink" title="0x02 花生壳服务"></a>0x02 花生壳服务</h2><h3 id="注册花生壳"><a href="/1970/01/01/[玩转树莓派]0x04还我80端口/#注册花生壳" class="headerlink" title="注册花生壳"></a>注册花生壳</h3><p>首先我们需要注册一个花生壳，并花¥5购买一个永久的二级域名，这个就介绍了，类似这样：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-2e065557539ab45b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="oray info"></p>
<h3 id="路由器上登录花生壳"><a href="/1970/01/01/[玩转树莓派]0x04还我80端口/#路由器上登录花生壳" class="headerlink" title="路由器上登录花生壳"></a>路由器上登录花生壳</h3><p>接下来的操作都是基于这个前提的。先回顾下我的网络拓扑：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-f2dc8e70dc55ce2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="network topology"></p>
<p>我使用的是TP-Link的路由器，宽带ADSL拨号是在这个路由器上，路由器有一个公网IP。TP-Link路由器是支持花生壳服务的。我们在路由器登录花生壳账号后即可通过登录帐号绑定的域名来访问这个公网IP了，TP-Link的路由器登录后的信息如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-ae18c1b1d02d7ab1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tplink_ddns_oray"></p>
<h3 id="配置DMZ"><a href="/1970/01/01/[玩转树莓派]0x04还我80端口/#配置DMZ" class="headerlink" title="配置DMZ"></a>配置DMZ</h3><p>对于挂在路由器下的 Raspberry Pi 仅仅依靠上面的花生壳配置还不够的。我们还需要启用路由器的DMZ主机功能，下面是关于DMZ的介绍：</p>
<blockquote>
<p>在某些特殊情况下，需要让局域网中的一台计算机完全暴露给广域网，以实现双向通信，此时可以把该计算机设置为DMZ主机。 只有启用了该功能后，对应的DMZ主机才会生效。</p>
</blockquote>
<p>根据介绍，我们做下面的配置：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-e179b14b6d8e5843.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DMZ"></p>
<p>这样发送到我们路由器的所有请求都会被转发到我们的 Raspberry Pi了，我们的 Raspberry Pi 就成了公网中的一台主机了。</p>
<p><code>PS：DMZ主机配置并不是一个安全的选择，更安全的配置是只影射我们使用的端口，比如80，22等</code></p>
<p>好了，这基本算是最后一篇基础介绍了。下一篇开始介绍树莓派最吸引我的地方 <code>GPIO</code> 操作，想想都兴奋了～～</p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「玩转树莓派」0x06DS18B20温度检测]]></title>
      <url>/1970/01/01/%5B%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5D0x06DS18B20%E6%B8%A9%E5%BA%A6%E6%A3%80%E6%B5%8B/</url>
      <content type="html"><![CDATA[<h2 id="0x00-DS18B20温度检测"><a href="/1970/01/01/[玩转树莓派]0x06DS18B20温度检测/#0x00-DS18B20温度检测" class="headerlink" title="0x00 DS18B20温度检测"></a>0x00 DS18B20温度检测</h2><p>Raspberry connect to DS18B20</p>
<p>需要一个能测量水温的温度计，淘宝买了高逼格的红外温枪，到手后发现这鬼东西不能测金属杯里的水温（好的太贵）。然后又淘宝了下，一个电子温度计都卖三位数，好吧，我穷…… 忽然想起手上有一个 <code>DS18B20</code>，嗯嗯，拿出来自己做一个温度计吧～～</p>
<p><code>DS18B20</code> 这个传感器很常见，某宝上一搜一购物车，价格5到10元不等，当然也有更好的，按需购买，大概<a href="http://www.wendangku.net/doc/529cf93fc281e53a5802fff5.html" target="_blank" rel="external">参数如下</a>：</p>
<blockquote>
<ul>
<li>独特的1-Wire总线接口仅需要一个管脚来通信。</li>
<li>每个设备的内部ROM上都烧写了一个独一无二的64位序列号。</li>
<li>多路采集能力使得分布式温度采集应用更加简单。</li>
<li>无需外围元件。</li>
<li>能够采用数据线供电；供电范围为3.0V至5.5V。</li>
<li>温度可测量范围为：-55℃至+125℃（-67℉至+257℉）。</li>
<li>温度范围超过-10℃至85℃之外时具有+-0.5℃的精度。<code>（怀疑有误）</code></li>
<li>内部温度采集精度可以由用户自定义为9-Bits至12-Bits。</li>
<li>DS18B20 分辨率可编程 1-Wire数字温度传感器</li>
<li>温度转换时间在转换精度为12-Bits时达到最大值750ms。</li>
<li>用户自定义非易失性的的温度报警设置。 · 定义了温度报警搜索命令和当温度超过用户自定义的设定值时。</li>
<li>可选择的8-Pin SO (150 mils), 8-PinμSOP，及3-Pin TO-92封装。 · 与DS1822程序兼容。</li>
<li>应用于温度控制系统，工业系统，民用产品。</li>
</ul>
</blockquote>
<p>嗯嗯，很多技术参数，作为外行人看着就晕。这里关注几个细节就好：</p>
<ul>
<li>电压：3.0V～5.5V</li>
<li>温度范围：-55℃至+125℃</li>
<li>测量精度：可调，0.5℃对我来说可接受，所以暂时没去细究</li>
</ul>
<p>接下来结合我的树莓派的板子，给大家演示如何使用。</p>
<h2 id="0x01-使用"><a href="/1970/01/01/[玩转树莓派]0x06DS18B20温度检测/#0x01-使用" class="headerlink" title="0x01 使用"></a>0x01 使用</h2><p>首先按照网上的方法，比如<a href="http://blog.csdn.net/vvbbbbb/article/details/52053293" target="_blank" rel="external">vvbbbbb</a>，一步步操作，难免遇到一些坑，我的问题是怎么都不能识别这个传感器，后来找了很久，无意中解决了，结合我的实际，做简单记录，具体操作如下：</p>
<ul>
<li><p>连接传感器和Raspberry Pi</p>
<p>  <code>DS18B20</code> 有三个针脚，分别是</p>
<ul>
<li>VCC 红色，连 <code>Raspberry Pi</code> 的 VCC，测试连接 3V3 或 5V5 都可以</li>
<li>DATA 黄色，连 <code>Raspberry Pi</code> 的 GPIO4</li>
<li><p>GND 黑色，连 <code>Raspberry Pi</code> 的 GND</p>
<p>另外和需要在用一个 4.7K 的电阻连接 VCC 和 DATA （别问我为什么，我也不知道，大学模电学的那叫一个渣），如果你没有 4.7K 的电阻，听说大一点或者小一点都可以，我没试，反正我有。如果你连电阻都没有，告诉你某宝上有打包一袋出售的，常用阻值的都有，很便宜，值得你入手。好了，最终电路如图：</p>
</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-003624acc884b839.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ds18b20"></p>
<ul>
<li><p>操作 </p>
<ol>
<li><p>更新系统</p>
<p> 如果你的系统版本比较旧，建议你更新，否则跳过这一步：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get upgrade</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<pre><code>    更新速度视你的网速和源的速度，怎么切换源，可以参考我之前的文章。

1. 启用 `1-Wire`

    - 终端执行 `sudo raspi-config`，打开配置界面，找到 `1-Wire`（我的位于`Interfacing Option` 下，不同版本不一样，有的可能在 `Advanced Options` 下）启用它。
    - 你也可以直接配置：编辑 `/boot/config.txt` ，在最后一行添加 `dtoverlay=w1-gpio` 保存即可。

        1. 终端输入：`sudo nano /boot/config.txt`
        2. `Ctrl+V` 滚到最下面，输入 `dtoverlay=w1-gpio`
        3. `Ctrl+O` 保存，`Ctrl+X` 退出

    两个方法结果一样，操作完成之后需要重启机器，命令：`sudo reboot`

2. 查看你的传感器

    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~ $ cd /sys/bus/w1/devices</div><div class="line">pi@raspberrypi:/sys/bus/w1/devices $ ls</div><div class="line">28-031561d43aff  w1_bus_master1</div><div class="line">pi@raspberrypi:/sys/bus/w1/devices $ cat 28-031561d43aff/w1_slave</div><div class="line">48 01 01 01 1f ff 0c 10 04 : crc=04 YES</div><div class="line">48 01 01 01 1f ff 0c 10 04 t=20500</div><div class="line">pi@raspberrypi:/sys/bus/w1/devices $</div></pre></td></tr></table></figure>


    先查看 `w1` 设备列表，然后查看里面的 `w1_slave` 文件内容，即可显示出温度信息（这个温度信息并不是我们最终的温度，需要经过一定的换算）。

    `前方高能`
    `前方填坑`

    嗯嗯，坑出现了，我的在查看传感器的时候显示如下：

    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~$ cd /sys/bus/w1/devices/</div><div class="line">pi@raspberrypi:/sys/bus/w1/devices $ ls</div><div class="line">00-600000000000  00-a00000000000  00-e00000000000  w1_bus_master1</div><div class="line">pi@raspberrypi:/sys/bus/w1/devices $</div></pre></td></tr></table></figure>


    网上看到的都是 `28-xxxxxxxxxxxxxx` 这样的信息，而我的却不是；这些目录下也没有 `w1_slave`文件；而且每次进这个目录 `/sys/bus/w1/devices` 这些文件夹的名字和数量都有可能会变。好吧，懵逼了。所以去找答案，果然也有一些人反应过这个问题，但大部分对我都没用，比如 VCC 从 3V3 换到 5V5 ，看看时间，又快12点了，想放弃了都。此时[佛光乍现](https://www.raspberrypi.org/forums/viewtopic.php?f=28&amp;t=106041)：可能是 `GPIO` 口的问题，可以换一个试试，一试果然很爽，操作如下：

    编辑 `/boot/config.txt`，将刚才添加的那行修改如下 `dtoverlay=w1-gpio,gpiopin=5,pullup=on` 这里的 `5` 是对应的GPIO口，你也可以用其他的，高兴就好。保存重启即可。

3. 查看温度数据

    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:/sys/bus/w1/devices $ cat 28-031561d43aff/w1_slave</div><div class="line">48 01 01 01 1f ff 0c 10 04 : crc=04 YES</div><div class="line">48 01 01 01 1f ff 0c 10 04 t=20500</div><div class="line">pi@raspberrypi:/sys/bus/w1/devices $</div></pre></td></tr></table></figure>


    这里的 `t=20500` 应该就是温度数据，不知道 `crc=40` 是不是校验数据，不管了，我也没时间去计算。网上肯定有现成的轮子来展示，这里推荐 [w1thermsensor](https://github.com/timofurrer/w1thermsensor)。

    - 安装

        `pip install w1thermsensor`

    - 使用(ds18b20.py)

        <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> w1thermsensor <span class="keyword">import</span> W1ThermSensor</div><div class="line">sensor = W1ThermSensor(W1ThermSensor.THERM_SENSOR_DS18B20, <span class="string">"031561d43aff"</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    temperature_in_celsius = sensor.get_temperature()</div><div class="line">    <span class="keyword">print</span> temperature_in_celsius</div></pre></td></tr></table></figure>


        这里的一个常量 `031561d43aff` 就是 `28-031561d43aff` 这里的后半部分，你的可能跟我不一样，请改成你自己看到的。

        执行：

        <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~/python $ cat ds18b20.py</div><div class="line"><span class="keyword">from</span> w1thermsensor <span class="keyword">import</span> W1ThermSensor</div><div class="line">sensor = W1ThermSensor(W1ThermSensor.THERM_SENSOR_DS18B20, <span class="string">"031561d43aff"</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    temperature_in_celsius = sensor.get_temperature()</div><div class="line">    <span class="keyword">print</span> temperature_in_celsius</div><div class="line">pi@raspberrypi:~/python $ python ds18b20.py</div><div class="line"><span class="number">21.0</span></div><div class="line"><span class="number">21.0</span></div></pre></td></tr></table></figure>
</code></pre><p>完美～</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[玩转树莓派]0x06DS18B20温度检测/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://datasheets.maximintegrated.com/en/ds/DS18B20.pdf" target="_blank" rel="external">https://datasheets.maximintegrated.com/en/ds/DS18B20.pdf</a></li>
<li><a href="http://www.wendangku.net/doc/529cf93fc281e53a5802fff5.html" target="_blank" rel="external">http://www.wendangku.net/doc/529cf93fc281e53a5802fff5.html</a></li>
<li><a href="http://blog.csdn.net/vvbbbbb/article/details/52053293" target="_blank" rel="external">http://blog.csdn.net/vvbbbbb/article/details/52053293</a></li>
<li><a href="https://www.raspberrypi.org/forums/viewtopic.php?f=28&amp;t=106041" target="_blank" rel="external">https://www.raspberrypi.org/forums/viewtopic.php?f=28&amp;t=106041</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「玩转树莓派」0x05GPIO]]></title>
      <url>/1970/01/01/%5B%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5D0x05GPIO/</url>
      <content type="html"><![CDATA[<p>GPIO：General Purpose Input/Output pins on the Raspberry Pi</p>
<blockquote>
<p>General purpose input/output; in this specific case the pins on the Raspberry Pi and what you can do with them. So called because you can use them for all sorts of purposes; most can be used as either inputs or outputs, depending on your program.</p>
</blockquote>
<h2 id="0x00-GPIO"><a href="/1970/01/01/[玩转树莓派]0x05GPIO/#0x00-GPIO" class="headerlink" title="0x00 GPIO"></a>0x00 GPIO</h2><p>有些事情坚持了，就做出来了，不坚持，就放弃了，就这么简单。之前想写个树莓派的入门文章，一下子写了几篇之后，就停下来了。可能最近确是比较忙，或者，承认没有严格要求自己，好吧，拖了这么久，今天，再写一篇。</p>
<p>不管你信不信，树莓派最吸引我的就是它的GPIO口。即使是现在，想到GPIO还是非常的兴奋呢。为什么呢？对于通用计算机，我们能操作的基本都是USB、串口等一些接口。与这些接口相比，GPIO口有明显的不同，我们可以直接操作一个IO口的状态：是高电平还是低电平。根据这个特性，我们就可以完成首次接触单片机完成的小实验：控制我们的LED灯，制作跑马灯，模拟交通灯等等有趣的实验。如果你想通过其他设备来完成这些操作，可能需要掌握其他对初学者来说比较困难的技术。另外，大学时期有玩过 89C51，对IO口还是恋恋不舍，曾经想通过其产生PWM信号控制舵机，很遗憾没实现，现在正好可以完成这个心愿。</p>
<h2 id="0x01-从一个LED说开去"><a href="/1970/01/01/[玩转树莓派]0x05GPIO/#0x01-从一个LED说开去" class="headerlink" title="0x01 从一个LED说开去"></a>0x01 从一个LED说开去</h2><p>这是一篇很基础的文章，所以会比较通俗。首先我们通过LED的Demo来了解下什么是GPIO。先看一张原理图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-1dd47f2ab18be25f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LED Demo"></p>
<p>这是一个非常简单的电路：一个发光二极管、一个电阻（300Ω左右，忘记怎么算的了）、一个Rapsberry Pi。由于Rapsberry Pi GPIO口输出电压是3V3，所以我们串一个电阻来保护我们的LED。当我们通过代码控制链接电阻的那个GPIO口状态时，就可以使LED在亮和灭之间切换。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import RPi.GPIO as GPIO</div><div class="line">import time</div><div class="line"></div><div class="line">GPIO.setmode(GPIO.BCM)</div><div class="line">GPIO.setwarnings(False)</div><div class="line"></div><div class="line">led = 23</div><div class="line">GPIO.setup(led, GPIO.OUT)</div><div class="line"></div><div class="line">try:</div><div class="line">    while(True):</div><div class="line">        GPIO.output(led, 1)</div><div class="line">        time.sleep(1)</div><div class="line">        GPIO.output(led, 0)</div><div class="line">        time.sleep(1)</div><div class="line">except Exception as e:</div><div class="line">    print(e)</div><div class="line">finally:</div><div class="line">    GPIO.cleanup()</div></pre></td></tr></table></figure>
<p>运行上面的代码，我们就可以看到LED两秒一个循环的亮灭。哈哈，是不是特有成就感，传说中的点亮小灯泡终于实现了～～  然并卵，这并没有什么实际的用处。下面再介绍一个屌屌的demo，通过<code>HC-SR501</code>人体红外传感器检测控制LED的亮灭，实际的例子的就是很多自动门，站在门下面的时候门会自动打开。 <code>HC-SR501</code> 它是长这个样子滴：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-b20c464659eac97e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hcsr501 1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-4f71a6cfafddac73.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hcsr501 2"></p>
<p>(PS:以上图片来自两个淘宝卖家)</p>
<p>三个针脚：VCC、OUT、GND，另外还有一个是否连续监测的针脚，连续时是H，不连续时是L，默认是H，看你买的具体设计了。另外还有两个调节旋钮，如上图。其实这个传感器特简单，供电电压5到20V，输出0或者3V3两个状态，不用与 Raspiberry Pi 连接，也可以直接当作开关使用。另外我还接了一个自锁开关，控制整个电路的开关。如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-f0bc7fe3d2041548.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hcsr501 switcher"></p>
<p>接着上源码：</p>
<pre><code class="python"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO
<span class="keyword">import</span> time

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(<span class="keyword">False</span>)

led = <span class="number">25</span>
GPIO.setup(led, GPIO.OUT)
swtich = <span class="number">22</span>
GPIO.setup(swtich, GPIO.IN, GPIO.PUD_UP)
hcsr501 = <span class="number">23</span>
GPIO.setup(hcsr501, GPIO.IN, GPIO.PUD_UP)

<span class="keyword">try</span>:
    GPIO.output(led, <span class="number">0</span>)
    <span class="keyword">while</span>(<span class="keyword">True</span>):
        print(str(GPIO.input(swtich)) + <span class="string">'||'</span> + str(GPIO.input(hcsr501)))
        <span class="keyword">if</span> GPIO.input(swtich) == <span class="keyword">True</span>:
            <span class="keyword">if</span> GPIO.input(hcsr501) == <span class="keyword">True</span>:
                GPIO.output(led, <span class="number">1</span>)
            <span class="keyword">else</span>:
                GPIO.output(led, <span class="number">0</span>)
        <span class="keyword">else</span>:
            GPIO.output(led, <span class="number">0</span>)

        time.sleep(<span class="number">1</span>)
<span class="keyword">except</span> Exception <span class="keyword">as</span> e:
    print(e)
<span class="keyword">finally</span>:
    GPIO.cleanup()
</code></pre>
<p>当我们把开关打开，经过人体红外传感器的时候LED（这个地方我用的是3V3的高亮LED，所以没有接电阻）就会亮。把这个东西放在房间里，晚上下班开门就可以自动开灯了。如果你有兴趣，还可以把里面的开关换成一个光线传感器，那样就更完美了～～</p>
<p>运行上面的代码，我们需要安装 <code>RPi.GPIO</code> 库，Raspbian 默认是安装好了。简单的浏览上面的代码，我们可以发现，首先设置 GPIO mode，这里设置为BCM；然后定义GPIO的状态，GPIO口我们可以定义两种状态，GPIO.IN 和 GPIO.OUT，分别对应输入和输出；最后就是操作我们的GPIO口了。由于<code>RPi.GPIO</code> 库已经给我们封装复杂的操作，所以我们用起来特别简便。更多可 <code>RPi.GPIO</code> 信息可参考<a href="https://pypi.python.org/pypi/RPi.GPIO/0.6.2" target="_blank" rel="external">这里</a>。</p>
<h2 id="0x02-Raspberry-Pi的GPIO针脚"><a href="/1970/01/01/[玩转树莓派]0x05GPIO/#0x02-Raspberry-Pi的GPIO针脚" class="headerlink" title="0x02 Raspberry Pi的GPIO针脚"></a>0x02 Raspberry Pi的GPIO针脚</h2><p>根据上面的demo程序，我们再来详细的介绍下GPIO。</p>
<ul>
<li><p>GPIO.setmode()</p>
<p>  指定针脚的编号方式，这里有两种选择：    </p>
<ol>
<li><p>GPIO.BOARD</p>
<p> 使用针脚的物理顺序来编号</p>
</li>
<li><p>GPIO.BCM</p>
<p> Broadcom SoC 的编码方式</p>
<p>具体的可参考下面这张图，其中 <code>Pin</code>  列代表的是 <code>GPIO.BOARD</code> 方式的编码， 而 <code>NAME</code> 列代表的是<code>GPIO.BCM</code> 方式的编码。</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/1801981-de0f86b2b6be0658.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GPIO Pi3">    </p>
<blockquote>
<p>不同版本的 Raspberry Pi 会有不同的针脚分布，除查阅相关资料外，可以执行下面命令查看：<br>pi@raspberrypi:~ $ gpio readall</p>
</blockquote>
</li>
</ol>
</li>
<li><p>GPIO.setwarnings(True or False)</p>
<p>  当我们有多个脚本在操作同一个GPIO口时可能会出现警告，通过这个设置来选择是否忽略</p>
</li>
<li><p>GPIO.setup(channel, GPIO.OUT, initial=GPIO.HIGH)</p>
<p>  设置GPIO口的状态，参数分别为：针脚序号、输入还是输出、初始状态高电平还是低电平。</p>
</li>
<li><p>GPIO.input(channel)</p>
<p>  获取指定GPIO口的状态</p>
</li>
<li><p>GPIO.output(channel, GPIO.HIGH)</p>
<p>  操作GPIO口的输出状态</p>
</li>
<li><p>GPIO.cleanup()</p>
<p>  清除当前操作的所有GPIO口的状态，恢复为输入状态。好的做法是每次使用完都清除一下。</p>
</li>
</ul>
<p>这就是一个简单完整的使用 python 操作 GPIO的流程。虽然看到的现象，看到的代码，但是你还会问：GPIO到底是个啥样的东西，我们设置不同的状态时它的电压时怎样的？它的驱动能力如何？什么样的操作可能导致烧毁GPIO？</p>
<p>Raspberry Pi 2 Model B 使用了 BCM2836芯片，Raspberry Pi Model A, B, B+, Compute Module and Raspberry Pi Zero使用了BCM2835芯片，这里我们以BCM2835为例（作为一般使用者，可以不关心这个）。BCM2835有3个GPIO bank，这个3个bank都有自己的VDD，并且由3V3电压提供支持。<code>如果我们的输入电压超过3V3，就有可能烧毁SoC上的GPIO bank</code>。由于我也是业余的，说的再专业我也听不懂，因此简单的来说，使用外部传感器，它的输入信号电压是3V3的就没问题。当然，传感器的驱动电压可以不是3V3。比如上面使用的 <code>HC-SR501</code> 它的驱动电压是5V，输入信号电压是3V3，这样接在外面的 Raspberry Pi 就完全没问题，而且不需要额外电源为其供电，因为 Raspberry Pi 2 Model B 有两个5V的针脚（就是右上角的两个，2和4）。</p>
<p>更多的关于GPIO的上拉下拉悬浮等状态，可以参考<a href="http://dreamcolor.net/archives/rpi-gpio-module-inputs.html" target="_blank" rel="external">这里</a>的介绍。</p>
<h2 id="0x03-GPIO进阶"><a href="/1970/01/01/[玩转树莓派]0x05GPIO/#0x03-GPIO进阶" class="headerlink" title="0x03 GPIO进阶"></a>0x03 GPIO进阶</h2><p>对于控制简单的设备，比如LED，使用 RPi.GPIO 已经够用了。但是当我们进一步研究之后会发现RPi.GPIO并不是那么完美，在它的官方文档上有这么两段话：</p>
<blockquote>
<p>Note that this module is unsuitable for real-time or timing critical applications. This is because you can not predict when Python will be busy garbage collecting. It also runs under the Linux kernel which is not suitable for real time applications - it is multitasking O/S and another process may be given priority over the CPU, causing jitter in your program. If you are after true real-time performance and predictability, buy yourself an Arduino <a href="http://www.arduino.cc" target="_blank" rel="external">http://www.arduino.cc</a> !<br>Note that the current release does not support SPI, I2C, hardware PWM or serial functionality on the RPi yet. This is planned for the near future - watch this space! One-wire functionality is also planned.</p>
</blockquote>
<p>从上面我们可以了解到 RPi.GPIO 并不适合实时性要求高的应用，也不适合周期计数的应用。python本身性能就不是非常理想，比如当我们尝试用python去操作DHT11（温湿度传感器）就非常的困难，因为很难和它的时序保持同步。而且linux并不是实时操作系统，运行在linux内核之上，无法避免被其他进程抢占CPU。目前版本的 RPi.GPIO 并不支持SPI、I2C、硬件PWM、串口等。如果你希望使用这些接口，那就需要考虑换一个库或者换一种语言了。具体的是用，在以后的文章中会做介绍。</p>
<h2 id="0xFF-参考"><a href="/1970/01/01/[玩转树莓派]0x05GPIO/#0xFF-参考" class="headerlink" title="0xFF 参考"></a>0xFF 参考</h2><ol>
<li><a href="https://github.com/raspberrypi/documentation" target="_blank" rel="external">https://github.com/raspberrypi/documentation</a></li>
<li><a href="https://zh.scribd.com/doc/101830961/GPIO-Pads-Control2" target="_blank" rel="external">https://zh.scribd.com/doc/101830961/GPIO-Pads-Control2</a></li>
<li><a href="https://pypi.python.org/pypi/RPi.GPIO" target="_blank" rel="external">https://pypi.python.org/pypi/RPi.GPIO</a></li>
<li><a href="http://dreamcolor.net/archives/rpi-gpio-module-pwm.html" target="_blank" rel="external">http://dreamcolor.net/archives/rpi-gpio-module-pwm.html</a></li>
</ol>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「玩转树莓派」0x02吊炸天的远程控制]]></title>
      <url>/1970/01/01/%5B%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE%5D0x02%E5%90%8A%E7%82%B8%E5%A4%A9%E7%9A%84%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="0x00-吊炸天的远程控制"><a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/#0x00-吊炸天的远程控制" class="headerlink" title="0x00 吊炸天的远程控制"></a>0x00 吊炸天的远程控制</h2><p>Connect to Raspberry Pi</p>
<p>安装好了系统，接下来我们就可以开始操作 Raspberry Pi 了。如果你不是拿来做家庭媒体中心，看视频之类，我们完全不需要给 Raspberry Pi 配置显示器，通过远程连接工具就可以完成我们所有的日常操作。由于连接显示器操作比较直观，这里仅给大家介绍无显示器的远程操作方法。</p>
<h2 id="0x01-SSH"><a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/#0x01-SSH" class="headerlink" title="0x01 SSH"></a>0x01 SSH</h2><p>先看一段介绍，来自<a href="https://zh.wikipedia.org/wiki/Secure_Shell" target="_blank" rel="external">维基百科</a>：</p>
<blockquote>
<p>Secure Shell（缩写为SSH），由IETF的网络工作小组（Network Working Group）所制定；SSH为一项创建在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。<br>传统的网络服务程序，如rsh、FTP、POP和Telnet其本质上都是不安全的；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。<br>而SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。通过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。<br>SSH之另一项优点为其传输的数据可以是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、POP、甚至为PPP提供一个安全的“通道”。</p>
</blockquote>
<p>上面的介绍是不是太抽象～～还是我来说吧。折腾 Raspberry Pi ，ssh作为一个重要的远程连接工具（或者理解为把 Raspberry Pi 的终端拿到本地来），日常操作中是必不可少的！在没有显示器的情况下，我们可以使用ssh完成绝大多数（甚至所有的）操作。因此，这里我必须着重介绍。我们装的 Raspbian 系统默认是打开ssh的（否则在没有显示器的情况下我们是无法操作的，当然你非得说用USB转TTL也行），因此，我们不需要做任何配置就可以直接使用ssh。</p>
<h3 id="安装SSH"><a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/#安装SSH" class="headerlink" title="安装SSH"></a>安装SSH</h3><p>Windows系统推荐使用免费、小巧、无需安装、并且功能强大的ssh工具。</p>
<blockquote>
<p><code>PuTTY</code> 是一个Telnet、SSH、rlogin、纯TCP以及串行接口连接软件。</p>
</blockquote>
<p>大家可以到他的<a href="http://www.putty.org/" target="_blank" rel="external">官网</a>下载，或者到这里<a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/file/putty.exe">下载</a>，非常小，519KB。打开是界面如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-b8c35c7e12a4d367.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PuTTY"></p>
<p>使用也是非常的简单，在 <code>Host Name(or IP address)</code> 中填入你的域名或者IP，在 <code>Port</code> 中填入你的端口，默认是 <code>22</code> （如果你修改了默认端口，在此改成新的端口即可），然后点击 <code>Open</code> 就开始连接，打开一个 terminal ，按照提示操作即可：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-c0bfadc447cdac8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PuTTY login"></p>
<p>Mac和Linux系统中默认已经安装了 ssh 工具，我们可以直接在命令行中操作即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">➜  ~ ssh -V</div><div class="line">OpenSSH_6.9p1, LibreSSL 2.1.8</div><div class="line">➜  ~ ssh</div><div class="line">usage: ssh [-1246AaCfGgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]</div><div class="line">           [-D [bind_address:]port] [-E log_file] [-e escape_char]</div><div class="line">           [-F configfile] [-I pkcs11] [-i identity_file]</div><div class="line">           [-L [bind_address:]port:host:hostport] [-l login_name] [-m mac_spec]</div><div class="line">           [-O ctl_cmd] [-o option] [-p port]</div><div class="line">           [-Q cipher | cipher-auth | mac | kex | key]</div><div class="line">           [-R [bind_address:]port:host:hostport] [-S ctl_path] [-W host:port]</div><div class="line">           [-w local_tun[:remote_tun]] [user@]hostname [command]</div><div class="line">➜  ~</div></pre></td></tr></table></figure>
<h3 id="使用SSH"><a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/#使用SSH" class="headerlink" title="使用SSH"></a>使用SSH</h3><p>ssh的使用比较简单，直接在我们本地的终端中输入 <code>ssh pi@&lt;your domain or ip&gt;</code> 命令，按照提示输入密码即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">➜  ~ ssh pi@ttdevs.com</div><div class="line">pi@ttdevs.com&apos;s password:</div><div class="line"></div><div class="line">The programs included with the Debian GNU/Linux system are free software;</div><div class="line">the exact distribution terms for each program are described in the</div><div class="line">individual files in /usr/share/doc/*/copyright.</div><div class="line"></div><div class="line">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</div><div class="line">permitted by applicable law.</div><div class="line">Last login: Thu Mar 31 17:38:44 2016 from 58.11.22.33</div><div class="line">pi@raspberry:~ $</div></pre></td></tr></table></figure>
<p>完成ssh的登录，你就可以在本地直接操作 Raspberry Pi 了，而且体验和直接登录 Raspberry Pi 操作一样。</p>
<h3 id="修改端口号"><a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/#修改端口号" class="headerlink" title="修改端口号"></a>修改端口号</h3><p>如果你跟我一样比较悲催——22端口 也 被电信封了（或者很不稳定），那你就需要给ssh换（或者增加）一个端口。如何判断22端口是否被封了？最简单就是如果你在内网通过ssh可以访问Raspberry Pi，外网却访问不了，那么22端口就有可能被运营商或者你的防火墙给封了。既然端口有问题，那最简单的办法换个端口，就可以规避这个问题，下面介绍如何操作：</p>
<ul>
<li><p>编辑ssh配置文件 <code>/etc/ssh/sshd_config</code> 修改端口</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/ssh/sshd_config</div><div class="line"></div><div class="line"># Package generated configuration file</div><div class="line"># See the sshd_config(5) manpage for details</div><div class="line"></div><div class="line"># What ports, IPs and protocols we listen for</div><div class="line">Port 22</div><div class="line">Port 2333</div><div class="line">...</div></pre></td></tr></table></figure>
<p>  找到<code>Port 22</code>，在这行下面增加一行 <code>Port 2333</code>。当然你也可以直接把22改成你要设置的端口号。他们的区别是：<strong>增加一行可以增加一个ssh端口号</strong>。如上面的写法，我可以使用ssh通过 22 或 2333 端口来访问Raspberry Pi。</p>
</li>
<li><p>使配置生效</p>
<ol>
<li>重启ssh：<code>sudo service ssh restart</code></li>
<li>最简单你也可以直接重启设备：<code>sudo reboot</code> or <code>sudo init 6</code></li>
</ol>
</li>
<li><p>使用新端口登录</p>
<p>  使用新端口的登录方式如下：<br>  <code>ssh -p &lt;your new port&gt; &lt;username&gt;@&lt;ip-address or domain&gt;</code><br>  如： <code>ssh -p 2333 pi@ttdevs.com</code></p>
</li>
</ul>
<h3 id="无密码登录"><a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/#无密码登录" class="headerlink" title="无密码登录"></a>无密码登录</h3><p><a href="https://www.raspberrypi.org/documentation/remote-access/ssh/passwordless.md" target="_blank" rel="external">无密码登录</a>就是把我们从每次登录 Raspberry Pi 都需要输入密码的繁琐中解脱出来。配置完成后，我们只需要 <code>ssh &lt;your domain or ip&gt;</code> 即可登录我们的设备而不需要输入密码。</p>
<p>这个配置很简单，只需要将我们的public秘钥传到Raspberry Pi的 <code>~/.ssh/authorized_keys</code> 文件中即可。执行下面的命令（假设你的本地已经生成了相关的key）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.ssh/id_rsa.pub | ssh &lt;username&gt;@&lt;ip-address or domain&gt; &apos;cat &gt;&gt; .ssh/authorized_keys&apos;</div></pre></td></tr></table></figure>
<p>其中<code>id_rsa.pub</code>为你的公钥。如果没有问题，当你再次尝试使用ssh登录的话就不需要密码了。如果有问题，请参考<a href="https://www.raspberrypi.org/documentation/remote-access/ssh/passwordless.md" target="_blank" rel="external">这里</a>。</p>
<h2 id="0x02-VNC"><a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/#0x02-VNC" class="headerlink" title="0x02 VNC"></a>0x02 VNC</h2><p>虽然ssh可以完成我们的绝大多说操作。但是如果习惯了图形界面的你，一时半会很难上手这种命令行方式，会想有个桌面操作环境，那接下来我们介绍下VNC，因为他可以满足你对GUI的要求。VNC的配置，我们可以在如下<a href="https://www.raspberrypi.org/documentation/remote-access/vnc/README.md" target="_blank" rel="external"> Raspberry Pi 官方文档</a>中找到。当然，你也可以到<a href="https://www.realvnc.com" target="_blank" rel="external">VNC的官方网站</a>查看。</p>
<h3 id="安装VNC"><a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/#安装VNC" class="headerlink" title="安装VNC"></a>安装VNC</h3><ul>
<li><p>安装VNC</p>
<p>  我们可以使用这个命令来安装VNC服务： <code>sudo apt-get install tightvncserver</code></p>
</li>
<li><p>设置密码</p>
<p>  在启动服务之前，我们需要设置一个访问密码，命令为<code>tightvncserver</code>，操作如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~/.vnc $ tightvncserver</div><div class="line">perl: warning: Setting locale failed.</div><div class="line">perl: warning: Please check that your locale settings:</div><div class="line">	LANGUAGE = (unset),</div><div class="line">	LC_ALL = (unset),</div><div class="line">	LC_CTYPE = &quot;zh_CN.UTF-8&quot;,</div><div class="line">	LANG = &quot;en_GB.UTF-8&quot;</div><div class="line">    are supported and installed on your system.</div><div class="line">perl: warning: Falling back to a fallback locale (&quot;en_GB.UTF-8&quot;).</div><div class="line"></div><div class="line">You will require a password to access your desktops.</div><div class="line"></div><div class="line">Password:</div><div class="line">Verify:</div><div class="line">Would you like to enter a view-only password (y/n)? y</div><div class="line">Password:</div><div class="line">Warning: password truncated to the length of 8.</div><div class="line">Verify:</div><div class="line"></div><div class="line">New &apos;X&apos; desktop is raspberrypi:5</div><div class="line"></div><div class="line">Starting applications specified in /home/pi/.vnc/xstartup</div><div class="line">Log file is /home/pi/.vnc/raspberrypi:5.log</div><div class="line"></div><div class="line">pi@raspberrypi:~/.vnc $</div></pre></td></tr></table></figure>
<p>   <code>PS：密码无回显</code></p>
</li>
<li><p>运行一个vnc display</p>
<p>  <code>vncserver :1 -geometry 1920x1080 -depth 24</code></p>
<p>  这样你就可以通过VNC客户端（如：<a href="http://www.realvnc.com/download/viewer/" target="_blank" rel="external">VNC Viewer</a>）连接到我们的树莓派了，客户端的配置，你可以参考<a href="http://www.realvnc.com/products/vnc/documentation/5.3/" target="_blank" rel="external">这里</a>。下面是我的效果图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-ec796d19a6d150b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VNC Viewer"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-526bdab4c819637a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VNC Viewer logined"></p>
<blockquote>
<ol>
<li>VNC Viewer中我们需要指定连接哪个display，由于我们上面用的是 display 1，因此地址写：<code>ttdevs.com:1</code></li>
<li>另外，上面的命令是在display 1位置启动，如果你考虑节省资源可以关闭display 0，执行命令：<code>service lightdm stop</code></li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="配置VNC自启动"><a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/#配置VNC自启动" class="headerlink" title="配置VNC自启动"></a>配置VNC自启动</h3><p>通过上面的配置我们就可以使用VNC了，但是如果我们重新启动设备，之前的配置失效，VNC就连不上了。因此最好能<a href="http://manpages.ubuntu.com/manpages/precise/man8/update-rc.d.8.html" target="_blank" rel="external">把启动VNC的操作添加到系统的自启动项中</a>。具体操作如下：</p>
<ul>
<li>切换到root账户：<code>sudo su</code></li>
<li>进到/etc/init.d/目录：<code>cd /etc/init.d/</code></li>
<li>创建vncboot文件：<code>touch vncboot</code></li>
<li><p>编辑vncboot文件，输入下面内容：<code>sudo nano vncboot</code></p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#! /bin/sh</div><div class="line"># /etc/init.d/vncboot</div><div class="line"></div><div class="line">### BEGIN INIT INFO</div><div class="line"># Provides: vncboot</div><div class="line"># Required-Start: $remote_fs $syslog</div><div class="line"># Required-Stop: $remote_fs $syslog</div><div class="line"># Default-Start: 2 3 4 5</div><div class="line"># Default-Stop: 0 1 6</div><div class="line"># Short-Description: Start VNC Server at boot time</div><div class="line"># Description: Start VNC Server at boot time.</div><div class="line">### END INIT INFO</div><div class="line"></div><div class="line">USER=pi</div><div class="line">HOME=/home/pi</div><div class="line"></div><div class="line">export USER HOME</div><div class="line"></div><div class="line">case &quot;$1&quot; in</div><div class="line"> start)</div><div class="line">  echo &quot;Starting VNC Server&quot;</div><div class="line">  #Insert your favoured settings for a VNC session</div><div class="line">  su - $USER -c &quot;/usr/bin/vncserver :1 -geometry 1280x800 -depth 16 -pixelformat rgb565&quot;</div><div class="line">  ;;</div><div class="line"></div><div class="line"> stop)</div><div class="line">  echo &quot;Stopping VNC Server&quot;</div><div class="line">  /usr/bin/vncserver -kill :1</div><div class="line">  ;;</div><div class="line"></div><div class="line"> *)</div><div class="line">  echo &quot;Usage: /etc/init.d/vncboot &#123;start|stop&#125;&quot;</div><div class="line">  exit 1</div><div class="line">  ;;</div><div class="line">esac</div><div class="line"></div><div class="line">exit 0</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>修改vncboot的权限：<code>chmod 755 vncboot</code></li>
<li>设置VNC为默认启动：<code>update-rc.d vncboot defaults</code></li>
<li><p>最后，完整脚本如下</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~ $ sudo su</div><div class="line">root@raspberrypi:/home/pi# cd /etc/init.d/</div><div class="line">root@raspberrypi:/etc/init.d# touch vncboot</div><div class="line">root@raspberrypi:/etc/init.d# sudo nano vncboot</div><div class="line">root@raspberrypi:/etc/init.d# chmod 755 vncboot</div><div class="line">root@raspberrypi:/etc/init.d# update-rc.d vncboot defaults</div><div class="line">perl: warning: Setting locale failed.</div><div class="line">perl: warning: Please check that your locale settings:</div><div class="line">	LANGUAGE = (unset),</div><div class="line">	LC_ALL = (unset),</div><div class="line">	LC_CTYPE = &quot;zh_CN.UTF-8&quot;,</div><div class="line">	LANG = &quot;en_GB.UTF-8&quot;</div><div class="line">    are supported and installed on your system.</div><div class="line">perl: warning: Falling back to a fallback locale (&quot;en_GB.UTF-8&quot;).</div><div class="line">root@raspberrypi:/etc/init.d# ls -al</div><div class="line">total 308</div><div class="line">drwxr-xr-x   2 root root  4096 Mar 22 05:41 .</div><div class="line">drwxr-xr-x 109 root root  4096 Mar 21 15:01 ..</div><div class="line">-rw-r--r--   1 root root  1745 Mar 22 05:43 .depend.boot</div><div class="line">-rw-r--r--   1 root root   930 Mar 22 05:43 .depend.start</div><div class="line">-rw-r--r--   1 root root  1009 Mar 22 05:43 .depend.stop</div><div class="line">-rw-r--r--   1 root root  2427 Apr  6  2015 README</div><div class="line">...</div><div class="line">-rwxr-xr-x   1 root root   699 Mar 22 05:42 vncboot</div><div class="line">-rwxr-xr-x   1 root root  2666 Sep 25  2013 x11-common</div><div class="line"></div><div class="line">root@raspberrypi:/etc/init.d# reboot</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="密码管理"><a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/#密码管理" class="headerlink" title="密码管理"></a>密码管理</h3><p>VNC的密码管理比较简单，详细描述可以参考<a href="https://www.realvnc.com/products/open/4.1/man/vncpasswd.html" target="_blank" rel="external">这里</a>，下面做简单描述：</p>
<ol>
<li><p>修改密码 <code>vncpasswd</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~ $ vncpasswd</div><div class="line">Using password file /home/pi/.vnc/passwd</div><div class="line">Password:</div><div class="line">Verify:</div><div class="line">Would you like to enter a view-only password (y/n)? y</div><div class="line">Password:</div><div class="line">Warning: password truncated to the length of 8.</div><div class="line">Verify:</div><div class="line">pi@raspberrypi:~ $</div></pre></td></tr></table></figure>
<p> <code>PS：设置新的密码，好像并不会验证你的旧密码</code></p>
</li>
<li><p>忘记密码 </p>
<p> VNC的密码文件存储在：<code>$HOME/.vnc/passwd</code>中，如果你忘记了VNC的密码，可以直接删除这个文件，运行 <code>tightvncserver</code> 即可使用新的密码。</p>
</li>
</ol>
<h3 id="其他说明"><a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><ul>
<li>VNC默认端口号：<code>5901</code></li>
<li>VNC配置文件：<code>~/.vnc</code></li>
<li>VNC密码文件：<code>/.vnc/passwd</code></li>
</ul>
<h2 id="0x03-SCP"><a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/#0x03-SCP" class="headerlink" title="0x03 SCP"></a>0x03 SCP</h2><p>讲过上面的配置之后我们就可以通过这两种方式来远程操作我们的树莓派了。但是，有时候我们需要在本地和 Raspberry Pi 之间进行文件拷贝，这里我们可以有很多种选择，比如常见的FTP，SFTP等。但是由于FTP的配置比较麻烦，而且必须以服务的方式在系统常驻，因此给大家推荐 SCP。SCP 是secure copy的简写，用于在Linux下进行远程拷贝文件。我们比较常见的  <code>cp</code> 命令和 <code>scp</code> 类似，不过<code>cp</code> 只是在本机进行拷贝，不能跨服务器。考虑网络传输的安全性， <code>scp</code> 传输是加密的。默认情况，我们的Raspberry Pi 已经安装了SCP， 可以通过直接在终端输入 <code>scp</code> 来查看，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ scp</div><div class="line">usage: scp [-12346BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file]</div><div class="line">           [-l limit] [-o ssh_option] [-P port] [-S program]</div><div class="line">           [[user@]host1:]file1 ... [[user@]host2:]file2</div></pre></td></tr></table></figure>
<p>由于我用的是Mac系统，默认情况也已经安装了SCP命令。如果你使用的是Windows系统，我们可以到这里<a href="http://winscp.net/" target="_blank" rel="external">下载WinSCP</a>。</p>
<ul>
<li><p>本地文件拷贝到 Raspberry Pi</p>
<ol>
<li><p>拷贝本地文件file.txt到Raspberry Pi的用户目录下</p>
<p> <code>scp file.txt pi@ttdevs.com:</code></p>
</li>
<li><p>拷贝本地文件file.txt到Raspberry Pi的用户目录下的raspi文件下，路径为<code>/home/pi/raspi/</code></p>
<p> <code>scp file.txt pi@ttdevs.com:raspi</code></p>
</li>
</ol>
</li>
<li><p>Raspberry Pi文件拷贝到本地</p>
<p>  <code>scp pi@ttdevs.com:file.txt .</code></p>
<p>  拷贝远程Raspberry Pi用户目录下的file.txt到本地的当前目录</p>
</li>
<li><p>多文件拷贝</p>
<p>  scp支持多文件拷贝，我们可以一次指定多个文件或者使用通配符来进行操作</p>
<ol>
<li><p>指定多个文件</p>
<p> <code>scp file.txt file2.txt pi@ttdevs.com:</code></p>
</li>
<li><p>使用通配符</p>
<p> <code>scp *.txt pi@ttdevs.com:</code></p>
</li>
</ol>
</li>
</ul>
<h2 id="0x04-HTTP"><a href="/1970/01/01/[玩转树莓派]0x02吊炸天的远程控制/#0x04-HTTP" class="headerlink" title="0x04 HTTP"></a>0x04 HTTP</h2><p>为什么会提到这个呢？原因很简单，在接下来的学习中大部分的编码操作都会使用python来完成。所以我们会安装python语言，而且，默认情况我们的Raspberry Pi已经安装了python 2.7版本。python2 中默认包含了SimpleHTTPServer这个库。因此我们可以直接拿来使用。说了这么多你还不知道这个东东是干嘛的。其实从名字中我们就可以看出来，他是一个http server。既然是http server，那么我们就可以用来作为下载文件服务来使用，间接完成文件的拷贝。我们可以通过如下的命令来启动一个http服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">~ $ python -m SimpleHTTPServer 8088</div><div class="line">Serving HTTP on 0.0.0.0 port 8088 ...</div><div class="line">...</div></pre></td></tr></table></figure>
<p>如果你想使用80端口（请确保没有被运营商封掉），请将8088改成80，<code>sudo python -m SimpleHTTPServer 80</code>。启动好之后我们就可以在浏览器中通过打开 <code>http://&lt;your ip or domain&gt;:8088</code>  这样的方式来访问启动服务时那个位置下的所有文件。如果你想从Raspberry Pi中拷贝文件到本地，那就在 Raspberry Pi 中启动服务，如果你想把本地文件拷贝到Raspberry Pi中，在我们本地启动服务即可。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1801981-a6bed76cc26db1a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Raspberry Pi Python Http"></p>
<p>至此，我们可以真正开始Raspberry Pi 操作了～～</p>
<hr>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「Java」Java中TCP和UDP总结]]></title>
      <url>/1970/01/01/%5BJava%5DJava%E4%B8%ADTCP%E5%92%8CUDP%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="0x00-还是先说点啥"><a href="/1970/01/01/[Java]Java中TCP和UDP总结/#0x00-还是先说点啥" class="headerlink" title="0x00 还是先说点啥"></a>0x00 还是先说点啥</h2><p>之前写过一些关于TCP和UDP数据传输的代码，比如使用TCP传输音视频数据包，P2P打洞中使用UDP等。写好之后就直接丢下了，没有总结下都。最近准备找工作，再拿来温习下。</p>
<p>暂时把自己的定位很明确，就是android应用层的开发，所以关于TCP/UDP的实现细节，暂时也不想去深究。但是心里清楚这个必须去看的，有时间推荐大家看看《TCP/IP详解》或者网上有很多大牛的总结。  </p>
<h2 id="0x01-TCP"><a href="/1970/01/01/[Java]Java中TCP和UDP总结/#0x01-TCP" class="headerlink" title="0x01 TCP"></a>0x01 TCP</h2><p>不知道为什么，这个总结不想写的太细，不贴代码写的细又不知道能总结啥，好纠结，可能就是认识有限吧，公司要是有个架构就好了。不说了，还是安安稳稳的写总结吧。TCP这个可能是我们用的比较多的或者说我用的比较多的，主要的工作还是进行大量数据的传输和心跳保持（想想去年面试的时候都不知道啥是心跳，汗……）。对于心跳保持，就是一个简单的小心跳包；大量数据的传输，这个也总结不了啥东西，代码就那样，就是一些细节说一下。</p>
<h3 id="客户端"><a href="/1970/01/01/[Java]Java中TCP和UDP总结/#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>这个是我们关注的最多的，也是作为一个手机APP主要关注的，因为我们就是client。</p>
<h4 id="创建client"><a href="/1970/01/01/[Java]Java中TCP和UDP总结/#创建client" class="headerlink" title="创建client"></a>创建client</h4><p><code>new Socket(ip, port);</code></p>
<p>我们可以通过上面的方式创建一个socket，如果失败，会抛出IOException。参数中的IP和Port是目标服务器的IP和端口号。若你想得到本地的IP和PORT也可通过这个socket拿到。当然，创建socket还有多种方法，比如 <code>new Socket(proxy)</code>，如果有需要你可以查阅相关资料。</p>
<p>拿到socket对象之后我们接着要做的事情就是从这个socket中拿到输入和输出流，这样我们才可以进行数据的收发：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InputStream is = mSocket.getInputStream();</div><div class="line">OutputStream out = mSocket.getOutputStream();</div></pre></td></tr></table></figure>
<p>通过输出流，我们可以使用 is.read(receiveBuffer) 和 out.write(data); 来进行数据的收发。这里给两个简单实例：</p>
<h4 id="接收数据"><a href="/1970/01/01/[Java]Java中TCP和UDP总结/#接收数据" class="headerlink" title="接收数据"></a>接收数据</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">int</span> count = is.read(receiveBuffer);</div><div class="line">        <span class="keyword">if</span> (count == -<span class="number">1</span>) &#123;</div><div class="line">            notifyError();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">byte</span>[] data = getPacket(receiveBuffer, count, is);</div><div class="line">        mReceiverQueue.put(data);</div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        notifyError();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        notifyError();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假如我们的数据包协议格式如下：  </p>
<p><img src="http://img.blog.csdn.net/20140222112122625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHRkZXZz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="">  </p>
<p>这个时候，如果进行大量数据传输的时候我们从InputStream中一次读取的数据可能不是一个完整的数据包。这个时候我们需要做下面的判断：</p>
<p>a、读取的数据长度是否达到包头大小，若没有包头长，继续读，直到达到或者超过包头大小<br>b、从包头中解出长度字段，循环读取，直到读到长度字段标示长度为止<br>c、校验数据，去除包头，取出包体<br>d、重复上述步骤</p>
<h4 id="发送数据"><a href="/1970/01/01/[Java]Java中TCP和UDP总结/#发送数据" class="headerlink" title="发送数据"></a>发送数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="keyword">byte</span>[] data = mSenderQueue.take();</div><div class="line">		out.write(data);</div><div class="line">	&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">		notifyError();</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">		notifyError();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>mSenderQueue和mReceiverQueue一样，都是阻塞队列。发送的时候，我们从队列中取出要发送的数据，然后通过输出流写入即可。这个地方比发送简单了一些。可能你已经注意到，我的发送和接收都用了阻塞队列，这个原因就是考虑到大量数据的时候做一个缓冲，如果没有缓冲，可能导致代码的阻塞。另外就是当我们的阻塞队列充满的时候可以手动丢弃一些数据，这个就是具体应用了。  </p>
<h3 id="服务端"><a href="/1970/01/01/[Java]Java中TCP和UDP总结/#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>这个可以简单了解下，可以使用各种语言实现，比如Java、C++等。这里简单介绍Java的实现。</p>
<p>首先，我们创建一个ServerSocket对象并指定一个端口号，通过这个对象的accept()方法等待客户的连接，这个方法是阻塞的；当有客户端连接上来之后，我们就拿到了连接的socket，拿到这个socket之后的操作就和客户端一样了，最后看一下关键代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9559</span>);</div><div class="line">	<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">		Socket socket = serverSocket.accept();</div><div class="line">		<span class="comment">// new ServiceSocketThread(socket).start();</span></div><div class="line">	&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">	e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为服务端不可能只与一个客户端连接，因此上面的代码写在一个死循环中。拿到socket之后起一个新的线程来处理这个socket。当然，实际情况可能不是这样，为每一个连接创建一个新的线程是很耗费资源的。</p>
<p>最后，还有一点需要注意的是：从Socket中拿到InputStream和OutputStream之后如果关闭它们，socket也将随之关闭(未验证)。</p>
<h2 id="0x02-UDP"><a href="/1970/01/01/[Java]Java中TCP和UDP总结/#0x02-UDP" class="headerlink" title="0x02 UDP"></a>0x02 UDP</h2><p>这个东西用的很少，就是当初测试P2P的时候用过。能想到的问题就是数据大小的问题，比如发送数据我们的数据定义为多大合适。但是最后没有实际的项目验证，在此也不好回答。先贴一段代码出来：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPServer</span> <span class="keyword">extends</span> <span class="title">BaseThread</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发送队列大小</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SENDQUEUESIZE = <span class="number">10</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 接收队列大小</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RECEIVEQUEUESIZE = <span class="number">10</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * UDP接收缓存大小</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RECEIVERBUFFERSIZE = <span class="number">1024</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * UDP接收缓存大小</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RECEIVERPACKETSIZE = <span class="number">1024</span> * <span class="number">64</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> DatagramPacket receivePacket;</div><div class="line">    <span class="keyword">private</span> DatagramSocket mSocket;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">        receivePacket = <span class="keyword">new</span> DatagramPacket(<span class="keyword">new</span> <span class="keyword">byte</span>[RECEIVERPACKETSIZE], RECEIVERPACKETSIZE);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mSocket = <span class="keyword">new</span> DatagramSocket(<span class="number">9559</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">            System.out.println(String.format(<span class="string">"udp connect init error: %s"</span>, e.getMessage()));</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mSocket.receive(receivePacket);</div><div class="line"></div><div class="line">            <span class="keyword">byte</span>[] data = receivePacket.getData();</div><div class="line">            <span class="keyword">int</span> length = receivePacket.getLength();</div><div class="line">            <span class="keyword">int</span> offset = receivePacket.getOffset();</div><div class="line">            System.out.print(++count</div><div class="line">                    + String.format(<span class="string">"length:%d|%d, offset:%d, data: %s \n"</span>, length, data.length, offset, <span class="keyword">new</span> String(data, <span class="string">"gbk"</span>)));</div><div class="line">            System.out.println(data[<span class="number">1024</span>]);</div><div class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">            System.out.println(String.format(<span class="string">"udp connect init error: %s"</span>, e.getMessage()));</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            System.out.println(String.format(<span class="string">"udp connect init error: %s"</span>, e.getMessage()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>byte[] data = receivePacket.getData();</code> </p>
<p>这个地方拿到的data是缓冲区的大小，他们地址是一样的，这个大家可以试试就知道。至于这个data中有多少数据，就需要我们通过 <code>receivePacket.getLength();</code> 拿到。</p>
<p><img src="https://raw.githubusercontent.com/ttdevs/ttdevs.github.io/common/images/logo.png" alt="Create by ttdevs"></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
